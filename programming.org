* Emacs Questions
** Elisp

*** Dired files                                                       :drill:
SCHEDULED: <2016-04-03 Sun>
:PROPERTIES:
:ID:       34d8abed-eba4-4ad0-814c-14bc929fa90a
:DRILL_LAST_INTERVAL: 60.7733
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.4
:DRILL_EASE: 2.7
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-02 Tue 12:05]
:END:

How do you run an Emacs command on marked files in dired?

**** Answer
dired-get-marked-files

#+BEGIN_SRC emacs-lisp

(with-current-buffer "org-ref"
  (loop for path in (dired-get-marked-files)
        do (with-current-buffer (find-file-noselect path)
             (indent-region (point-min) (point-max)))))
#+END_SRC

* Programming Questions
** Math
*** Median 1                                                          :drill: 
SCHEDULED: <2016-03-13 Sun>
:PROPERTIES:
:ID: 6be85ae3-7fbb-42d7-9f95-3c57fba17c95
:DRILL_LAST_INTERVAL: 26.8276
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.75
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-15 Mon 09:36]
:END: 

What is the median?  How is defined for an odd set of number and an even set of numbers?

**** Answer  

It's the middle number.  If the number of elements is even, the median is the mean of the middle two numbers.

** Object Oriented Programming
*** Open Closed Principle                                             :drill:
SCHEDULED: <2016-06-10 Fri>
:PROPERTIES:
:ID:       e5f77354-5bc9-4c14-95de-09ba86eb1f9f
:DRILL_LAST_INTERVAL: 101.2386
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.875
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:23]
:END:

What is the open closed principle?

**** Answer

Software entities (classes, modules, functions, etc...) should be open for
extension, but closed for modification.

-- Bertrand Meyer


There's some contention about it's viability at Jon Skeet's blog.  He suggests a
better variation of:

http://codeblog.jonskeet.uk/2013/03/15/the-open-closed-principle-in-review/

"Identify points of predicted variation and create a stable interface around
them."

Which is similar to Bloch's advice of "design for inheritance or prohibit it."



https://en.wikipedia.org/wiki/Open/closed_principle

*** Benefits of OOP                                                   :drill:
SCHEDULED: <2016-04-04 Mon>
:PROPERTIES:
:ID:       4941e3e8-f13e-4876-ad11-2879598630c6
:DRILL_LAST_INTERVAL: 55.6489
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.42
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-08 Mon 16:24]
:END:

What are the benefits of OO Programing?

**** Answer

+ Code reuse
+ Modularity
+ Encapsulation - hide implmentation details
+ Pluggability

** Java Language
*** Variable Basics                                                   :drill:
SCHEDULED: <2016-03-17 Thu>
:PROPERTIES:
:ID:       dfe6c5a9-33b5-4933-a2c1-9f57ab726506
:DRILL_LAST_INTERVAL: 48.3897
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.875
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-29 Fri 15:54]
:END:

What are the 4 types of variables in Java?

**** Answer

1. Instance variables - non-static fields
2. Class variables - static fields
3. Local variables
4. Parameters

*** Primitive Types                                                   :drill:
SCHEDULED: <2016-04-10 Sun>
:PROPERTIES:
:ID:       938d3b90-09e3-45fa-92a4-1cbdc02d4e0e
:DRILL_LAST_INTERVAL: 62.822
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.75
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-02-07 Sun 01:47]
:END:

What are Java's primitive types?

**** Answer

+ byte - 8-bit signed two's complement integer
+ short - 16-bit signed two's complement integer
+ int - 32-bit signed two's complement integer
+ long - 64-bit signed two's complement integer
+ float - single-precision 32-bit IEEE 745 floating point
+ long - double-precision 64-bit IEEE 745 floating point
+ char - 16-bit Unicode char
+ boolean - true and false

*** Primitive Types 2                                                 :drill:
SCHEDULED: <2016-05-31 Tue>
:PROPERTIES:
:ID:       d2b0df5b-4bea-4a10-9de1-dfdab03d4796
:DRILL_LAST_INTERVAL: 96.2631
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.6
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-25 Thu 22:31]
:END:

What are the default values for all primitive types?

**** Answer

Default values are only given to fields, not to local variables or parameters.

byte: 0
short: 0
int: 0
long: 0L
float: 0.0f
double: 0.0d
char: '\u0000'
Sting or any object: null
boolean: false

*** Integer Literals                                                  :drill:
SCHEDULED: <2016-04-05 Tue>
:PROPERTIES:
:ID:       c966a52c-6989-4f50-891a-dbbb88ae72a9
:DRILL_LAST_INTERVAL: 64.5187
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.2
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-31 Sun 10:31]
:END:

What integer literals does Java support?

**** Answer

integer - no suffix
long - l or L suffix, L is preferred
base 2 - 0b11
base 16 - 0xcafebabe
underscores, anywhere but the beginning and the end

*** Floating point literals                                           :drill:
SCHEDULED: <2016-03-24 Thu>
:PROPERTIES:
:ID:       c417f903-19a7-4d7f-9d30-9a2730839ee8
:DRILL_LAST_INTERVAL: 41.342
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.143
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-12 Fri 10:30]
:END:

What floating point literals does Java support?

**** Answer

+ float - f or F suffix
+ double - d or D suffix
+ scientific notation - e or e, 1.234e2
+ underscores, anywhere but the beginning and the end or next to a decimal

*** Char literals                                                     :drill:
SCHEDULED: <2016-05-21 Sat>
:PROPERTIES:
:ID:       6ace1daf-5b6a-469b-b110-39ed0119e184
:DRILL_LAST_INTERVAL: 92.0276
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 9
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.667
:DRILL_EASE: 2.56
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-19 Fri 10:06]
:END:

What char and string literals does Java support?

**** Answer

any UTF-16 values
unicode escapes - '\u0108', "S\u00ED"
escape sequences - \b backspace, \t tab, \n, \f, \r, \", \', \\

*** Class Literal                                                     :drill:
SCHEDULED: <2016-06-09 Thu>
:PROPERTIES:
:ID:       4d3cb5a7-cefd-49e1-8eef-5ffc815b67cd
:DRILL_LAST_INTERVAL: 101.8489
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.833
:DRILL_EASE: 2.56
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-28 Sun 15:42]
:END:

What is a class literal in Java?

**** Answer

Appending ".class" to a type name, e.g. String.class.  Refers to the object that
represents the type itself.

*** Arrays 1                                                          :drill:
SCHEDULED: <2016-05-30 Mon>
:PROPERTIES:
:ID:       a19ccb8f-c14f-40c0-879b-1ed771349a05
:DRILL_LAST_INTERVAL: 97.0501
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.25
:DRILL_EASE: 2.56
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-23 Tue 10:49]
:END:

How do you declare an array type in Java?

**** Answer

MyType[] anArray;
MyType anArray[]; - WORKS, but BAD

*** Arrays Copying                                                    :drill:
SCHEDULED: <2016-03-04 Fri>
:PROPERTIES:
:ID:       9d2af5e1-b9c1-4715-b227-0eb84708747e
:DRILL_LAST_INTERVAL: 34.5798
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.167
:DRILL_EASE: 2.32
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-29 Fri 15:36]
:END:

How do you copy an array in Java?

**** Answer

System.arraycopy(Object src, int srcPos, Object dest, int destPos, int length)

Copy into initialized array, returns void.

Arrays.copyOf(T[] original, int newLength)
Copy into new array, truncates or pads with nulls to get newLength

Arrays.copyOfRange(T[] original, int from, int to)
Copies specified range into a new array

*** Reference Types                                                   :drill:
SCHEDULED: <2016-03-07 Mon>
:PROPERTIES:
:ID:       37cb8ba4-f7e8-4420-aa99-623b76180cfb
:DRILL_LAST_INTERVAL: 36.2444
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.75
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-31 Sun 10:30]
:END:

What are Java's reference types and when do they get garbage collected?

**** Answer

+ Direct reference - when no references exist
+ SoftReference - eligible for collection with low memory warning
+ WeakReference - when no direct references exist
+ PhantomReference - relate to cleanup and offer notification before finalization

*** Formatting String                                                 :drill:
SCHEDULED: <2016-05-12 Thu>
:PROPERTIES:
:ID:       fc8e3d5f-db93-4482-a0b9-5b55cec511c8
:DRILL_LAST_INTERVAL: 80.241
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.2
:DRILL_EASE: 2.56
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-22 Mon 09:17]
:END:

How do you format a string in Java?

**** Answer

Creating a string
String.format(Locale l, String format, Object... args)
String.format(String format, Object... args)

Printing
System.out.printf(String formatString, Object... args)
System.out.format(String formatString, Object... args)

*** Format Specifier Syntax                                           :drill:
SCHEDULED: <2016-03-11 Fri>
:PROPERTIES:
:ID:       c531d30c-d996-4c67-a870-f5cc6faef83e
:DRILL_LAST_INTERVAL: 33.8631
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.25
:DRILL_EASE: 2.18
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-06 Sat 00:48]
:END:

What is the syntax for a format specifier?

**** Answer

~%[argument_index$][flags][width][.precision]conversion~

https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html

*** Formatter - General Conversions                                   :drill:
SCHEDULED: <2016-03-16 Wed>
:PROPERTIES:
:ID:       1186f080-5d43-40a7-8045-7aae066f84b1
:DRILL_LAST_INTERVAL: 36.5318
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.333
:DRILL_EASE: 2.18
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-02-08 Mon 16:22]
:END:

What general conversions are supported in a format specifier?

**** Answer

*General*

+ b, B - "false" if null, String.valueOf(arg) if boolean, otherwise "true"
+ h, H - "null" if null, otherwise Integer.toHexString(arg.hashCode())
+ s, S - "null" if null, if arg is Formattable then arg.FormatTo, otherwise
  arg.toString.

https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html

*** Formatter - Character Conversions                                 :drill:
SCHEDULED: <2016-05-07 Sat>
:PROPERTIES:
:ID:       25a7e8cc-dd99-40cf-9642-8e46cfb690ed
:DRILL_LAST_INTERVAL: 79.8074
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.6
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-17 Wed 11:19]
:END:

What character conversions are supported in a format specifier?

**** Answer
*Character*
+ c, C - Unicode character

https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html

*** Formatter - Integral Conversions                                  :drill:
    SCHEDULED: <2016-03-09 Wed>
:PROPERTIES:
:ID:       30a7dece-1423-44b7-9460-3cbd24bbf374
:DRILL_LAST_INTERVAL: 4.658
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.75
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:09]
:END:

What Integral conversions are supported in a format specifier?

**** Answer
*Integral*
+ d    - decimal integer
+ o    - octal integer
+ x, X - hexadecimal integer

*** Formatter - Floating Point Conversions                            :drill:
    SCHEDULED: <2016-03-06 Sun>
:PROPERTIES:
:ID:       3fcd21ba-88ce-4022-bede-a4643cd26345
:DRILL_LAST_INTERVAL: 14.005
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.125
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:35]
:END:

What floating point conversions are supported in a format specifier?

**** Answer
*Floating Point*
+ e, E - decimal number in computerized scientific notation
+ f    - decimal number
+ g, G - smart decimal number with maybe scientific notation, uses the shorter
  of e and f
+ a, A - hexadecimal floating-point number with significant and exponent

https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html

*** Formatter - Date time Conversions                                 :drill:
SCHEDULED: <2016-03-07 Mon>
:PROPERTIES:
:ID:       50ed3929-de34-4b06-9cb6-ee7cbcdc3fc8
:DRILL_LAST_INTERVAL: 36.3001
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-31 Sun 10:32]
:END:

What is the Date time prefix in a format specifier?

**** Answer

*Date Time*
+ t, T - prefix for date/time conversions

https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html

*** Formatter - Other Conversions                                     :drill:
SCHEDULED: <2016-05-27 Fri>
:PROPERTIES:
:ID:       3a979001-89ca-449c-beca-727caaaa4dd6
:DRILL_LAST_INTERVAL: 87.4239
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.6
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:21]
:END:

What other conversions are supported in a format specifier?

**** Answer

*Other*
+ %    - literal %
+ n    - platform line separator

https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html

*** Formatter - Flags                                                 :drill:
SCHEDULED: <2016-04-19 Tue>
:PROPERTIES:
:ID:       28483543-3abc-46e8-9d14-dbaa606e6ca8
:DRILL_LAST_INTERVAL: 60.109
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.429
:DRILL_EASE: 2.28
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-02-19 Fri 10:10]
:END:

What flags does java.util.Formatter support?

**** Answer

7 promoted to 007, HIV positive, negative, europe

+ '-'     left-justified
+ '#'     conversion-dependent alternate form
+ '+'     always include a sign
+ ' '     pad with leading spaces for positive values
+ '0'     zero-padded
+ ','     locale specific grouping separators
+ '('     enclose negative numbers in parenthesis

*** Integral different base                                           :drill:
SCHEDULED: <2016-04-11 Mon>
:PROPERTIES:
:ID:       9e2f790c-c1e8-4897-bfc5-cd766456d76e
:DRILL_LAST_INTERVAL: 56.3581
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 2.32
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-02-15 Mon 09:56]
:END:

How do you get an integral representation in two's complement form in different
bases?

**** Answer

Returns the two's complement version:

#+BEGIN_SRC java
Integer.toBinaryString(2)  == "10"
Integer.toBinaryString(-2) == "1111111111111111111111111111110"

Integer.toOctalString(21)  == "25"
Integer.toOctalString(-21) == "37777777747"

Integer.toHexString(15)    == "f"
Integer.toHexString(-15)   == "fffffff1"

All the same methods on Long.
#+END_SRC

*** Integral different base - literal version                         :drill:
    SCHEDULED: <2016-03-08 Tue>
    :PROPERTIES:
    :ID:       8A69B0A0-82AA-4FA2-9798-EC5EEED6E449
    :DRILL_LAST_INTERVAL: 10.4103
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-27 Sat 10:20]
    :END:

How do you get an integral representation in a different base that isn't in
two's complement form?

**** Answer

Return the literal version

#+BEGIN_SRC java
Integer.toString(-2, 2)   == "-10"
Integer.toString(-15, 2)  == "-1111"
Integer.toString(100, 2)  == "1100100"
Integer.toString(100, 16) == "64"
#+END_SRC

*** Integral different base - BigInteger                             :drill:
    SCHEDULED: <2016-03-25 Fri>
    :PROPERTIES:
    :ID:       5e672982-0265-4c17-877d-ef1e10bc25fd
    :DRILL_LAST_INTERVAL: 26.3946
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 4.5
    :DRILL_EASE: 2.7
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-28 Sun 15:27]
    :END:

How do you get an integral representation of a ~BigInteger~?

**** Answer

#+BEGIN_SRC java
BigInteger myInt = BigInteger.valueOf(3);
myInt.toString(radix) 
#+END_SRC

*** Math Min and Max values                                           :drill:
SCHEDULED: <2016-03-23 Wed>
:PROPERTIES:
:ID:       cda0c464-b768-4628-9e69-c408e1bff97e
:DRILL_LAST_INTERVAL: 45.5682
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-06 Sat 14:40]
:END:

How to do you get the min and max value of a number type in Java?

**** Answer

Integer.MIN_VALUE
Integer.MAX_VALUE

Long.MIN_VALUE
Long.MAX_VALUE

For floating point, the min value is actually the smallest magnitude or smallest
/absolute/ number.  If you want the most negative number, you do
-Float.MAX_VALUE.  That works since IEEE754 is symmetric around 0, unlike ints

Float.MIN_VALUE
Float.MAX_VALUE

Double.MIN_VALUE
Double.MAX_VALUE

Really you should use:

Float.NEGATIVE_INFINITY
Float.POSITIVE_INFINITY

Double.NEGATIVE_INFINITY
Double.POSITIVE_INFINITY

http://stackoverflow.com/questions/3884793/minimum-values-and-double-min-value-in-java

*** Overloaded Return Types                                           :drill:
SCHEDULED: <2016-05-07 Sat>
:PROPERTIES:
:ID:       b9e3c6f1-927a-487f-b702-28b958ddb849
:DRILL_LAST_INTERVAL: 72.1024
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.833
:DRILL_EASE: 2.56
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-25 Thu 22:34]
:END:

Can you overload a method by return type in Java?

**** Answer

No, because you are not required to capture the the return value of a method in
Java, so the compiler cannot pick between two methods.

#+BEGIN_SRC java
boolean doSomething() {}
int doSomething() {}

doSomething();
#+END_SRC

This limitation is part of Java, but not the JVM.

#+BEGIN_QUOTE
[[http://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getMethod-java.lang.String-java.lang.Class][Class.getMethod(String, Class...)]]

Note that there may be more than one matching method in a class because while
the Java language forbids a class to declare multiple methods with the same
signature but different return types, the Java virtual machine does not. This
increased flexibility in the virtual machine can be used to implement various
language features. For example, covariant returns can be implemented with bridge
methods; the bridge method and the method being overridden would have the same
signature but different return types.
#+END_QUOTE
*** Clone Array                                                       :drill:
SCHEDULED: <2016-03-05 Sat>
:PROPERTIES:
:ID:       1d1f12f4-cb3a-4c7a-bbe0-9897a3e5ced1
:DRILL_LAST_INTERVAL: 31.868
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-02 Tue 12:02]
:END:

What type does Array.clone return?

**** Answer

As of Java 1.5, it returns a shallow copy of the array with the same return
type.

*** Class initialization order                                        :drill:
SCHEDULED: <2016-05-05 Thu>
:PROPERTIES:
:ID:       b5363986-8d46-4f21-87ad-3299e06cd59e
:DRILL_LAST_INTERVAL: 73.5551
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.667
:DRILL_EASE: 2.46
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:46]
:END:

What order are classes initialized in the following code?

#+BEGIN_SRC java
class Grandparent {
    static { System.out.println("static - grandparent"); }

    { System.out.println("instance - grandparent"); }

    public Grandparent() { System.out.println("constructor - grandparent"); }
}

class Parent extends Grandparent {
    { System.out.println("instance - parent"); }

    public Parent() { System.out.println("constructor - parent"); }

    static { System.out.println("static - parent"); }
}

class Child extends Parent {
    public Child() { System.out.println("constructor - child"); }

    static { System.out.println("static - child"); }

    { System.out.println("instance - child"); }
}

public class LoadTest {
    public static void main(String[] args) {
        System.out.println("START");
        new Child();
        System.out.println("END");
    }
}

#+END_SRC

**** Answer

START
static - grandparent
static - parent
static - child
instance - grandparent
constructor - grandparent
instance - parent
constructor - parent
instance - child
constructor - child
END

http://stackoverflow.com/questions/23093470/java-order-of-initialization-and-instantiation
http://stackoverflow.com/questions/2007666/in-what-order-do-static-initializer-blocks-in-java-run
http://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4.1

*** Class intialization                                               :drill:
SCHEDULED: <2016-05-19 Thu>
:PROPERTIES:
:ID:       4a16e638-6b5f-4650-9269-7e534efd74c4
:DRILL_LAST_INTERVAL: 78.812
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.2
:DRILL_EASE: 2.52
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:16]
:END:

When are Java classes initialized?

**** Answer

A class or interface is initialized on first access of non-compile-time constant:

+ assigning compile time constants
+ recursively initializing the superclass
+ processing the static initializers (if not already complete)

Initialization does not occur when accessing fields that are compile time constants. 

http://stackoverflow.com/questions/23093470/java-order-of-initialization-and-instantiation

*** Compile time constants                                            :drill:
SCHEDULED: <2016-03-05 Sat>
:PROPERTIES:
:ID:       2c7534cd-5b20-42ad-b72b-114fa56ff988
:DRILL_LAST_INTERVAL: 28.0492
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 9
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.556
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-06 Sat 14:41]
:END:

What are compile time constants in Java?

**** Answer

+ Literals of primitive types and literal strings.
+ Casts to primitive types and strings.
+ All operators excepts ++ and --
+ Simple and qualified names that refer to constant expressions.

http://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#d5e30892

*** String vs StringBuilder vs StringBuffer                           :drill:
SCHEDULED: <2016-03-16 Wed>
:PROPERTIES:
:ID:       71b8ea5d-535f-4a21-853d-f2319f7d2c69
:DRILL_LAST_INTERVAL: 33.5256
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.75
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-02-11 Thu 10:38]
:END:

What are the differences between String, StringBuilder and StringBuffer?

**** Answer

String is immutable and stored in the constant String pool.
StringBuilder is not threadsafe and is stored on the heap.
StringBuffer is threadsafe and is stored on the heap, but is slower than string builder.

You should generally use StringBuilder.  If you need synchronization,
synchronize on the string builder.

Both StringBuilder and StringBuffer extend AbstractStringBuilder.

http://stackoverflow.com/questions/355089/stringbuilder-and-stringbuffer

*** Varargs                                                           :drill:
SCHEDULED: <2016-04-28 Thu>
:PROPERTIES:
:ID:       7b5fe7f3-70ef-4606-b523-e246dc95cddc
:DRILL_LAST_INTERVAL: 65.1778
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-23 Tue 10:48]
:END:

How do you declare varargs in Java?

**** Answer

#+BEGIN_SRC java
public static void main(String... args) {
    System.out.println(Arrays.toString(args));
}
#+END_SRC

*** Varargs type                                                      :drill:
SCHEDULED: <2016-03-22 Tue>
:PROPERTIES:
:ID:       262bfbad-9446-443f-81f8-c09cebe80766
:DRILL_LAST_INTERVAL: 37.8159
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.75
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-13 Sat 13:16]
:END:

What type is a varargs argument in Java

**** Answer

The Java Language Specification (third edition) section 8.4.1 says that "If the
last formal parameter is a variable arity parameter of type T, it is considered
to define a formal parameter of type T[]".

*** Multidimensional array - declaration                              :drill:
SCHEDULED: <2016-03-23 Wed>
:PROPERTIES:
:ID:       0a364e54-1afd-451a-9a8e-6b61e1a2d682
:DRILL_LAST_INTERVAL: 34.532
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-17 Wed 11:26]
:END:

How do you declare a multidimensional array in Java?

**** Answer

#+BEGIN_SRC java
int[][][] threeDimArray = new int[3][3][3];
int[][][] threeDimInit = { 
    { {1, 2}, {3, 4}, },
    { {5, 6}, {7, 8}, },
};
#+END_SRC

*** Multidimensional array - access                                   :drill:
SCHEDULED: <2016-03-19 Sat>
:PROPERTIES:
:ID:       7d40698d-7e03-4131-9c09-a164213aba57
:DRILL_LAST_INTERVAL: 32.8314
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-15 Mon 10:00]
:END:

How do you access an item in a multidimensional array in Java?

**** Answer

#+BEGIN_SRC java
int[][][] threeDimArray = new int[3][3][3];
int myItem = threeDimArray[0][1][2];
#+END_SRC

*** Multidimensional array - String representation                    :drill:
SCHEDULED: <2016-04-06 Wed>
:PROPERTIES:
:ID:       a364ea37-eeba-400f-9e5c-7d2c17349540
:DRILL_LAST_INTERVAL: 48.196
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-18 Thu 12:30]
:END:

How do you get a string representation of a multidimensional array in Java?

**** Answer

#+BEGIN_SRC java
int[][][] threeDimArray = new int[3][3][3];
Arrays.deepToString(threeDimArray);
// [[[1, 2], [3,4]], [[5, 6], [7, 8]]]
#+END_SRC

*** Create a memory leak                                              :drill:
    SCHEDULED: <2016-03-26 Sat>
:PROPERTIES:
:ID:       2c16baf7-a2b4-4e42-97ce-92816dc2cfd9
:DRILL_LAST_INTERVAL: 31.967
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.857
:DRILL_EASE: 2.56
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-23 Tue 10:48]
:END:

How can you create a memory leak in Java?

**** Answer

Brain-stand leak, load class with backhoe, not close hole, unintentional object retention

For a real memory leak, classloader leaks will actually leak memory.

From http://stackoverflow.com/questions/6470651/creating-a-memory-leak-with-java

1. The application creates a long-running thread (or use a thread pool to leak
   even faster).
2. The thread loads a class via an (optionally custom) ClassLoader.
3. The class allocates a large chunk of memory (e.g. new byte[1000000]), stores
   a strong reference to it in a static field, and then stores a reference to
   itself in a ThreadLocal. Allocating the extra memory is optional (leaking the
   Class instance is enough), but it will make the leak work that much faster.
4. The thread clears all references to the custom class or the ClassLoader it
   was loaded from.
5. Repeat.

From http://frankkieviet.blogspot.com/2006/10/classloader-leaks-dreaded-permgen-space.html

Any reference from outside an application to an object inside the application of
which the class is loaded by the application's classloader will cause a
classloader leak.

For unintentional object retention:

+ Any Object that manages it's own memory, resizable array, stack, queue, etc...
+ Callbacks
+ Memory that's not reachable by the JVM, such as that allocated by native
  methods.
+ Not closing connections or files.

*** Relationship between hashcode and equals                          :drill:
SCHEDULED: <2016-03-15 Tue>
:PROPERTIES:
:ID:       57a4b3cb-5206-475a-b876-490ee17f8812
:DRILL_LAST_INTERVAL: 29.0037
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.25
:DRILL_EASE: 2.6
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-02-15 Mon 09:59]
:END:

What is the relationship between hashCode and equals?  

What is their significance?

**** Answer

equals general contract - symmetric, reflexive, transitive, consistent,
non-nullity

hashCode general contract - consistent, equals -> same hashCode, different
equals -> not necessarily different hashCode.

Equal objects must produce the same hash code as long as they are equal,
however unequal objects need not produce distinct hash codes.

*** Interfaces: Call default methods                                  :drill:
SCHEDULED: <2016-04-13 Wed>
:PROPERTIES:
:ID:       91df68d1-253f-4f3f-84f4-005400946e02
:DRILL_LAST_INTERVAL: 51.2468
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.4
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-22 Mon 09:24]
:END:

How do you call a default method explicitly?

**** Answer

MyInterface.super.theDefaultMethod();

This only works if ~MyInterface~ is an immediate parent of the implementing
class or extending interface.  Grandchildren can't do this.

*** Interface multiple inheritance                                    :drill:
SCHEDULED: <2016-04-06 Wed>
:PROPERTIES:
:ID:       c1d5b898-6c74-4440-8960-0f4e2d501bbf
:DRILL_LAST_INTERVAL: 45.0046
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.7
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:43]
:END:

Can an interface extend multiple interfaces?

**** Answer

Yes, there is no diamond problem unless default methods conflict from the parent
interfaces.  If default methods from two interfaces have the same signature,
then you must provide an implementation as either an overriding method or as a
default method for an interface.  Otherwise the compiler will error.

http://stackoverflow.com/questions/19546357/can-an-interface-extend-multiple-interfaces-in-java

http://codeinventions.blogspot.com/2014/07/can-interface-extend-multiple.html

#+BEGIN_SRC java
public class MultInterfaces {

    interface Washable {
    default void prepare() {
        System.out.println("Washable: preparing");
    }
        void wash();

    }

    interface Cleanable {
        default void prepare() {
            System.out.println("Cleanable: preparing");
        }
        void wash();
    }

    interface WashAndCleanable extends Washable, Cleanable {

        default void prepare() {
            System.out.println("WashAndCleanable: preparing");
            Washable.super.prepare();
            Cleanable.super.prepare();
        }
    }


    static class WasherMan implements WashAndCleanable {

        @Override
        public void prepare() {
            System.out.println("WasherMan: preparing");
            WashAndCleanable.super.prepare();
        }

        @Override
        public void wash() {
            System.out.println("Washing");
        }
    }

    public static void main(String... args) {
        WashAndCleanable washMan = new WasherMan();
        washMan.prepare();
        washMan.wash();
    }

}
#+END_SRC

*** String final class                                                :drill:
SCHEDULED: <2016-04-13 Wed>
:PROPERTIES:
:ID:       c87ea6d6-5a7d-4272-b0a3-7714da8852d1
:DRILL_LAST_INTERVAL: 47.7462
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.75
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-25 Thu 22:24]
:END:

Why is String final?

**** Answer

Since String is an immutable class, allowing a subclass could break the
equals and hashCode contract, or the fake string might equals the same, but
wouldn't be the same.

*** Wait, notify and notifyAll on Object                              :drill:
SCHEDULED: <2016-03-22 Tue>
:PROPERTIES:
:ID:       c7332c74-7a12-458f-8147-c24890814a44
:DRILL_LAST_INTERVAL: 32.9783
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.4
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-18 Thu 12:30]
:END:

Why are wait, notify and notifyAll defined on Object?

**** Answer

Because you wait on a given object, or more specifically, its monitor, to use
this functionality.

http://stackoverflow.com/questions/1769489/why-are-wait-and-notify-declared-in-javas-object-class

*** TODO Sun JVM memory regions                                            
:PROPERTIES:
:ID:       ddef18a8-22ad-487c-abbe-6e19b6778ea1
:END:

Question

PermGen, default 64mb

**** Answer

Answer

*** Why does Java not having reified types matter?                    :drill:
SCHEDULED: <2016-04-28 Thu>
:PROPERTIES:
:ID:       b64319d7-d9a2-49ae-9234-71d7a08ff53a
:DRILL_LAST_INTERVAL: 56.8758
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.375
:DRILL_EASE: 2.28
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-03-02 Wed 12:56]
:END:

Why should I care that Java doesn't have reified generics?

**** Answer

King Java, Dispatch - The General, Pam - Archer, Hamster Wheel, Pam Run, Array
of Pams

+ You can't do multiple dispatch on parameterized types:
  #+BEGIN_SRC java 
  public void my_method(List<String> input) { ... }
  public void my_method(List<Integer> input) { ... }
  #+END_SRC

+ Use generics with arrays.  Arrays are reified, generics you can't instantiate
  E[] or List<E>[]

+ You can't use parameterized exceptions.  The catch block of a try-catch checks
  using instanceof.  The instanceof operator requires a reifiable type.

+ Performance improvements.  Specialized generics would have more info available
  for optimization.

+ No support for run time type information.  You have to pass a class token in
  if you want type support.
 
http://stackoverflow.com/questions/1927789/why-should-i-care-that-java-doesnt-have-reified-generics

*** Limitations on Generics                                           :drill:
    SCHEDULED: <2016-03-12 Sat>
:PROPERTIES:
:ID:       9027c47c-5b46-4f17-82b2-ca8c766a1cbd
:DRILL_LAST_INTERVAL: 20.2658
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 14
:DRILL_FAILURE_COUNT: 6
:DRILL_AVERAGE_QUALITY: 3.143
:DRILL_EASE: 2.34
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:41]
:END:

What are the limitations on generics in Java?

**** Answer

Java jail, primitives, PanAm Leo DiCaprio, static DiCaprio, cast DiCaprio,
rollercoaster DiCaprio, thrown, heavy ruck.

1. Can't instantiate generic types with primitive types.
2. Can't create instances of type parameters.
3. Can't declare static fields whose types are type parameters.
4. Can't use casts or instanceof with parameterized types.
5. Can't create arrays of parameterized types.
6. Can't create catch or throw objects of parameterized types.
7. Can't overload a method where the formal type parameter erases to the same
   type.

*** Implied keywords on nested interfaces and enums                   :drill:
SCHEDULED: <2016-04-10 Sun>
:PROPERTIES:
:ID:       4f528049-fb9d-4bc1-80ac-a6f3cdd3db98
:DRILL_LAST_INTERVAL: 48.6597
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:45]
:END:

What keywords are implied on nested interfaces and enums in Java? 

**** Answer

static

[[https://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.1.3][JLS (§8.5)]] Member interfaces are always implicitly static so they are never
considered to be inner classes

[[https://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9][JLS (§8.9)]] Nested enum types are implicitly static. It is permissible to
explicitly declare a nested enum type to be static.

*** Generics - Instance of type parameter workaround                  :drill:
SCHEDULED: <2016-03-29 Tue>
:PROPERTIES:
:ID:       a9ef4294-6bcf-42e4-ac16-40d63519cb15
:DRILL_LAST_INTERVAL: 37.4731
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.2
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:44]
:END:

What workaround can you use to declare an instance of a type parameter?

**** Answer

Pass a type token into the method and call ~newInstance()~ on the type token.

#+BEGIN_SRC java
public static <E> void append(List<E> list, Class<E> cls) { 
    E elem = cls.newInstance();
    list.add(elem);
}
#+END_SRC

*** Method References                                                 :drill:
    SCHEDULED: <2016-04-13 Wed>
    :PROPERTIES:
    :ID:       76c4cba7-631a-41c2-898b-7a075cd57fa2
    :DRILL_LAST_INTERVAL: 41.508
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 7
    :DRILL_FAILURE_COUNT: 2
    :DRILL_AVERAGE_QUALITY: 3.714
    :DRILL_EASE: 2.66
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-02 Wed 13:01]
    :END:

What are the kinds of method references?

**** Answer

+ Reference to a static method :: ~ContainingClass::staticMethod~
+ Reference to an instance method :: ~containingObject::instanceMethod~
+ Reference to an instance method of an arbitrary object of a particular type ::
  ~ContainingObject::methodName~
+ Reference to a constructor :: ~ClassName::new~
     
http://www.studytrails.com/java/java8/Java8_Lambdas_FunctionalProgramming.jsp
Nice examples with explanations.
     
http://stackoverflow.com/questions/22516331/whats-the-difference-between-instance-method-reference-types-in-java-8

http://stackoverflow.com/questions/32283833/please-explain-java-8-method-reference-to-instance-method-using-class-name

*** Throwable                                                         :drill:
    SCHEDULED: <2016-03-08 Tue>
    :PROPERTIES:
    :ID:       f45f7d1a-32cb-4b1f-b692-3bec6a30155d
    :DRILL_LAST_INTERVAL: 11.7366
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-25 Thu 22:21]
    :END:

What is a Throwable in Java?

**** Answer

https://docs.oracle.com/javase/8/docs/api/java/lang/Throwable.html
It's the supertype for Exception and Error.

*** Point of checked exceptions                                       :drill:
    SCHEDULED: <2016-03-06 Sun>
    :PROPERTIES:
    :ID:       9380c12c-faec-4384-9417-f84a2a2119d1
    :DRILL_LAST_INTERVAL: 10.17
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 4.667
    :DRILL_EASE: 2.7
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-25 Thu 22:23]
    :END:

What's the point of checked exceptions?

**** Answer
     
Depends on who you ask.  Some people hate them, other see them as valuable ways
of communicating recoverable errors.

http://stackoverflow.com/questions/613954/the-case-against-checked-exceptions

*** Try, finally, return                                              :drill:

Does finally always get executed in Java?

**** Answer

Yes, except in two cases:

1. If you call ~System.exit()~
2. If the JVM crashes first.

http://stackoverflow.com/questions/65035/does-finally-always-execute-in-java

*** Return from finally                                               :drill:

What happens if you return from a finally block in Java?

**** Answer

It trumps any other return statement and swallows any ~Throwables~.

https://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.20.1
http://stackoverflow.com/questions/48088/returning-from-a-finally-block-in-java

** Design Patterns

http://gameprogrammingpatterns.com/singleton.html

*** Singleton 1                                                       :drill:
SCHEDULED: <2016-06-18 Sat>
:PROPERTIES:
:ID:       92910693-0727-4cb6-8180-b879843f0a75
:DRILL_LAST_INTERVAL: 112.7916
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.333
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-26 Fri 18:24]
:END:

What is the Singleton pattern?

**** Answer

Singleton is a class which only has one instance in a whole application. The
class provides a getInstance() method to access the singleton instances.

*** Singleton 2                                                       :drill:
SCHEDULED: <2016-03-16 Wed>
:PROPERTIES:
:ID:       5e4c1b0b-ede4-43cf-943d-d83c847691ac
:DRILL_LAST_INTERVAL: 38.0161
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 10
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.4
:DRILL_EASE: 2.28
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-07 Sun 01:46]
:END:

What are the advantages of a Singleton pattern?

**** Answer

+ Singletons can implement interfaces and inherit from other classes.
+ Singletons can be lazy loaded.  Handy for expensive resources or DB connections.
+ Singletons can be extended into a factory.

*** Singleton 3                                                       :drill:
SCHEDULED: <2016-03-21 Mon>
:PROPERTIES:
:ID:       7b32a2a7-f9c6-464d-a387-53a852634a45
:DRILL_LAST_INTERVAL: 50.4536
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 9
:DRILL_FAILURE_COUNT: 4
:DRILL_AVERAGE_QUALITY: 2.889
:DRILL_EASE: 2.6
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-31 Sun 10:29]
:END:

What are the disadvantages of a Singleton pattern?

**** Answer

+ May introduce global state which makes it harder to reason about code.
+ Encourages tight coupling.
+ Makes unit-testing in isolation difficult.
+ Hides dependencies within the Singleton that can attach to everything.
+ Difficult to parallelize because of mutable state.
+ Inability to subclass because of private constructor.

*** Singleton 4                                                       :drill:
SCHEDULED: <2016-04-08 Fri>
:PROPERTIES:
:ID:       f6b95c46-c338-4c84-bcb6-8773f38d6282
:DRILL_LAST_INTERVAL: 60.645
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.625
:DRILL_EASE: 2.28
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-02-07 Sun 01:47]
:END:

What are the alternatives to a Singleton pattern?

**** Answer

+ Dependency Injection by creating an interface and default implementation,
  construct a single instance at the top of your application and passing it to
  components.

*** List design patterns                                            :drill:
SCHEDULED: <2016-04-13 Wed>
:PROPERTIES:
:ID:       14175568-52ec-4096-b33d-129f38a1de3e
:DRILL_LAST_INTERVAL: 59.2415
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.167
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-02-14 Sun 11:05]
:END:

What are the most common design patterns?

**** Answer

Hitler singleton

+ Singleton
+ Iterator
+ Factory
+ Builder
+ Adapter
+ MVC
+ Decorator
+ Facade
+ Observer
+ Strategy
+ Command

** Arrays
*** Array 1 :drill:
SCHEDULED: <2016-04-13 Wed>
:PROPERTIES:
:ID:       15ac94ff-d684-4ff4-9660-88f3b64c5cfa
:DRILL_LAST_INTERVAL: 66.9108
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.4
:DRILL_EASE: 2.7
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-06 Sat 14:34]
:END:

How would you keep track of a median while getting a stream of numbers?

**** Answer

Use a balanced binary tree where instead of keeping track of the height of the
left and right nodes, we keep track of the number of elements.

A better solution, that doesn't involve new data structures is to use a min heap
and a max heap.  Python only provides a min-heap, so you can fake a max-heap by
multiplying by each number by -1 before inserting and then reversing it on a
pop or get-min.

http://www.ardendertat.com/2011/11/03/programming-interview-questions-13-median-of-integer-stream/

** Bit Manipulation
*** Two's Complement - Definition                                     :drill:
    SCHEDULED: <2016-03-17 Thu>
    :PROPERTIES:
    :ID:       bf7dd9b4-621d-493a-8c46-73a89d4486dc
    :DRILL_LAST_INTERVAL: 24.0032
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 5
    :DRILL_FAILURE_COUNT: 1
    :DRILL_AVERAGE_QUALITY: 3.8
    :DRILL_EASE: 2.66
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-22 Mon 09:15]
    :END:

How are numbers represented in two's complement?

**** Answer

Positive numbers a binary string.

Negative numbers are ~concat(1, 2^n-1 - 1)~.  The complement is the distance
from the largest power of two in the representation.

So in a 4 bit signed integer we can represent -8 to 7.

To represent -3, we use the most-significant bit to indicate that it's negative.
So, now we represent 8 - 3 in binary which is 5, or 101.  With the sign bit, -3
is represented as 1101 in two's complement.

*** Get bit at index i                                                :drill:
    SCHEDULED: <2016-03-14 Mon>
    :PROPERTIES:
    :ID:       37841d26-b7f7-4ef2-a54b-09e397566078
    :DRILL_LAST_INTERVAL: 24.412
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 4.5
    :DRILL_EASE: 2.66
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-19 Fri 10:05]
    :END:

How do you get the bit at a specific index of an integer?

**** Answer

#+BEGIN_SRC python
 def get_bit(n, i):
        return ((1 << i) & n) != 0
#+END_SRC

*** Set bit at index i                                                :drill:
    SCHEDULED: <2016-03-12 Sat>
    :PROPERTIES:
    :ID:       37a2f02c-8caa-4344-990a-bf15d0800a3e
    :DRILL_LAST_INTERVAL: 19.8811
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 8
    :DRILL_FAILURE_COUNT: 2
    :DRILL_AVERAGE_QUALITY: 4.125
    :DRILL_EASE: 3.1
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:40]
    :END:

How do you set the bit at a specific index of an integer?

**** Answer

#+BEGIN_SRC python
 def set_bit(n, i):
     return n | (1 << i)

#+END_SRC

*** Clear bit at index i                                              :drill:
    SCHEDULED: <2016-04-11 Mon>
    :PROPERTIES:
    :ID:       cd2dc707-1c3d-4838-8fae-6a379ac6fd3c
    :DRILL_LAST_INTERVAL: 45.5132
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-25 Thu 22:30]
    :END:

How do clear a bit at index i?

**** Answer

Move a 1 bit to i, invert it to create a mask.

#+BEGIN_SRC python
def clear_bit(n, i):
    return ~(1 << i) & n
#+END_SRC

*** Update bit at index i                                             :drill:
    SCHEDULED: <2016-04-08 Fri>
    :PROPERTIES:
    :ID:       9b103e32-b010-4d42-8edb-034d0acc1f11
    :DRILL_LAST_INTERVAL: 38.3791
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 6
    :DRILL_FAILURE_COUNT: 2
    :DRILL_AVERAGE_QUALITY: 3.667
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:24]
    :END:

How do you set a bit at index ~i~ of an integer to a /specified/ value?

**** Answer

Clear the bit with a mask, then shift the update value to i and or it.

#+BEGIN_SRC python
def update_bit(num, i, isOne):
    value = 1 if isOne else 0
    mask = ~(1 << i)
    return (num & mask) | (value << i)
#+END_SRC


*** Java count bits                                                   :drill:
    SCHEDULED: <2016-03-19 Sat>
    :PROPERTIES:
    :ID:       a37508c6-002a-4c2b-b928-53e2505adb21
    :DRILL_LAST_INTERVAL: 14.9883
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 5
    :DRILL_FAILURE_COUNT: 1
    :DRILL_AVERAGE_QUALITY: 4.4
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:08]
    :END:

How do you get the number of bits set in an integer in Java?

**** Answer

~Integer.bitCount~
https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html

*** Clear least significant bit                                       :drill:
    SCHEDULED: <2016-04-23 Sat>
    :PROPERTIES:
    :ID:       ae7dd928-468d-4120-a73d-382fcb9a2db3
    :DRILL_LAST_INTERVAL: 53.3547
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 5
    :DRILL_FAILURE_COUNT: 1
    :DRILL_AVERAGE_QUALITY: 4.4
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:24]
    :END:

How do you clear the least significant bit?

**** Answer

x & x - 1

** Sorting

*** Bubble sort                                                     :drill:
SCHEDULED: <2016-06-03 Fri>
:PROPERTIES:
:ID:       45FF61B9-A095-4F7A-B7E2-2ED612001C56
:DRILL_LAST_INTERVAL: 110.6746
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.8
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-13 Sat 13:16]
:END:

How is bubble sort implemented?

**** Answer

Adjacent items are repeatedly compared.

https://en.wikipedia.org/wiki/Bubble_sort

*** Quick Sort                                                      :drill:
SCHEDULED: <2016-04-21 Thu>
:PROPERTIES:
:ID:       A9B6BC51-C1E8-46DC-9288-9EFF8126261A
:DRILL_LAST_INTERVAL: 71.8978
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.6
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-09 Tue 10:05]
:END:

What is quicksort's running time and space complexity?

**** Answer

Average Time: O(n log n)
Worst case Time: O(n^2)

Space: O(1)

*** Stable sort                                                       :drill:
    SCHEDULED: <2016-04-03 Sun>
    :PROPERTIES:
    :ID:       356d511e-229d-4af2-8659-7d7845484ae3
    :DRILL_LAST_INTERVAL: 37.6266
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-25 Thu 22:30]
    :END:

What is a stable sort?

**** Answer

Stable sorting algorithms maintain the relative order of records with equal
keys.

** Hash Tables
*** Implement Hash Table                                            :drill:
SCHEDULED: <2016-05-20 Fri>
:PROPERTIES:
:ID:       12E1B6CF-EE70-42DA-8CB7-495435FEFD7D
:DRILL_LAST_INTERVAL: 84.4942
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.857
:DRILL_EASE: 2.56
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-26 Fri 18:24]
:END:

How would you implement a hash table?

**** Answer

Use an array of lists, normally referred to as buckets.  This method is
chaining.

Start with some default capacity.  Java HashMap is 16

insert(key, value)
call hashCode to get an int and take it mod length of the array.

Once you get past some threshold, Java's is 75% load factor, you resize the
array.

get(key)

Use hashcode to find the bucket and search the list to find the item.

*** Hash Table Collision Resolution                                   :drill:
SCHEDULED: <2016-04-11 Mon>
:PROPERTIES:
:ID:       F426A0A8-72BE-4F74-8F0E-32381A0D7C99
:DRILL_LAST_INTERVAL: 65.4914
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.2
:DRILL_EASE: 2.56
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-06 Sat 14:37]
:END:

What are the two common hash table implementation techniques?

**** Answer

Chaining and Open addressing

*** Hash Table Open Addressing                                      :drill:
SCHEDULED: <2016-05-07 Sat>
:PROPERTIES:
:ID:       1940C116-6088-47FD-A81B-9B3E190113D7
:DRILL_LAST_INTERVAL: 63.5555
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.091
:DRILL_EASE: 2.04
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:24]
:END:

What are the common techniques for implementing open addressing?

**** Answer

Hopscotch raptors.

+ Hopscotch hashing
+ Linear Probing
+ Quadratic Probing
+ Double Hashing
+ Coalesced hashing
+ Cuckoo Hashing
+ Robin Hood Hashing
+ 2-choice Hashing

*** Hopscotch hashing                                               :drill:
    SCHEDULED: <2016-03-08 Tue>
:PROPERTIES:
:ID:       C53D4220-3C93-478B-BEBC-BA862E35D2D8
:DRILL_LAST_INTERVAL: 4.352
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.364
:DRILL_EASE: 2.52
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:12]
:END:

What is Hopscotch hashing?

**** Answer

Scheme for resolving hash collisions in a table using open addressing.

Each item is guaranteed to be in the neighborhood of the hashed bucket.  In
other words, the item will always be in the original array entry, or in the next
H-1 neighboring entries.

Each bucket contains a hop-information word, an H-bit bitmap, indicating which
of the next H buckets belong to the neighborhood.

To insert an item, use a linear probe to find some spot in the neighborhood of
entry i.

If there is no such spot, find some entry between i and j that could go to j and
still be in the neighborhood.

If you can't fit the new entry or if bucket i contains H items, resize the
table.

Well suited for concurrent hash table and provides good performance at load
factors exceeding 0.9.

https://en.wikipedia.org/wiki/Hopscotch_hashing

http://www.cs.tau.ac.il/~liortzaf/papers/disc2008_submission_98.pdf

http://codecapsule.com/2013/08/11/hopscotch-hashing/

*** Linear Probing                                                  :drill:
SCHEDULED: <2016-03-09 Wed>
:PROPERTIES:
:ID:       619671F6-3126-41E1-99C2-FB06CB4EC830
:DRILL_LAST_INTERVAL: 40.4342
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.42
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-29 Fri 16:05]
:END:

What is linear probing?

**** Answer

Scheme for resolving hash collisions in a table using open addressing.

Looks in some step size from bucket i.

A small step size provides better locality of reference, but results in
clustering.  Linear probing is sensitive to input distribution.

*** Quadratic Probing                                               :drill:
SCHEDULED: <2016-03-16 Wed>
:PROPERTIES:
:ID:       22C26F8D-EB15-497A-A2C5-E02227A246D8
:DRILL_LAST_INTERVAL: 44.9751
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.46
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-31 Sun 10:32]
:END:

What is Quadratic Probing?

**** Answer

Scheme for resolving hash collisions in a table using open addressing.

Sample sequence for some bucket i:

$i + 1^2, i + 2^2, i + 3^2, i + k^2$

Provides some locality of reference but not as good as linear probing.

*** Double Hashing                                                  :drill:
SCHEDULED: <2016-03-25 Fri>
:PROPERTIES:
:ID:       EE521875-0E0D-4784-9DF8-10076572D119
:DRILL_LAST_INTERVAL: 52.5305
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.2
:DRILL_EASE: 2.56
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-01 Mon 10:51]
:END:

What is Double Hashing?

**** Answer

Scheme for resolving hash collisions in a table using open addressing.

Uses a second hash function h2 to compute the step size for some value k.  The
ith location for k is represented by:

$h(i, k) = h1(k) + i * h2(k) mod (length array)$

https://en.wikipedia.org/wiki/Double_hashing

*** Coalesced hashing                                               :drill:
SCHEDULED: <2016-03-27 Sun>
:PROPERTIES:
:ID:       1DDEFC35-28AF-45D7-9911-FA560687150A
:DRILL_LAST_INTERVAL: 46.0565
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 2.32
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-10 Wed 10:50]
:END:

What is Coalesced hashing?

**** Answer

Scheme for resolving hash collisions in a table a hybrid of chaining and open
addressing.

Like chaining, except instead of a list, you reuse buckets of the backing
array.

+ Compute h(k)
+ If there's an item there, find the first open spot and link from the collision
+ If a different key get inserted into another chain, the values are said to
  coalesce.
+ Follow the links until you find an empty spot.

An important optimization is to only hash values to a subset of the table and
leave room for a "cellar" of values instead of coalescing.

Empirical analysis shows that you should use 86% of the size for hashing and
reserve 14% for the cellar.

*** Cuckoo Hashing

What is Cuckoo Hashing?

**** Answer

Scheme for resolving hash collisions in a table using open addressing.

*** Robin Hood Hashing

What is Robin Hood Hashing?

**** Answer

Scheme for resolving hash collisions in a table using open addressing.

*** 2-choice Hashing

What is 2-choice Hashing?

**** Answer

Scheme for resolving hash collisions in a table using open addressing.

** Algorithms

*** Perfect Hashing for Pair of Ints                                  :drill:
SCHEDULED: <2016-03-11 Fri>
:PROPERTIES:
:ID:       592e784d-e09b-44e2-907a-07ac56433737
:DRILL_LAST_INTERVAL: 34.0953
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.75
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-06 Sat 14:36]
:END:

What's a perfect hash for a pair of ints?

**** Answer

+ The Cantor Pairing Function for unbounded sizes
+ If you limit ints to 16 bits, you use the 16 bits separately of an Integer to
  do this: ~a << 16 + b~
+ Szudzik's function

http://stackoverflow.com/questions/919612/mapping-two-integers-to-one-in-a-unique-and-deterministic-way

** Numbers
*** How big is an signed integer                                      :drill:
    SCHEDULED: <2016-03-11 Fri>
    :PROPERTIES:
    :ID:       a758328e-4aac-43a7-b8cb-738430650182
    :DRILL_LAST_INTERVAL: 16.7196
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 1
    :DRILL_AVERAGE_QUALITY: 4.0
    :DRILL_EASE: 2.7
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-23 Tue 10:43]
    :END:

What's the min and max value of a signed 32 bit integer?

**** Answer

Max Value:  2^31 - 1 ==  2_147_483_647
Min Value: -2^31     == -2_147_483_648

*** Signed Long Range                                                 :drill:
    SCHEDULED: <2016-04-01 Fri>
    :PROPERTIES:
    :ID:       d9b3e739-4b04-47c1-ad84-1157606b7e14
    :DRILL_LAST_INTERVAL: 28.2053
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 4.75
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:25]
    :END:

What's the min and max value of a signed 64 bit integer?

**** Answer
Max Value:  9.22+18
Min Value: -9.22+18


*** Float Range                                                       :drill:
    SCHEDULED: <2016-03-19 Sat>
    :PROPERTIES:
    :ID:       e4686fe9-e787-4c9a-b649-ff12ba8b0317
    :DRILL_LAST_INTERVAL: 17.3897
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 8
    :DRILL_FAILURE_COUNT: 3
    :DRILL_AVERAGE_QUALITY: 3.875
    :DRILL_EASE: 3.0
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-02 Wed 12:54]
    :END:

What's the min and max value of a single-precision float?

**** Answer

Max Value:  3.4E38
Min Value: -3.4E38

Also, Positive Infinity and Negative Infinity.

*** Double Range                                                      :drill:
    SCHEDULED: <2016-03-24 Thu>
    :PROPERTIES:
    :ID:       5e80ee5a-da72-4be2-a3d8-bbea341e1953
    :DRILL_LAST_INTERVAL: 19.7147
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 9
    :DRILL_FAILURE_COUNT: 3
    :DRILL_AVERAGE_QUALITY: 3.778
    :DRILL_EASE: 3.0
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:09]
    :END:

What's the min and max value of a double-precision float?

**** Answer

Max Value:  1.7E308
Min Value: -1.7E308

Also, Positive Infinity and Negative Infinity.

http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html
** System Design

*** IPC - Interprocess communication                                :drill:
SCHEDULED: <2016-04-24 Sun>
:PROPERTIES:
:ID:       8C596422-5A0D-4635-A98A-C103638C5760
:DRILL_LAST_INTERVAL: 53.9017
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 13
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.462
:DRILL_EASE: 2.38
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:22]
:END:

What are the different methods of IPC?

**** Answer

Zoolander.

+ Files
+ Sockets
+ Pipe, e.g. STDIN and STDOUT
+ Named Pipe
+ Semaphore
+ Message Passing
+ Message Queue
+ Signal
+ Shared Memory
+ Memory mapped file

https://en.wikipedia.org/wiki/Inter-process_communication


*** Latency                                                         :drill:
SCHEDULED: <2016-04-06 Wed>
:PROPERTIES:
:ID:       C3100282-E69F-4FE6-BCA1-2350961AC0C7
:DRILL_LAST_INTERVAL: 63.7346
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.8
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-02 Tue 12:00]
:END:

What is latency?

**** Answer

Latency is the time required to perform some action or produce a result.  It is
measured in units of time.



*** Throughput                                                        :drill:
SCHEDULED: <2016-04-22 Fri>
:PROPERTIES:
:ID:       5FB041A6-CAFF-4317-A86B-39E6AF117500
:DRILL_LAST_INTERVAL: 75.576
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.6
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-06 Sat 14:38]
:END:

What is throughput?

**** Answer

Throughput is the number of actions executed or results produced per unit of
time.  It is measured in units per unit of time.

** Maven
https://www.udemy.com/apachemaven

** Python Interview Questions
   
*** TODO Python calling convention                                   
    :PROPERTIES:
    :ID:       34a3e9f6-3e37-48d4-aa0a-af689b9f3943
    :END:

Is python call by value or call by reference? 

**** Answer

Arguments are passed by assignment.  Better to think of python as creating a binding to objects.

   
*** Python String Concatenation                                       :drill:
    SCHEDULED: <2016-04-04 Mon>
    :PROPERTIES:
    :ID:       d344db18-54b5-4726-b545-249f6f4a8222
    :DRILL_LAST_INTERVAL: 39.3181
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-25 Thu 22:24]
    :END:

How many different ways can you concatenate or append strings in Python?

**** Answer

1. +
2. +=
3. Make a list of strings and join them
4. StringIO and write

*** Python sort                                                       :drill:
    SCHEDULED: <2016-03-23 Wed>
    :PROPERTIES:
    :ID:       aa2655fd-d434-4e44-af16-1bed3e6a2052
    :DRILL_LAST_INTERVAL: 30.8185
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 4.75
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:43]
    :END:

Describe how python's sort works.

**** Answer
     
It's a hybrid stable sort as a cross between merge sort and insertion sort.

+ Finds runs of data, sorts with binary insertion sort to the minrun size.
+ All the runs are merged with temp memory.

See
http://svn.python.org/view/python/trunk/Objects/listsort.txt?revision=69846&view=markup
for the gory details.

Answer
   

*** Python Garbage Collection                                         :drill:
    SCHEDULED: <2016-03-09 Wed>
    :PROPERTIES:
    :ID:       c548b5b2-1af7-445c-8787-51e1f3b1ccf5
    :DRILL_LAST_INTERVAL: 20.995
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 4.5
    :DRILL_EASE: 2.66
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-17 Wed 11:14]
    :END:

How does garbage collection CPython work?

**** Answer
     
     
From https://www.quora.com/How-does-garbage-collection-in-Python-work

I’ll discuss the implementation of the garbage collector in CPython.

***** Main Ideas of CPython’s Garbage Collector
Maintain reference count. For every object, there is a count of the total number
of references to that object. If that count ever falls to 0, then you can
immediately deallocate that object because it is no longer live.  Periodically
detect reference cycles. Deallocating when the reference count falls to 0
doesn’t work for all cases. Consider two objects A and B, where A holds a
reference to B and B holds a reference to A. This is called a reference
cycle. It could be the case that these are no longer live and so that both A and
B should be garbage collected. However, the reference count on both objects are
not zero, so they remain alive. To get around this, CPython uses an algorithm
for detecting reference cycles and deallocating objects in the cycle.
Performance is enhanced with heuristics. Objects that have been created recently
are more likely to need to be garbage collected. CPython introduces the concept
of a generation to account for the relative age of an object. Younger
generations have objects that have more recently been created and older
generations hold objects that are less recent. Each object belongs to exactly
one generation. When garbage collection is performed, CPython tries to garbage
collect younger generations. Periodically, CPython will perform garbage
collection on older generations (the rate at which this happens is determined by
a heuristic).


***** The Garbage Collection Lifecycle
It’s probably most instructive to go through the lifecycle of how the CPython
garbage collector would typically get run. Let’s create a new object and see
what happens with the garbage collector:

Python wants to allocate a new object. To do this, it makes a call to
`_PyObject_GC_Malloc`. This method assigns the object some memory locations and
adds the object to the garbage collector’s first generation (we’ll call it
generation 0). The method then checks to see if the number of objects in
generation 0 is greater than some threshold. If it is and the garbage collector
is not currently running, then a call to `collect_generations` is made to begin
garbage collection. Otherwise, the object is just allocated normally.  Python
starts to do garbage collection when `collect_generations` gets called. This
method figures out what generation to do garbage collection on (by default
CPython has 3 generations but this can be modified with the GC module. In
addition, younger generations have lower indices, so generation 0 is the
youngest generation). Python will loop over all generations (from oldest to
youngest) and detect whether a particular generation’s object count is greater
than some threshold. If it is, then it will merge all younger generations with
the current generation and perform garbage collection on that generation by
calling `collect`. NOTE: Python wants to do garbage collection on generation 0
for better performance, because this has the newest objects and also will have
the fewest objects to iterate over. Doing garbage collection on the oldest
generation is equivalent to collecting over all objects because doing garbage
collection on generation i will use all objects in generations 0 through i.  The
`collect` method will run garbage collection on a specified generation. What
this amounts to is running the reference cycle detection algorithm (explained
later) and finding a set of reachable and unreachable objects in a particular
generation. The reachable objects will be merged into the next higher generation
(i.e. if `collect` was run on generation `i`, then the reachable objects from
generation `i` would be merged into generation `i+1`). For the unreachable
objects, CPython will make all necessary finalizer callbacks, make weak ref
callbacks, and finally deallocate the objects.  Finally, the internal state of
the garbage collection module will be updated as `collect` finishes performing
its duties.


***** CPython’s Algorithm for Detecting Reference Cycles
Python attempts to find reference cycles within a generation. Confining the
search for reference cycles to a single generation decreases the amount of work
that has to be done in a single collection (if it is one of the generations that
holds younger objects).

To find reference cycles, Python uses `young`, the pointer to the head of the
list of objects for the generation that’s being garbage collected, and runs the
following:

#+BEGIN_SRC 
update_refs(young)
subtract_refs(young)
gc_init_list(&unreachable)
move_unreachable(young, &unreachable)
#+END_SRC

The `update_refs` method makes a copy of the reference count for every object in
the generation so that the garbage collector can mutate its own version of the
reference count without messing with the real reference count.

Then `subtract_refs` goes through each of the objects `i` in the generation
being garbage collected, and decrements the reference counts on any objects `j`
in the generation list that are referenced by object `i`. After this method has
run, the reference count on an object in the generation should equal the number
of references to that object from objects which do not belong to that generation
(since all references from objects within the same generation have been
removed).

Now comes the fun part. The `move_unreachable` method scans through the `young`
list and moves objects with a reference count of 0 into the `unreachable` list
and changes their reference count to `GC_TENTATIVELY_UNREACHABLE`. Objects with
a non-zero reference count are marked as `GC_REACHABLE` and the objects they
reference are traversed and marked as `GC_REACHABLE` then moved to the end of
the `young` list so they too can be traversed later.

The reason that objects with a reference count of 0 are tentatively unreachable
is as follows. Suppose object A has been marked as tentatively unreachable and
is referenced by some object B. Suppose that B is in the same generation as A
and is actually reachable from outside the generation, but that B comes later in
the `young` list than A. Then A would be sent to the `unreachable` list when
`move_unreachable` scans over it. However, when `move_unreachable` scans over B,
it will notice that it’s reference count is non-zero, mark it as `GC_REACHABLE`,
and traverse B’s references and mark them as reachable. Now, A has become
`GC_REACHABLE` as well and has been moved to the end of the `young` list so that
it’s references can also be marked as `GC_REACHABLE`. Thus, we only know that an
object is unreachable after `move_unreachable` has scanned over the entire
`young` list.

Once the entire `young` list has been traversed, then all the items left in the
`unreachable` list are definitely unreachable and so they can be
deallocated. The items in the `young` list are then merged into older
generations.

***** Performance Notes:
CPython’s garbage collector still stops the world, but does so more infrequently
than other implementations. Reference count deallocation increases the time
between collections because the number of objects in a generation decreases
whenever an object’s reference count falls to 0 and gets deallocated. Since
collections are triggered when the number of objects in a generation are above a
threshold, reference count deallocation decreases the number of collections as
long as there aren’t too many reference cycles.  If the hypothesis that younger
objects are the objects more likely to need to be garbage collected is true,
then running the garbage collector on younger generations can significantly
reduce total runtime.  Memory fragmentation occurs. Reference counting will
naturally cause memory to get fragmented since the deallocation of an object
means there will be small chunks of memory that get added back onto the
heap. Some garbage collectors deal with fragmentation by copying all live
objects into a different section of memory and freeing up an entire section of
memory, but CPython doesn’t.  Normal execution is slower. There is an extra
check whenever an object gets allocated, referenced, or dereferenced. This means
that instead of running normally, then performing a garbage collection all at
once like some tracing garbage collectors do, CPython’s reference count garbage
collector will spread the work across normal activities and perform collection
less frequently. Unfortunately, this means the total amount of work that goes
into garbage collection is higher (because of the added reference count checks).

* Cracking the Coding Interview
** Chapter 5 - Bit Manipulation
*** Exercise 5.6 - Determine number of bits difference                :drill:
    SCHEDULED: <2016-03-30 Wed>
    :PROPERTIES:
    :ID:       bc4b8037-ed6e-4e9f-9251-54891d8ec9ca
    :DRILL_LAST_INTERVAL: 33.5235
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 5
    :DRILL_FAILURE_COUNT: 1
    :DRILL_AVERAGE_QUALITY: 3.6
    :DRILL_EASE: 2.56
    :DRILL_LAST_QUALITY: 3
    :DRILL_LAST_REVIEWED: [2016-02-25 Thu 22:25]
    :END:

Determine the number of bits you would need to flip to convert an integer from A
to B?

**** Answer

xor to get the differences and a clever for-loop to count the differences.  ~c &
(c - 1)~ will clear the least significant bit.

#+BEGIN_SRC java
for (int c = a ^ b; c != 0; c = c & (c - 1))
    numBits++;
#+END_SRC

* Java Concurrency
** Java Concurrency In Practice
*** Motivating Factors                                                :drill:
SCHEDULED: <2016-03-24 Thu>
:PROPERTIES:
:ID:       e084f79e-8e7c-4677-bbf8-415022b927cd
:DRILL_LAST_INTERVAL: 58.3392
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-26 Tue 18:34]
:END:

What are the motivating factors for concurrency?

**** Answer

+ Resource Utilization - waiting for external operations
+ Fairness - share resources with time slicing
+ Convenience - often easier to write programs perform a single task and
  coordinate them

*** Thread Benefits                                                   :drill:
SCHEDULED: <2016-04-18 Mon>
:PROPERTIES:
:ID:       3acd0416-3113-4401-a5f4-58af124d3050
:DRILL_LAST_INTERVAL: 71.9321
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.571
:DRILL_EASE: 2.42
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-06 Sat 14:35]
:END:

What are the benefits of threads?

**** Answer

+ Exploit multiple processors.
+ Simplicity of modeling, break complicated async workflow into simpler
  synchronous workflows and interact at specific sync points.
+ More responsive user interface.

*** Thread vs Process                                                 :drill:
SCHEDULED: <2016-04-06 Wed>
:PROPERTIES:
:ID:       2505D78D-4817-463B-B40A-CCD23232BD24
:DRILL_LAST_INTERVAL: 57.2504
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.333
:DRILL_EASE: 1.94
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-02-09 Tue 10:07]
:END:

Whats the difference between threads and processes?

**** Answer

A process is an executing instance of a program.  Process provides resources
necessary to execute a program.  A process has:

+ Virtual address space
+ executable code
+ Open handles to system objects
+ a security context
+ A unique PID (process identifier)
+ At least one thread of execution

A thread is the entity within the process that can be scheduled for execution.
Threads share virtual address space of a process.  Each thread maintains:

+ Shared virtual address space from the process
+ Exception handlers
+ scheduling priority
+ thread local storage
+ a unique thread identifier
+ a set of structures to save the thread context until it is scheduled

http://stackoverflow.com/questions/200469/what-is-the-difference-between-a-process-and-a-thread

* Object Oriented Programming
** Types
*** Covariant                                                         :drill:
SCHEDULED: <2016-03-24 Thu>
:PROPERTIES:
:ID:       d42c342e-3741-4bb0-b310-d01cab81551d
:DRILL_LAST_INTERVAL: 43.1431
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.286
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-10 Wed 10:51]
:END:

What is a covariant return type?

**** Answer

In OO programming, a covariant return type of a method is one that can be
replaced by a narrower type when the method is overriden in a subclass.

#+BEGIN_SRC java

class A {
}

// Class B is more narrow than A
class B extends A {
}

class C {
    A getFoo() {
        return new A();
    }
}


class D extends C {
    // Overrides getFoo and returns a more narrow class.
    B getFoo() {
        return new B();
    }
}
#+END_SRC
** Benefits
*** Encapsulation                                                     :drill:
SCHEDULED: <2016-03-12 Sat>
:PROPERTIES:
:ID:       1b9d6914-6168-442a-9988-facdd843d607
:DRILL_LAST_INTERVAL: 33.4263
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.428
:DRILL_EASE: 2.5
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-02-08 Mon 16:24]
:END:

What are the benefits of encapsulation?

**** Answer

1. Decouples modules that compromise a system, allowing them to be developed,
   tested, optimized in isolation.
2. Eases the maintenance burden because modules can be understood more quickly
   and debugged with little fear of harming other modules.
3. Modules can be optimized with affecting the correctness of other modules.
4. Increases software reuse because modules that aren't tightly coupled can be
   used in unrelated contexts.

* Effective Java
** Creating and Destroying Objects
*** Item 01: Static Factories vs Constructors                         :drill:
SCHEDULED: <2016-03-16 Wed>
:PROPERTIES:
:ID:       6fe16328-2578-41cd-94cf-6eaa8bccaecc
:DRILL_LAST_INTERVAL: 45.2057
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.5
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-31 Sun 10:29]
:END:

What are the advantages of a static factory over a constructor?

**** Answer

1. Unlike constructors, static factories have names.
2. Unlike constructors, static factories don't have to create a new object every
   time.
3. Unlike constructors, static factories Can return an object of any subtype of
   their return type.
4. They reduce the verbosity of creating parameterized type instances, negated by
   Java diamond operator.

*** Item 01: Disadvantages of Static Factories                        :drill:
SCHEDULED: <2016-06-17 Fri>
:PROPERTIES:
:ID:       2e32ef7c-aad4-492c-a143-0e805019a2db
:DRILL_LAST_INTERVAL: 110.6084
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.876
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-27 Sat 10:29]
:END:

What are the disadvantages of static factories?

**** Answer

1. A class without a public or protected constructor cannot be subclassed.
   Blessing in disguise as it forces composition over inheritance.
2. Static factories are not readily distinguishable from other static methods in
   the API docs.

*** Item 01:Static Factory naming conventions                         :drill:
SCHEDULED: <2016-03-22 Tue>
:PROPERTIES:
:ID:       42469e44-0a29-4251-9905-e683d6273ccc
:DRILL_LAST_INTERVAL: 52.6629
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.8
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-29 Fri 15:53]
:END:

What are common names of a static factory?

**** Answer

+ valueOf - return instance that has the "same" value as parameters.
  Essentially a type conversion.
+ of - concise alternative to valueOf
+ getInstance - returns instance that is described by parameters but doesn't
  have same value.  Singleton is the degenerate case.
+ newInstance - like getInstance, but guarantees that each instance is distinct
  from all others
+ getType - like getInstance but used when the factory method is in a different
  class.  Type indicates the return type.
+ new/Type/ - like new instance, but with a new /Type/

*** Item 02: Disadvantages of telescoping constructors                :drill:
SCHEDULED: <2016-05-07 Sat>
:PROPERTIES:
:ID:       5d0e59cb-1bd6-4b82-899d-40eff3015e27
:DRILL_LAST_INTERVAL: 81.1707
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.833
:DRILL_EASE: 2.32
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-16 Tue 10:44]
:END:

What are the disadvantages of telescoping constructors?

**** Answer

+ They are harder to read in client code with many parameters.
+ The allow inconsistency and mandate mutability.
+ A java bean may be in an inconsistent state partway through construction.
+ JavaBeans patterns precludes the possibility of using an immutable class.

*** Item 02: Replacing Telescoping Constructors                       :drill:
SCHEDULED: <2016-03-06 Sun>
:PROPERTIES:
:ID:       5fcef5a1-814a-406c-a435-ee66fa073923
:DRILL_LAST_INTERVAL: 43.0667
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.2
:DRILL_EASE: 2.56
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-23 Sat 23:45]
:END:

What pattern can you use to replace telescoping constructors?

**** Answer

The builder pattern.

*** Item 02: Builder Pattern 1                                        :drill:
SCHEDULED: <2016-04-28 Thu>
:PROPERTIES:
:ID:       78c527a6-6450-41df-aa53-de80b6d16a74
:DRILL_LAST_INTERVAL: 77.1239
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.667
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-02-11 Thu 10:50]
:END:

What are the advantages to the builder pattern?

**** Answer

+ The builder pattern simulates named parameters.
+ Good choice with classes or static factories that have more than a handful of
  parameters, "say 4 or more"

*** Item 02: Builder Pattern 2                                        :drill:
SCHEDULED: <2016-04-10 Sun>
:PROPERTIES:
:ID:       6a76637e-5331-48fa-8e54-91ddebe1d184
:DRILL_LAST_INTERVAL: 60.8658
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.571
:DRILL_EASE: 2.46
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-09 Tue 10:07]
:END:

How do you make an abstract factory from a builder pattern?

**** Answer

1. Make a builder interface.
2. Use a function like ~Tree buildTree(Builder<? extends Node> nodeBuilder>
   {...}~

*** Item 03: Singleton Impl                                           :drill:
SCHEDULED: <2016-06-29 Wed>
:PROPERTIES:
:ID:       aa694923-3d0b-4674-a339-df7d29f8065c
:DRILL_LAST_INTERVAL: 126.9596
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.7
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-23 Tue 10:49]
:END:

What are the three common methods for implementing a Singleton in Java?

**** Answer

1. public static final field
2. private constructor to initialize a private static final field and static factory getInstance
3. Enum with a single field

*** Item 03: Singleton Enum                                           :drill:
SCHEDULED: <2016-03-26 Sat>
:PROPERTIES:
:ID:       794a10aa-35b6-46af-8845-ca9baa214da5
:DRILL_LAST_INTERVAL: 48.8044
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.833
:DRILL_EASE: 2.56
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-06 Sat 14:39]
:END:

Why is a single-element enum the best way to implement a singleton?

**** Answer

1. It's equivalent to a public field approach
2. More concise
3. Provides serialization machinery for free.
4. Ironclad guarantee against multiple instantiation, even against reflection or serialization attacks.

Effective Java 3

*** Item 04: Noninstantiability                                       :drill:
SCHEDULED: <2016-05-13 Fri>
:PROPERTIES:
:ID:       6559ea73-dbfa-4d3f-90be-178ffa4c4927
:DRILL_LAST_INTERVAL: 82.3317
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:44]
:END:

How do you enforce noninstantiability and when might you do so?

**** Answer

You might have a grouping of static methods like ~java.util.Arrays~ or utility functions.

Make a class noninstaniable by including a private constructor and throw an AssertationError.

This will also prevent the class from being subclassed.

Effective Java 4

*** Item 04: Noninstantiability Abstract                              :drill:
SCHEDULED: <2016-04-10 Sun>
:PROPERTIES:
:ID:       25f88f5c-f8d8-4d8d-8a9c-d3fb11936443
:DRILL_LAST_INTERVAL: 58.8865
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.46
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-11 Thu 10:49]
:END:

Why doesn't making a class abstract prevent instantiation?

**** Answer

Because you can subclass the abstract class and instantiate the subclass.

*** Item 05: Unnecessary Objects                                      :drill:
SCHEDULED: <2016-05-05 Thu>
:PROPERTIES:
:ID:       5522d806-b622-4968-a64b-73c656113047
:DRILL_LAST_INTERVAL: 61.8474
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 13
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.386
:DRILL_EASE: 2.1
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:13]
:END:

How can you avoid unnecessary objects?

**** Answer

Primitives standing around 7-11

+ Use string literals
+ Prefer primitives and watch out for autoboxing
+ Use a static initializer for objects only set once.

Effective Java 5

*** Item 06: Obsolete Object References                               :drill:
SCHEDULED: <2016-04-20 Wed>
:PROPERTIES:
:ID:       32570943-f46d-4edb-90ee-15b4ea21945d
:DRILL_LAST_INTERVAL: 65.9976
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 10
:DRILL_FAILURE_COUNT: 4
:DRILL_AVERAGE_QUALITY: 3.2
:DRILL_EASE: 2.52
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-14 Sun 11:09]
:END:

What is the proper name for a memory leak in a garbage-collected language?

**** Answer

unintentional object retention

*** Item 06: Obsolete Object References Fixes                         :drill:
SCHEDULED: <2016-03-28 Mon>
:PROPERTIES:
:ID:       f933a03d-e252-4082-bba9-f90014e1ac13
:DRILL_LAST_INTERVAL: 48.1487
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.333
:DRILL_EASE: 2.18
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-09 Tue 10:01]
:END:

How do you fix obsolete references?

**** Answer

Null out the object, but this should be the exception, not the rule.

The best way to handle it is to let the object fall out of scope.

*** Item 06: Obsolete Object Reference Alert                          :drill:
SCHEDULED: <2016-04-15 Fri>
:PROPERTIES:
:ID:       502824c2-771b-48ca-b809-02020dd22aa4
:DRILL_LAST_INTERVAL: 62.5578
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.714
:DRILL_EASE: 2.46
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-12 Fri 10:30]
:END:

When will you typically see obsolete references (memory leaks)?

**** Answer

+ Whenever a class manages it's own memory - a stack
+ Caches - weak references
+ Listeners and callbacks

*** Item 06: Obsolete Objects Callbacks                               :drill:
SCHEDULED: <2016-04-03 Sun>
:PROPERTIES:
:ID:       39949c56-c779-4ab1-9947-a8ee04195bf7
:DRILL_LAST_INTERVAL: 54.3395
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.8
:DRILL_EASE: 2.32
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-02-09 Tue 10:01]
:END:

How do you ensure callbacks are garbage collected?

**** Answer

Store only weak references to them, e.g. storing as keys in a WeakHashMap.

http://www.java-tips.org/java-se-tips-100019/88888889-java-util/1475-using-weakhashmap-for-listener-lists.html

*** Item 07: Avoid Finalizers                                         :drill:
SCHEDULED: <2016-03-29 Tue>
:PROPERTIES:
:ID:       bdd9bdf4-1a9d-4976-a137-25dbdafdd20d
:DRILL_LAST_INTERVAL: 38.8563
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 15
:DRILL_FAILURE_COUNT: 5
:DRILL_AVERAGE_QUALITY: 3.4
:DRILL_EASE: 2.72
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-19 Fri 10:11]
:END:

What are the issues with finalizers?

**** Answer

Womanizer slap ref, double-slap spider web, Conner "accept", zombie

They are unpredictable, often dangerous and generally unnecessary.

+ Unpredictable - no guarantee on execution, never do anything time critical in a finalizer
+ Severe performance penalty for using finalizers versus regular garbage collection.
+ Concurrent execution of finalizers can leave graph-like data structures in a
  corrupt state.
+ Uncaught exceptions in finalizers are ignored and not reported.
+ Finalizers can resurrect objects in corrupt states

*** Item 07: Avoid Finalizers - Alternative                           :drill:
SCHEDULED: <2016-04-05 Tue>
:PROPERTIES:
:ID:       686ef890-f052-4df8-86ce-8a7ed58fa8f7
:DRILL_LAST_INTERVAL: 56.0872
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.2
:DRILL_EASE: 2.52
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-09 Tue 10:02]
:END:

What should you use instead of a finalizers?

**** Answer

An explicit termination method. close, dispose, cancel.

Typically called with a try-finally.

*** Item 07: Avoid Finalizers - Use Cases                             :drill:
SCHEDULED: <2016-04-04 Mon>
:PROPERTIES:
:ID:       9b440ee4-ec6a-4881-abbe-720f15064554
:DRILL_LAST_INTERVAL: 54.8854
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-02-09 Tue 10:06]
:END:

What are valid use cases for finalizers?

**** Answer

+ Safety net if owner forgets to call explicit termination method, but should
  log a warning indicating a bug in the client code.
+ Native peers, assuming the native peer holds no critical resources.

*** Item 07: Avoid Finalizers - Safe Impl                             :drill:
SCHEDULED: <2016-04-22 Fri>
:PROPERTIES:
:ID:       6262a0ed-cd87-446f-b258-f05c1037d8c9
:DRILL_LAST_INTERVAL: 59.1303
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.499
:DRILL_EASE: 2.18
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-23 Tue 10:46]
:END:

How should you implement finalizers if you must?

**** Answer

+ Chain with super.finalize(), since it's not done automatically.
+ Use a finalizer guardian in a public, non-final class to ensure the finalizer
  isn't overridden.

** Methods Common to All Objects
*** Item 08: Don't Override Equals                                    :drill:
SCHEDULED: <2016-04-05 Tue>
:PROPERTIES:
:ID:       3e2e805b-2665-456a-b24e-331c47727060
:DRILL_LAST_INTERVAL: 51.3006
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 9
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.444
:DRILL_EASE: 2.32
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-02-14 Sun 11:05]
:END:

What conditions should you not override equals?

**** Answer

fork, change random colors, parent, privacy drapes.

1. Each instance of the class is inherently unique, e.g a Thread.
2. You don't care if the class provides a logical equality test.
   java.util.Random probably doesn't need a logical equals.
3. A superclass override equals and the behavior is appropriate for this
   subclass.
4. The class is private or package private and you know equals is never called.
   In which case, you should override it and throw an assertion error.

*** Item 08: Equals method general contracts                          :drill:
SCHEDULED: <2016-03-09 Wed>
:PROPERTIES:
:ID:       7e040020-d7c2-4719-a33c-f410238fb22d
:DRILL_LAST_INTERVAL: 40.9839
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.7
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-28 Thu 17:06]
:END:

What are the general contracts for the equals method?

**** Answer

+ Reflexive, a == a is true.
+ Symmetric, a == b, b == a
+ Transitive, if a == b and b == c, then a == c.
+ Consistent, returns the same value for multiple invocations.
+ Non-Nullity, x.equals(null) must be false.

*** Item 08: High Quality Equals                                      :drill:
SCHEDULED: <2016-05-13 Fri>
:PROPERTIES:
:ID:       fed0c121-7d93-476c-b640-1e849ec31f5a
:DRILL_LAST_INTERVAL: 82.3334
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:47]
:END:

What are the steps to a high quality equals method?

**** Answer

1. Use the == operator to see if the argument is a reference to this object.  A
   performance optimization.
2. Use the instanceof operator to check if the argument has the right type.  You
   don't need to check for null with instanceof.
3. Cast the argument to the correct type.  The preceeding instanceof guarantees
   that it will succeed.
4. Check equality in all the significant fields of the class.
5. Check to see if it obeys the general contract, reflexive, symmetric,
   transitive, consistent and non-nullity.

*** Item 08: Equals overloading                                       :drill:
SCHEDULED: <2016-03-16 Wed>
:PROPERTIES:
:ID:       ed57b79c-3dcb-45ce-ae9f-7e1b1fd018e9
:DRILL_LAST_INTERVAL: 46.8497
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-29 Fri 16:07]
:END:

What does the argument type have to be when overriding equals?

**** Answer

Object o, otherwise you're overloading equals instead of overriding it.

*** Item 08: High Quality Equals Impl                                 :drill:
SCHEDULED: <2016-04-21 Thu>
:PROPERTIES:
:ID:       fe0f1e4b-4282-478e-8dbf-295384c0a8d4
:DRILL_LAST_INTERVAL: 64.1767
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.667
:DRILL_EASE: 2.46
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-17 Wed 11:26]
:END:

What does a correct equals method look like?

**** Answer

#+BEGIN_SRC java
public boolean equals(Object o) {
    if (o == this) {
        return true;
    }
    if (!(o instanceOf MyClass)) {
        return false;
    }
    MyClass myClass = (MyClass) o;
    return myClass.field1 == this.field1
        && Objects.equals(myClass.field2, this.field2);

}
#+END_SRC

*** Item 09: Override hashCode                                        :drill:
SCHEDULED: <2016-05-29 Sun>
:PROPERTIES:
:ID:       382fa3e9-6ee7-4823-b6ff-e2e77901cafe
:DRILL_LAST_INTERVAL: 97.6397
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.6
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:42]
:END:

When should you override hashCode?

**** Answer

Whenever you override equals.  If you don't, you'll violate the general contract
for Object.hashCode.

*** Item 09: hashCode general contract                                :drill:
SCHEDULED: <2016-05-24 Tue>
:PROPERTIES:
:ID:       1aa1df92-7da1-4f7d-b75e-145bbd22fadb
:DRILL_LAST_INTERVAL: 86.1596
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.2
:DRILL_EASE: 2.56
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-28 Sun 15:29]
:END:

What is the general contract for Object.hashCode?

**** Answer

1. Consistency - hashCode must return the same number when called on the same object.
2. Equality - if two objects are equal, hashCode must return the same integer.
3. Inequality - not required that hashCode produce a different integer for
   different objects.

*** Item 09: hashCode impl                                            :drill:
    SCHEDULED: <2016-03-14 Mon>
:PROPERTIES:
:ID:       d55ad317-672d-4bee-ab65-d11c8941a4d8
:DRILL_LAST_INTERVAL: 11.6671
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 13
:DRILL_FAILURE_COUNT: 5
:DRILL_AVERAGE_QUALITY: 3.385
:DRILL_EASE: 2.62
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-03-02 Wed 12:54]
:END:

How do you implement hashCode for an object?

**** Answer

1. Start with a prime number, e.g. 37 and set result to it.
2. Compute an int hashCode c for each field in the Object.
   + boolean: f ? 1 : 0;
   + char, byte, short, int: (int) f
   + long: (int) (f ^ (f >>> 32))
   + float: Float.floatToIntBits(f);
   + double: Double.doubletoLongBits(f);
   + object: call hashCode.  If null, return 0 (customary).
   + array: compute significant values with these rules.  If everything is
     significant, call Arrays.hashCode.
3. Combine the hashCode c from step 2 into result with:

   result = 31 * result + c;

*** Item 09: hashCode optimizations                                   :drill:
SCHEDULED: <2016-05-08 Sun>
:PROPERTIES:
:ID:       078c43bc-8da6-4529-9389-a9d7b8f9b156
:DRILL_LAST_INTERVAL: 75.9172
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.167
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-22 Mon 09:22]
:END:

How to you speed up hashCode?

**** Answer

Cache the value in a private field.  Don't skip fields because the has will be unbalanced.

*** Item 10: Why override toString                                    :drill:
SCHEDULED: <2016-06-12 Sun>
:PROPERTIES:
:ID:       4be4efec-848a-4cb3-9617-e3fe055050e0
:DRILL_LAST_INTERVAL: 103.3953
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.6
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:16]
:END:

Why should you override toString?

**** Answer

It makes a class much more pleasant to use.  Compare:

{Jenny=PhoneNumber@163b91}
{Jenny=(707) 867-5390}

*** Item 10: override toString format                                 :drill:
SCHEDULED: <2016-03-18 Fri>
:PROPERTIES:
:ID:       d23d8b5b-7371-462a-ab3e-11e3615c244e
:DRILL_LAST_INTERVAL: 40.9002
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.2
:DRILL_EASE: 2.52
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-06 Sat 14:41]
:END:

What info should be in toString?

**** Answer

All of the interesting information. For a PhoneBook class:

"Manhattan white pages (184752 listings)"

The string should be self explanatory.

*** Item 10: override toString format specification                   :drill:
SCHEDULED: <2016-04-18 Mon>
:PROPERTIES:
:ID:       da560596-fcfe-44a1-b831-6af67b1ec2fa
:DRILL_LAST_INTERVAL: 70.0478
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.857
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-08 Mon 16:24]
:END:

When should you specify the value of toString?

**** Answer

For value classes, since it will serve as a standard, unambiguous, human
readable representation.

You should provide a static factory to convert between the string and Object.

Either way, clearly document your intentions.

*** Item 10: override toString: programmatic access                   :drill:
SCHEDULED: <2016-03-18 Fri>
:PROPERTIES:
:ID:       d67a1839-8010-4466-aeb1-5493e8c1d4b6
:DRILL_LAST_INTERVAL: 42.7147
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-04 Thu 12:48]
:END:

Should you provide programmatic access to all info in toString?

**** Answer

Yes.

*** Item 11: Override Clone Judiciously - Copy Constructors Bad       :drill: 
SCHEDULED: <2016-04-19 Tue>
:PROPERTIES:
:ID:       ebdb7479-7e0e-4ba0-a409-5d2978810b3f
:DRILL_LAST_INTERVAL: 57.9949
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.8
:DRILL_EASE: 2.32
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:42]
:END:

Should you use copy constructors?

**** Answer

Public copy constructors are bad because you get tight coupling on all the
fields.

You can't update the instance objects, e.g. Brain, without updating the copy
constructor.

#+BEGIN_SRC java
// Java is used in the rest of the article.
public class Person
{
	private Brain brain;
	private int age;
	public Person(Brain aBrain, int theAge)
	{
		brain = aBrain; 
		age = theAge;
	}
	public Person(Person another)
	{
		age = another.age;
		brain = new Brain(another.brain);
		// we assume we have a copy constructor for Brain
	}
	public String toString()
	{
		return "This is person with " + brain;
		// Not meant to sound rude as it reads!
	}
}

// Brain
public class Brain
{
	public Brain() {}
	public Brain(Brain another) {} // Assume proper copying of the Brain
}
#+END_SRC

If you extend a field's subclass, there's not an easy way to clone that subfield

http://www.agiledeveloper.com/articles/cloning072002.htm

*** Item 11: Override Clone Judiciously - interface                   :drill:
SCHEDULED: <2016-06-03 Fri>
:PROPERTIES:
:ID:       47e02ec5-8662-4247-92ce-040951f211d4
:DRILL_LAST_INTERVAL: 93.1427
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.8
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-03-02 Wed 12:55]
:END:

What interface do you use to implement clone?

**** Answer

Cloneable

*** Item 11: Override Clone Judiciously - semantics                   :drill:
SCHEDULED: <2016-04-10 Sun>
:PROPERTIES:
:ID:       2d019765-a799-40ba-86bd-599258d1e641
:DRILL_LAST_INTERVAL: 50.9486
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.2
:DRILL_EASE: 2.56
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-19 Fri 10:12]
:END:

What does cloneable do?

**** Answer

It determines the behavior of Object's protected clone implementation.  If a
class implements Cloneable, clone returns a field-by-field copy.  Otherwise, it
throws a CloneNotSupportedException.

*** Item 11: Override Clone Judiciously - contract                    :drill:
SCHEDULED: <2016-03-09 Wed>
:PROPERTIES:
:ID:       883c47bb-108e-4f5a-8e00-e5d8d70e0760
:DRILL_LAST_INTERVAL: 32.4849
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.7
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-02-06 Sat 14:37]
:END:

What is the general contract for clone?

**** Answer

x.clone() != x

x.clone().getClass() == x.getClass() // Not 100% required

x.clone().equals(x) // Not 100% required.

*** Item 11: Override Clone Judiciously - nonfinal class              :drill:
SCHEDULED: <2016-03-20 Sun>
:PROPERTIES:
:ID:       a8c9d998-919e-47f5-a521-bafe40dc0141
:DRILL_LAST_INTERVAL: 42.4522
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.75
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-02-07 Sun 01:48]
:END:

What type should you return in a clone of a nonfinal class?

**** Answer

The object obtained by invoking super.clone() because programmer's expect that
calling super.clone on a child will return an object of that type.  The only
way that a superclass can provide that functionality is to return an object
obtained by calling super.clone()

*** Item 11: Override Clone Judiciously - drawbacks                   :drill:
SCHEDULED: <2016-05-04 Wed>
:PROPERTIES:
:ID:       0c51568b-767d-4463-a4b7-b02b158d2786
:DRILL_LAST_INTERVAL: 63.8827
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 4
:DRILL_AVERAGE_QUALITY: 3.273
:DRILL_EASE: 2.42
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:20]
:END:

What are the drawbacks of clone?

**** Answer

+ extra-linguistic object creation
+ unenforceable adherence to thinly documented conventions
+ conflict with final fields since you can't modify final fields outside a
  constructor.

*** Item 11: Override Clone Judiciously - alternatives                :drill:
SCHEDULED: <2016-05-19 Thu>
:PROPERTIES:
:ID:       37901341-bdac-4c0d-b6e8-3d786082771e
:DRILL_LAST_INTERVAL: 83.0112
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.4
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-26 Fri 18:24]
:END:

What are the alternatives of clone?

**** Answer

+ copy constructor
+ static factory
 
*** Item 11: Override Clone Judiciously - Proper impl                 :drill:
SCHEDULED: <2016-05-02 Mon>
:PROPERTIES:
:ID:       1666a35c-8474-4c2d-8e4a-31e9338b8bd7
:DRILL_LAST_INTERVAL: 62.0213
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 12
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.666
:DRILL_EASE: 2.62
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:17]
:END:

How should you implement clone if you must?

**** Answer

 http://www.agiledeveloper.com/articles/cloning072002.htm

+ Implement the clone method that calls a protected copy constructor
+ Use a protected copy constructor to initialize final fields, protected so you
  don't get tight dependencies.
+ clone the instance fields in the copy constructor.
+ Now you can extend the class and make it work with a new copy constructor.
 
#+BEGIN_SRC java
public class Person implements Cloneable
{
	private final Brain brain; // brain is final since I do not want 
				// any transplant on it once created!
	private int age;
	public Person(Brain aBrain, int theAge)
	{
		brain = aBrain; 
		age = theAge;
	}
 	protected Person(Person another)
	{
		Brain refBrain = null;
		try
		{
			refBrain = (Brain) another.brain.clone();
			// You can set the brain in the constructor
		}
		catch(CloneNotSupportedException e) {}
		brain = refBrain;
		age = another.age;
	}
 	public String toString()
	{
		return "This is person with " + brain;
		// Not meant to sound rude as it reads!
	}
 	public Object clone()
	{
		return new Person(this);
	}
 	…
}
#+END_SRC

*** Item 12: Implement Comparable: Interface                          :drill:
SCHEDULED: <2016-03-17 Thu>
:PROPERTIES:
:ID:       7d645124-9390-464b-80c4-a6cb9abeedc0
:DRILL_LAST_INTERVAL: 37.8597
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.25
:DRILL_EASE: 2.6
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-08 Mon 16:22]
:END:

How do you implement the Comparable interface?

**** Answer

#+BEGIN_SRC java
class MyClass implements Comparable<MyClass> {
    @Override
    public int compareTo(MyClass other) {
        return -1;
    }
}
#+END_SRC

*** Item 12: Implement Comparable: Contract                           :drill:
SCHEDULED: <2016-03-03 Thu>
:PROPERTIES:
:ID:       ebfcf743-d916-43ea-a93d-78f501f6b61f
:DRILL_LAST_INTERVAL: 27.9033
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.833
:DRILL_EASE: 2.6
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-02-04 Thu 12:27]
:END:

What is the general contract of Comparable?

**** Answer

- Reflexive: ~sgn(x.compareTo(y)) == -sgn(y.compareTo(x))~
- Transitive: ~(x.compareTo(y) > 0 && y.compareTo(z) > 0~ implies
  ~x.compareTo(z) > 0~
- Symmetry: ~x.compareTo(y) == 0~ implies that ~sgn(x.compareTo(z)) ==
  sgn(y.compareTo(z))~
- Strongly recommended that if ~x.compareTo(y) == 0~ then ~x.equals(y)~
 
*** Item 12: Implement Comparable: compareTo not consistent equals    :drill:
SCHEDULED: <2016-06-16 Thu>
:PROPERTIES:
:ID:       7f740588-9ca2-4c51-ac09-8a91d1c65e42
:DRILL_LAST_INTERVAL: 105.9162
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.333
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-03-02 Wed 12:57]
:END:

What should you do if compareTo is not consistent with equals?  That is,

~x.compareTo(y) == 0 && !x.equals(y)~

**** Answer

Put the following in the documentation:

"Note: This class has a natural ordering that is inconsistent with equals."

*** Item 12: Implement Comparable: Extend Value class                 :drill:
SCHEDULED: <2016-03-06 Sun>
:PROPERTIES:
:ID:       a01ffdfe-96ea-41a4-948c-1f0527e090a7
:DRILL_LAST_INTERVAL: 28.7783
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-02-06 Sat 14:39]
:END:

What is the problem with comparable and a extending a value class?

**** Answer

There is no way to extend an instantiable class with a new value component while
preserving the compareTo contract.

If you want to add a value component to a class that implements Comparable,
write an unrelated class containing an instance of the first class and provide a
view method that returns the instance.  Then, you are free to implement your own
~compareTo~.

Consider these two classes:

#+BEGIN_SRC java
class NamedThing {
    String name;
}

class Person extends NamedThing {
    Date dateOfBirth;
}
#+END_SRC

NamedThing should compare based on ~name~.  Person should compare on ~name~,
then ~dateOfBirth~.  But what if we compare NamedThing to Person.

http://stackoverflow.com/questions/13509286/why-cant-i-extend-an-instantiable-class-with-a-new-value-component-while-preser

*** Item 12: Implement Comparable: Impl                               :drill:
SCHEDULED: <2016-05-25 Wed>
:PROPERTIES:
:ID:       5a6fa657-f96d-4a9b-a46c-4c90da10704b
:DRILL_LAST_INTERVAL: 81.9356
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.7
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:13]
:END:

What does a plain implementation for Comparable look like?

**** Answer

#+BEGIN_SRC java

public int compareTo(PhoneNumber pn) {
    // Compare area coes
    if (areaCode < pn.areaCode)
        return -1;
    if (areaCode > pn.areaCode)
        return 1;

    // Area codes are equal, compare prefixes
    if (prefix < pn.prefix)
        return -1;
    if (prefix > pn.prefix)
        return 1;

    // All fields equal
    return 0;
}
#+END_SRC

*** Item 12: Implement Comparable: Guava Impl                         :drill:
    SCHEDULED: <2016-03-15 Tue>
:PROPERTIES:
:ID:       ecd99002-0134-43ff-b96d-f0b7a5efad52
:DRILL_LAST_INTERVAL: 17.2393
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-27 Sat 10:19]
:END:

What does an implementation for Comparable look like with Guava?

**** Answer

#+BEGIN_SRC java

public int compareTo(PhoneNumber pn) {
    return ComparisonChain.start()
        .compare(areaCode, pn.areaCode)
        .compare(prefix, pn.prefix)
        .result();
}
#+END_SRC

** Classes and Interfaces
*** Item 13: Minimize accessibility                                   :drill:
SCHEDULED: <2016-05-17 Tue>
:PROPERTIES:
:ID:       4f004a9c-f4bc-41b0-9347-4630ecfc8b1b
:DRILL_LAST_INTERVAL: 81.7873
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-25 Thu 22:31]
:END:

What is Bloch's rule of thumb for class or member accessibility?

**** Answer

Make each class or member as inaccessible as possible.

*** Item 13: Minimize accessibility - levels                          :drill:
SCHEDULED: <2016-04-04 Mon>
:PROPERTIES:
:ID:       d8c3a0e4-da20-496d-8380-220ecb303820
:DRILL_LAST_INTERVAL: 53.7496
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-10 Wed 10:49]
:END:

What are the four access levels in Java?

**** Answer

1. private - only accessible from the top level class where it is declared.
2. package-private (default) - only accessible from any class in the package
   where it is declared.
3. protected - accessible from subclasses of the class where it is declared.
4. public - everywhere

*** Item 13: Minimize accessibility - public mutable                  :drill:
SCHEDULED: <2016-03-07 Mon>
:PROPERTIES:
:ID:       bb8391ef-dd19-4658-aeb1-034402409033
:DRILL_LAST_INTERVAL: 33.6817
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.75
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-02 Tue 12:07]
:END:

Are public mutable fields thread-safe?

**** Answer

Nope.

*** Item 13: Minimize accessibility - arrays                          :drill:
SCHEDULED: <2016-03-31 Thu>
:PROPERTIES:
:ID:       878dbcd5-d7bb-45ad-bf26-6e7b933e997e
:DRILL_LAST_INTERVAL: 43.5957
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 9
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 4.001
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-16 Tue 10:41]
:END:

What alternatives are there to a final array?

**** Answer

Collections.unmodifiableList - an unmodifiable view, the backing array can still change
Guava ImmutableList - actually immutable

*** Item 14: Public accessors - accessor vs public field              :drill:
SCHEDULED: <2016-03-11 Fri>
:PROPERTIES:
:ID:       f204e0bd-7b04-4cb1-bbb8-977d14b186e7
:DRILL_LAST_INTERVAL: 22.685
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.75
:DRILL_EASE: 2.38
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-17 Wed 11:15]
:END:

When should you use an accessor over a public field?

**** Answer

If a class is accessible outside of its package, provide accessor methods.

If a class is package-private or a private nested class, there is nothing
inherently wrong with exposing data fields.

*** Item 14: Public accessors - why accessors                         :drill:
    SCHEDULED: <2016-04-17 Sun>
:PROPERTIES:
:ID:       2e1879b7-e276-452d-85ef-eee1c96aa7ab
:DRILL_LAST_INTERVAL: 46.8024
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 13
:DRILL_FAILURE_COUNT: 4
:DRILL_AVERAGE_QUALITY: 3.846
:DRILL_EASE: 3.1
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:16]
:END:

Why should you use accessors over fields?

**** Answer

Axe-field, CAP, handle wood - carbon, frozen, aux-power

Using fields does not offer the benefits of encapsulation.

+ You can't change the representation without changing the API.
+ You can't enforce invariants.
+ You can't take auxiallary action when a field is accessed.

*** Item 15: Minimize mutability                                      :drill:
    SCHEDULED: <2016-03-06 Sun>
:PROPERTIES:
:ID:       853c0b48-cf7a-459b-90f7-a6305accb467
:DRILL_LAST_INTERVAL: 13.8427
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 12
:DRILL_FAILURE_COUNT: 4
:DRILL_AVERAGE_QUALITY: 3.584
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:38]
:END:

How do you make a class immutable?

**** Answer

Han's Solo - Arizona, sealed, final sticker, private showing, exclusive access

Follow these five rules:

1. Don't provide any methods that modify the object's state.
2. Ensure the class can't be extended.
3. Make all fields final.
4. Make all fields private.
5. Ensure exclusive access to any mutable components.

*** Item 15: Minimize Mutability - benefits                           :drill:
SCHEDULED: <2016-04-22 Fri>
:PROPERTIES:
:ID:       360a3167-bbc5-44e3-85c0-fa2d58c859cb
:DRILL_LAST_INTERVAL: 67.1372
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 4.143
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-15 Mon 10:05]
:END:

What are the benefits of immutable classes?

**** Answer

Hans Solo - classrooms, intestines, blocks

+ Immutable objects are simple.
+ Immutable objects are inherently thread-safe.
+ Immutable objects can be shared freely.
+ You can share immutable object internals, e.g. BigInteger's backing array for
  negate.
+ Immutable objects make great building blocks.

*** Item 15: Minimize Mutability - drawbacks                          :drill:
SCHEDULED: <2016-04-13 Wed>
:PROPERTIES:
:ID:       09fcee96-404f-49fe-9311-1c1751869b6c
:DRILL_LAST_INTERVAL: 59.9418
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-02-13 Sat 13:16]
:END:

What are the drawbacks of immutable object?

**** Answer

Immutable objects require a separate object for each distinct value.

*** Item 15:  Minimize Mutability - mitigate performance problem      :drill:
SCHEDULED: <2016-03-26 Sat>
:PROPERTIES:
:ID:       20a96920-807f-498e-8f90-1102e2bf07df
:DRILL_LAST_INTERVAL: 40.6127
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.286
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-14 Sun 11:11]
:END:

What are two approaches to making mutability performant in immutable classes?

**** Answer

1. Guess which multi-step operations will be common and provide primitives by a
   package-private companion class.
2. If you can't predict multi-step operations, provide a public companion class,
   e.g. String -> String Builder, BigInteger -> BitSet.

*** Item 15: Minimize Mutablitiy - make immutable class               :drill:
SCHEDULED: <2016-03-13 Sun>
:PROPERTIES:
:ID:       d3f102f4-533d-445d-87d2-14bd913fd8f0
:DRILL_LAST_INTERVAL: 35.6786
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-06 Sat 14:41]
:END:

How can you prevent a class from being subclassed?

**** Answer

+ Mark as final.
+ private constructor with static factories, allows the use of multiple
  package-private implementation classes.

*** Item 15: Minimize Mutability - when immutable                     :drill:
SCHEDULED: <2016-03-19 Sat>
:PROPERTIES:
:ID:       e04eac1c-5dbc-4956-860f-166911b27b69
:DRILL_LAST_INTERVAL: 40.7684
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.75
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-07 Sun 01:47]
:END:

When should classes be immutable?

**** Answer

All the time, unless there's a very good reason to make them mutable.

*** Item 15: Minimize Mutability - if can't immutable                 :drill:
SCHEDULED: <2016-03-14 Mon>
:PROPERTIES:
:ID:       3211f3ac-b981-41ce-9926-50086c9ab70a
:DRILL_LAST_INTERVAL: 36.9186
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.75
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-06 Sat 14:40]
:END:

If you absolutely must make a class mutable, how should you mitigate the risks
of mutability?

**** Answer

Limit mutability as much as possible.
Mark every field as final unless there is a compelling reason not to.

*** Item 16: Favor Composition - why inheritance bad                  :drill:
SCHEDULED: <2016-04-24 Sun>
:PROPERTIES:
:ID:       4b082ecd-3192-4a9d-8be4-48f55f36016e
:DRILL_LAST_INTERVAL: 62.6314
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 4.125
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:45]
:END:

Why is inheritance bad?

**** Answer

Unlike method invocation, inheritance violates encapsulation.

If you try to implement InstrumentedHashSet by extending HashSet, you must rely
on the implementation of HashSet to Instrument correctly.

Additionally, if the super-class gets new methods, they can break your class.

*** Item 16: Favor Composition - alternative inheritance              :drill:
SCHEDULED: <2016-03-15 Tue>
:PROPERTIES:
:ID:       d42ea0ae-570b-4449-9116-247a2d5c2acb
:DRILL_LAST_INTERVAL: 37.7739
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-06 Sat 14:40]
:END:

What can you use instead of inheritance?

**** Answer

Create a field that has an instance of the existing class.

This is composition because the existing class becomes a component of the new
class.

*** Item 16: Favor Composition - drawbacks                            :drill:
SCHEDULED: <2016-04-06 Wed>
:PROPERTIES:
:ID:       c811f48e-2ce7-462e-b064-6182dbc51b56
:DRILL_LAST_INTERVAL: 43.7618
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 10
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 4.1
:DRILL_EASE: 2.96
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-22 Mon 09:16]
:END:

What are the drawbacks of composition, specifically of forwarding classes?

**** Answer

Wrapper classes are not suited for use in callback frameworks.
Annoying and tedious to write.

http://programmers.stackexchange.com/questions/117628/why-are-wrapper-classes-not-suited-for-use-in-callback-frameworks

*** Item 16: Favor Composition - when to use inheritance              :drill:
SCHEDULED: <2016-03-18 Fri>
:PROPERTIES:
:ID:       71d5fc01-01f6-48f7-9ffa-d071e95bd4ae
:DRILL_LAST_INTERVAL: 38.305
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.167
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-09 Tue 10:02]
:END:

When is inheritance appropriate?

**** Answer

In circumstances where the subclass really is a subtype of the superclass.

Class B should only extend class A only if B "is-a" A.

If you are tempted to have class B extend a class A, ask yourself: Is every B
really an A?  If you cannot truthfully answer yes, B should not extend A.

You must also be comfortable in adopting the flaws of A.

*** Item 17: Design for Inheritance -  Document                       :drill:
SCHEDULED: <2016-03-21 Mon>
:PROPERTIES:
:ID:       ed2bf3be-4fad-4d11-8d0a-2fb0043fe710
:DRILL_LAST_INTERVAL: 35.8478
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.715
:DRILL_EASE: 2.7
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-02-14 Sun 11:06]
:END:

What aspect of an inheritable class must you document?

**** Answer

You must document the self-use of overridable methods.  For each public or
protected method or constructor, the documentation must indicate which
overridable methods the method or constructor invokes, in what sequence and how
the results of each invocation affect subsequent processing.

Overridable means nonfinal and either public or protected. 

*** Item 17: Design for Inheritance - inheritance doc convention      :drill:
SCHEDULED: <2016-04-11 Mon>
:PROPERTIES:
:ID:       64ec1959-6c4b-4a06-9d0f-5cb1f0daa436
:DRILL_LAST_INTERVAL: 56.3844
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.75
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-02-15 Mon 09:57]
:END:

What documentation convention do you use to signal that a method invokes
overridable methods?

**** Answer

At the end of the documentation comment, you begin a paragraph with the phrase,
"This implementation."


See AbstractCollection#remove for an example.

https://docs.oracle.com/javase/8/docs/api/index.html?java/util/AbstractCollection.html

*** Item 17: Design for Inheritance - inheritance efficient           :drill:
    SCHEDULED: <2016-04-21 Thu>
:PROPERTIES:
:ID:       34f730e7-9562-41f4-902d-0ea490046964
:DRILL_LAST_INTERVAL: 52.7531
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 3.06
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-28 Sun 15:40]
:END:

How do you allow efficient access to the internal workings of a subclass
designed for inheritance?

**** Answer

Judiciously chosen protected methods, to provide hooks into the internal
workings of the class.

Like AbstractList#removeRange

*** Item 17: Design for Inheritance - test for inheritance design     :drill:
SCHEDULED: <2016-03-16 Wed>
:PROPERTIES:
:ID:       125bac74-5920-4f7a-a8c5-0cb26f5bf871
:DRILL_LAST_INTERVAL: 35.1965
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.7
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-02-10 Wed 10:48]
:END:

What is the only way to test if a class is designed for inheritance?

**** Answer

Subclass it at least three times, and have someone other than the author
subclass it at least once.

*** Item 17: Design for Inheritance - constructors and overridables   :drill:
    SCHEDULED: <2016-03-04 Fri>
:PROPERTIES:
:ID:       4d850c76-da4c-4e3c-bf02-65d7ba11bb76
:DRILL_LAST_INTERVAL: 16.9642
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.571
:DRILL_EASE: 3.1
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-16 Tue 10:32]
:END:

Why can't you use overridable methods in a constructor?

**** Answer

#+BEGIN_QUOTE
Because the superclass constructor runs before the subclass constructor, so the
overriding methods in the subclass will get invoked before the subclass
constructor has run.  If the overriding method depends on any initialization
performed by the subclass constructor, the method will not behave as expected.
#+END_QUOTE

#+BEGIN_SRC java

public class ConstructorCallsOverride {
    public static void main(String[] args) {
        abstract class Base {
            Base() { overrideMe(); }
            abstract void overrideMe(); 
        }
        class Child extends Base {
            final int x;
            Child(int x) { this.x = x; }
            @Override void overrideMe() {
                System.out.println(x);
            }
        }
        new Child(42); // prints "0"
    }
}
#+END_SRC

Here, when Base constructor calls overrideMe, Child has not finished
initializing the final int x, and the method gets the wrong value. This will
almost certainly lead to bugs and errors.

http://stackoverflow.com/questions/3404301/whats-wrong-with-overridable-method-calls-in-constructors

*** Item 17: Design for Inheritance - cloneable and serializable      :drill:
SCHEDULED: <2016-03-21 Mon>
:PROPERTIES:
:ID:       ace68707-4ebe-4cb5-806f-e245a2aac72a
:DRILL_LAST_INTERVAL: 37.3778
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.75
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-02-13 Sat 13:14]
:END:

Should you implement cloneable and serializable for a class designed for
inheritance?

**** Answer

No, because clone and readObject function similar to constructors, so the same
restrictions apply.

Neither clone nor readObject may invoke an overridable method, directly or
indirectly.

*** Item 17: Design for Inheritance -                                 :drill:
SCHEDULED: <2016-03-26 Sat>
:PROPERTIES:
:ID:       beee49af-05ab-48b9-858d-60cc43353500
:DRILL_LAST_INTERVAL: 43.8952
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.75
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-02-11 Thu 10:46]
:END:

What is the best solution to prevent inheritance problems in normal concrete
classes?

**** Answer

Prohibit subclassing in classes that are not designed and documented to be
safely subclasses.

*** Item 17: Design for Inheritance - concrete with no std interface  :drill:
SCHEDULED: <2016-03-17 Thu>
:PROPERTIES:
:ID:       f7f17099-a359-4b7e-97b5-dfbc52c0eb8e
:DRILL_LAST_INTERVAL: 39.8373
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-06 Sat 14:35]
:END:

If you must allow inheritance from a concrete class that doesn't implement a
standard interface, how can you mitigate the risks of improper inheritance?

**** Answer

Ensure the class never invokes any of its overridable methods and document this
fact.  Then, overriding a method will never affect the behavior of any other
method.

You can do this by moving the body of each overridable method into a private
helper method and then call the helper method from the overridable method.
Then, replace each self-use of an overridable method with its private helper.

*** Item 18: Prefer Interfaces - Why                                  :drill:
SCHEDULED: <2016-03-23 Wed>
:PROPERTIES:
:ID:       28beb321-3739-4e82-aa2c-45c81c33e107
:DRILL_LAST_INTERVAL: 37.9755
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 10
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.6
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-02-14 Sun 11:11]
:END:

Why should you prefer interfaces to abstract classes?

**** Answer

Arya Stark, faces, blender, wrap

1. Existing classes can be easily retrofitted to implement a new interface.
2. Interfaces are ideal for defining mixins.
3. Interfaces allow the construction of non-hierarchical type frameworks.
4. Interfaces enable safe, powerful functionality enhancements through
   composition, by the wrapper idiom.

*** Item 18: Prefer Interfaces -                                      :drill:
SCHEDULED: <2016-03-20 Sun>
:PROPERTIES:
:ID:       fcda47f0-d9c6-4172-be27-a0423b8e6820
:DRILL_LAST_INTERVAL: 37.5431
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.75
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-11 Thu 10:49]
:END:

How do you combine the virtues of interfaces and abstract classes?

**** Answer

Provide an abstract, skeletal implementation class to go with each non-trivial
interface that you export.

The naming convention is AbstractINTERFACE, where INTERFACE is the interface you
implement.

*** Item 18: Prefer Interfaces - simulated multiple inheritance       :drill:
SCHEDULED: <2016-03-09 Wed>
:PROPERTIES:
:ID:       ead7a395-bcd7-4fd9-9917-50c67c7954cb
:DRILL_LAST_INTERVAL: 31.0253
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-07 Sun 01:47]
:END:

What is simulated multiple inheritance?

**** Answer

You use composition to included a skeletal implementation of an interface and
then forward the interfaces' method calls to the wrapped skeletal interface.

*** Item 18: Prefer Interfaces - Advantages of abstract classes       :drill:
SCHEDULED: <2016-03-19 Sat>
:PROPERTIES:
:ID:       571f408b-2c08-4b4f-8b62-397feb475239
:DRILL_LAST_INTERVAL: 37.9312
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-10 Wed 10:50]
:END:

What are the advantages of abstract classes?

**** Answer

It is far easier to evolve an abstract class than an interface.

In Java 8, the story is slightly better for interfaces since you can provide
default methods.

*** Item 19: Interface only for Types - Why                           :drill:
SCHEDULED: <2016-03-15 Tue>
:PROPERTIES:
:ID:       dc434c1d-7b41-4c98-8f39-f6556da48256
:DRILL_LAST_INTERVAL: 34.1329
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.4
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-10 Wed 10:50]
:END:

Why should you use interfaces only for types?

**** Answer

Because the constant interface is a poor use of interfaces.  The constants are
an implementation detail.

*** Item 19: Interface only for Types - Alternative for constants     :drill:
SCHEDULED: <2016-03-25 Fri>
:PROPERTIES:
:ID:       8803fbf7-ca24-4b9d-b9d0-5708c24e772a
:DRILL_LAST_INTERVAL: 40.0634
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.167
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-14 Sun 11:06]
:END:

How should you export constants?

**** Answer

If the constants are best viewed as members of an enumerated type, export with
an enum.

Otherwise, export with a non-instantiable utility class with public, static,
final modifiers.

Then you can import with static import.

*** Item 20: Prefer class hierarchies over tags - what                :drill:
SCHEDULED: <2016-04-09 Sat>
:PROPERTIES:
:ID:       b284739b-61be-453e-9887-ce4304181027
:DRILL_LAST_INTERVAL: 53.1342
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-16 Tue 10:40]
:END:

What is a tagged class?

**** Answer

It's a class that has a /tag/ field to indicate which flavor of the class we're
using.  It's used to simulate class hierarchies.

#+BEGIN_SRC java
class Figure {

    enum Shape { RECTANGLE, CIRCLE };

    // Tag field
    final Shape shape;

    // Fields for RECTANGLE
    double length;
    double width;

    // Fields for CIRCLE
    double radius;

    // Constructor for circle
    Figure(double radius) {
        this.shape = Shape.CIRCLE;
        this.radius = radius;
    }

    // Constructor for rectangle
    Figure(double width, double length) {
        this.shape = Shape.RECTANGLE
        this.width = width;
        this.length = length;
    }

    double area() {
        switch (shape) {
        case RECTANGLE:
            return length * width;
        case CIRCLE:
            return Math.PI * (radius * radius);
        default:
            throw new AssertationError();
        }
    }
}
#+END_SRC

*** Item 20: Prefer class hierarchies over tags - why bad             :drill:
SCHEDULED: <2016-04-16 Sat>
:PROPERTIES:
:ID:       26e60c15-d309-4102-b78b-d63528fa4614
:DRILL_LAST_INTERVAL: 53.2326
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 10
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.9
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-23 Tue 10:50]
:END:

Why are tagged classes bad?

**** Answer

Schwarzenegger Tag preschool class, read constitution, ram, final countdown,
stage extends.

+ Cluttered with boiler plate, including enums, tag fields, and switch statements.
+ Readability is bad because multiple implementations are jumbled together in a
  single class.
+ Memory footprint is increased because every instance has all the fields of
  every tag.
+ Fields can't be final unless each constructor initializes all the irrelevant
  fields.
+ You can't add a new flavor of a tagged class unless you can modify the source
  file.  This violates the open-closed principle.

Tagged classes are verbose, error-prone and inefficient.

A tagged class is a pallid imitation of a class hierarchy. 

*** Item 20: Prefer class hierarchies over tags - alternative         :drill:
SCHEDULED: <2016-04-04 Mon>
:PROPERTIES:
:ID:       892ac2e3-b1ec-4764-8a6d-7b5eaed515ad
:DRILL_LAST_INTERVAL: 49.05
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.4
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-15 Mon 10:02]
:END:

What do you replace a tagged class with?

**** Answer

A class hierarchy.

*** Item 20: Prefer class hierarchies over tags - Alternative impl    :drill:
SCHEDULED: <2016-03-29 Tue>
:PROPERTIES:
:ID:       37854105-68d9-4e5f-93ef-586127dea641
:DRILL_LAST_INTERVAL: 42.4555
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-16 Tue 10:41]
:END:

How do you transform a tagged class to a class hierarchy?

**** Answer

1. Define an abstract class containing an abstract method for each method in the
   tagged class that depends on the tag value.
2. Define a concrete subclass of the root class for each flavor of the original
   tagged class.

*** Item 21: Use function objects - Java function pointer             :drill:
SCHEDULED: <2016-04-09 Sat>
:PROPERTIES:
:ID:       7748115f-87d0-43a5-aa77-e504115ff827
:DRILL_LAST_INTERVAL: 52.0736
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-17 Wed 11:19]
:END:

How do you represent a function pointer in Java?

**** Answer

With an object whose method does stuff to other objects.  The instance of a
class with one method functions essentially as a pointer to the method, thus
mimicking a function pointer.

This approach is typically used for the strategy pattern.

*** Item 21: Use function objects - optimization                      :drill:
SCHEDULED: <2016-03-31 Thu>
:PROPERTIES:
:ID:       ed8a6576-6a80-49e6-bebd-0c66446ef8e8
:DRILL_LAST_INTERVAL: 42.5331
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-17 Wed 11:26]
:END:

Should you create a function object every time you want to use the strategy
pattern?

**** Answer

No, silly.  You generally want to make a singleton and use that to avoid
unnecessary object creation.

*** Item 21: Use function objects - anonymous class optimization      :drill:
SCHEDULED: <2016-03-26 Sat>
:PROPERTIES:
:ID:       0c71b0b1-6acc-43d3-8a6d-a49ec780d1f2
:DRILL_LAST_INTERVAL: 38.7094
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.75
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-16 Tue 10:41]
:END:

If using anonymous classes for function objects, how can you optimize repeated
use?

**** Answer

+ Define the function object as a private static class.
+ Instantiate the function object as a singleton, so a public field or static
  factory.
+ Use the strategy interface to define the singleton.
 
#+BEGIN_SRC java
class Host {
    private static class StrLenCmp implements Comparator<String>, Serializable {
        public int compare(String s1, String s2) {
            return s1.length() - s2.length()
    }

    public static final Comparator<String> STRING_LENGTH_COMPARATOR =
        new StrLenCmp();
    }
}
#+END_SRC

*** Item 22: Favor static member classes - nested class               :drill:
SCHEDULED: <2016-03-28 Mon>
:PROPERTIES:
:ID:       5e8e5e8f-95c6-4d75-9e81-1ce813265122
:DRILL_LAST_INTERVAL: 42.2751
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-15 Mon 09:59]
:END:

What is a nested class?

**** Answer

Any class defined within another class.

*** Item 22: Favor static member classes -                            :drill:
SCHEDULED: <2016-03-25 Fri>
:PROPERTIES:
:ID:       f5bd4562-1fbe-47f7-ace8-31a6c3eeedf6
:DRILL_LAST_INTERVAL: 38.4177
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.75
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-16 Tue 10:41]
:END:

What's the purpose of a nested class?

**** Answer

It only exists to serve the enclosing class.  If the nested class were useful in
some other context, then it should be top level class.

*** Item 22: Favor static member classes - four kinds of nested       :drill:
SCHEDULED: <2016-04-15 Fri>
:PROPERTIES:
:ID:       6da50916-c4a8-450d-8713-47e5b42389c1
:DRILL_LAST_INTERVAL: 57.4666
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.25
:DRILL_EASE: 2.6
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-02-18 Thu 12:29]
:END:

What are the four types of nested classes?

**** Answer

1. Static member classes

Inner Classes
2. Non-static member classes
3. Anonymous classes
4. Local classes

*** Item 22: Favor static member classes - static member class uses   :drill:
SCHEDULED: <2016-03-23 Wed>
:PROPERTIES:
:ID:       584cc744-953e-4ca5-b66b-b03d3b65e309
:DRILL_LAST_INTERVAL: 37.985
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.75
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-14 Sun 11:10]
:END:

What are the use cases for a static member class?

**** Answer

As a public helper class like Calculator.Operations enum with PLUS, MINUS, etc.

*** Item 22: Favor static member classes - qualified this             :drill:
SCHEDULED: <2016-05-12 Thu>
:PROPERTIES:
:ID:       101c977a-8eaf-4db9-a373-7c071745cd6b
:DRILL_LAST_INTERVAL: 72.2054
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.6
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:24]
:END:

How do you reference an enclosing class instance fields or methods from an inner
class?

**** Answer

You can use a simple name, or if the name is shadowed, you use the qualified
this construct:

Without the qualifier, x() would recurse. With the qualifier, the enclosing
instance's x() method is invoked instead.

#+BEGIN_SRC java
class Envelope {
  void x() {
    System.out.println("Hello");
  }
  class Enclosure {
    void x() {
      Envelope.this.x(); /* Qualified*/
    }
  }
}
#+END_SRC

http://stackoverflow.com/questions/11276994/what-does-qualified-this-construct-mean-in-java

*** Item 22: Favor static member classes - when use static            :drill:
SCHEDULED: <2016-04-01 Fri>
:PROPERTIES:
:ID:       66bebad5-d97b-425f-b08e-b8b68dbd9a59
:DRILL_LAST_INTERVAL: 45.5172
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.75
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-02-15 Mon 09:59]
:END:

When should you declare a nested class as static?

**** Answer

Always if the class does not require access to the enclosing instance.

It saves memory since each enclosing class doesn't also have a nested class
instantiation.

*** Item 22: Favor static member classes - anonymous class            :drill:
SCHEDULED: <2016-04-19 Tue>
:PROPERTIES:
:ID:       d4451b59-5726-4757-97c8-90d56bf8c030
:DRILL_LAST_INTERVAL: 53.0814
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.571
:DRILL_EASE: 3.1
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-26 Fri 18:25]
:END:

Where can you write an anonymous class?

**** Answer

Anywhere an expression is legal.

*** Item 22: Favor static member classes - anon class limitations     :drill:
    SCHEDULED: <2016-03-10 Thu>
:PROPERTIES:
:ID:       0e5bb2ae-1957-4795-b73f-63f46cf86e25
:DRILL_LAST_INTERVAL: 14.4247
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 15
:DRILL_FAILURE_COUNT: 6
:DRILL_AVERAGE_QUALITY: 3.467
:DRILL_EASE: 2.82
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-25 Thu 22:23]
:END:

What are the limitations on an anonymous class?

**** Answer

Anon jail, tent, multiple faces, 1/2 army

+ You can't perform instanceof tests
+ You can't implement multiple interfaces, or extend a class and implement an
  interfaces.
+ Clients of an anonymous class can't invoke any members except those it
  inherits from the super-type.

*** Item 22: Favor static member classes - anonymous class uses       :drill:
SCHEDULED: <2016-03-19 Sat>
:PROPERTIES:
:ID:       5dcfd714-1960-47ee-865d-a1c9f0b29d62
:DRILL_LAST_INTERVAL: 35.6784
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.2
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-02-12 Fri 10:30]
:END:

What are common uses for anonymous classes?

**** Answer

+ Function objects to implement the strategy pattern.
 
+ Process objects, e.g. Runnable
  #+BEGIN_SRC java
  Runnable task2 = () -> { System.out.println("Task 2 is running"); };
  Thread thread2 = new Thread(task2);
  thread2.start();
  #+END_SRC

+ Use in a static factory.
  #+BEGIN_SRC java
  public static <T> Callable<T> asCallable(final Report<T> report) {
      return new Callable<T> {
          @Override
          public T call() { return report.generate(); }
      };
  }
  #+END_SRC

*** Item 22: Favor static member classes - local classes declared     :drill:
SCHEDULED: <2016-04-12 Tue>
:PROPERTIES:
:ID:       b6f4287d-2908-4dd6-b0a6-9893621012bf
:DRILL_LAST_INTERVAL: 46.5264
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.6
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-25 Thu 22:29]
:END:

Where can local classes be declared?

**** Answer

Anywhere a local variable can be declared.

** Generics
*** Item 23: Don't use raw types - type 1                             :drill:
SCHEDULED: <2016-03-18 Fri>
:PROPERTIES:
:DRILL_CARD_TYPE: hide1cloze
:ID:       d95b8741-0cf8-44ec-aa34-873d076516c5
:DRILL_LAST_INTERVAL: 30.9552
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.429
:DRILL_EASE: 2.42
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-02-16 Tue 10:43]
:END:
 
The official term for a [List<String>] is a [parameterized type].

*** Item 23: Don't use raw types - type 2                             :drill:
    SCHEDULED: <2016-03-07 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: hide1cloze
:ID:       3c26f404-53a2-4d3d-a605-ec4835909aac
:DRILL_LAST_INTERVAL: 14.6933
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 10
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.9
:DRILL_EASE: 2.96
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:39]
:END:
 
The official term for a [String] is a [actual type parameter].

*** Item 23: Don't use raw types - type 2                             :drill:
SCHEDULED: <2016-04-16 Sat>
:PROPERTIES:
:DRILL_CARD_TYPE: hide1cloze
:ID:       41a638be-814f-4d91-9666-d0f11d474e84
:DRILL_LAST_INTERVAL: 54.9725
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.4
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:43]
:END:
 
The official term for a [List<E>] is a [generic type].

*** Item 23: Don't use raw types - type 3                             :drill:
SCHEDULED: <2016-04-01 Fri>
:PROPERTIES:
:DRILL_CARD_TYPE: hide1cloze
:ID:       05e30c71-50be-4f9d-a6c6-e76ef8547cdc
:DRILL_LAST_INTERVAL: 43.6074
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.857
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-17 Wed 11:26]
:END:
 
The official term for a [E] is a [formal type parameter].

*** Item 23: Don't use raw types - type 4                             :drill:
SCHEDULED: <2016-03-19 Sat>
:PROPERTIES:
:DRILL_CARD_TYPE: hide1cloze
:ID:       46916859-9a39-4f4a-8f7c-067de32a8371
:DRILL_LAST_INTERVAL: 34.7803
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.7
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-13 Sat 13:17]
:END:
 
The official term for a [List<?>] is an [unbounded wildcard type].

*** Item 23: Don't use raw types - type 5                             :drill:
SCHEDULED: <2016-03-16 Wed>
:PROPERTIES:
:DRILL_CARD_TYPE: hide1cloze
:ID:       64a611da-611d-4550-8298-603eca0032f1
:DRILL_LAST_INTERVAL: 33.6962
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.7
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-11 Thu 10:39]
:END:
 
The official term for a [List] (a generic class with no type parameters) is a
[raw type].

*** Item 23: Don't use raw types - type 6                             :drill:
SCHEDULED: <2016-03-09 Wed>
:PROPERTIES:
:DRILL_CARD_TYPE: hide1cloze
:ID:       cadef5d7-3f75-4f12-9619-b93803fd8ed3
:DRILL_LAST_INTERVAL: 26.9442
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.75
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-11 Thu 10:41]
:END:
 
The official term for a [<E extends Number>] is a [bounded type parameter].

*** Item 23: Don't use raw types - type 7                             :drill:
SCHEDULED: <2016-03-16 Wed>
:PROPERTIES:
:DRILL_CARD_TYPE: hide1cloze
:ID:       45d1515b-5129-4db9-8d04-95e161770294
:DRILL_LAST_INTERVAL: 32.2454
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.46
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-02-13 Sat 13:16]
:END:
 
The official term for a [<T extends Comparable<? super T>>] is a [recursive type bound].

*** Item 23: Don't use raw types - type 8                             :drill:
SCHEDULED: <2016-03-24 Thu>
:PROPERTIES:
:DRILL_CARD_TYPE: hide1cloze
:ID:       c7999a55-19b7-4c7c-aa8c-c3b964008a2e
:DRILL_LAST_INTERVAL: 36.976
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-16 Tue 10:41]
:END:
 
The official term for a [List<? extends Number>] is a [bounded wildcard type].

*** Item 23: Don't use raw types - type 9                             :drill:
SCHEDULED: <2016-04-09 Sat>
:PROPERTIES:
:DRILL_CARD_TYPE: hide1cloze
:ID:       86002f40-2980-4f07-9ec1-85fb36a0e303
:DRILL_LAST_INTERVAL: 47.9562
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:43]
:END:
 
The official term for a [~static <E> List<E> asList(E[] a)~] is a [generic method].

*** Item 23: Don't use raw types - type 10                            :drill:
SCHEDULED: <2016-04-09 Sat>
:PROPERTIES:
:DRILL_CARD_TYPE: hide1cloze
:ID:       4464817c-b1ef-47c9-b057-25264f6b819d
:DRILL_LAST_INTERVAL: 44.0566
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.428
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-25 Thu 22:31]
:END:
 
The official term for a [String.class] is a [type token].

*** Item 23: Don't use raw types - why                                :drill:
SCHEDULED: <2016-03-29 Tue>
:PROPERTIES:
:ID:       9c35ca8e-b578-4574-97ca-a0f3ba27678b
:DRILL_LAST_INTERVAL: 40.9583
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.75
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-17 Wed 11:19]
:END:

Why shouldn't you use raw types?

**** Answer

Raw types were left in Java for /migration compatibility/, so generics wouldn't
invalidate two decades of Java.

Raw types work with Object, so there's no type safety.  You must do all the
casts just like the pre-generic era.

With generics, the compiler will ensure type safety and insert all the correct
casts for you.

*** Item 23: Don't use raw types - raw type alternative               :drill:
SCHEDULED: <2016-03-15 Tue>
:PROPERTIES:
:ID:       71b09f09-e8b1-4bdc-bdc0-8a95609d9608
:DRILL_LAST_INTERVAL: 33.0444
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.7
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-11 Thu 10:41]
:END:

What type should you use for generics if the element type is unknown and doesn't
matter?

For example, how would you check two sets to see if they had any objects in
common?

**** Answer

Use the unbounded wildcard type.

#+BEGIN_SRC java
static int numElementsInCommon(Set<?> s1, Set<?> s2) {
    int result = 0;
    for (Object o1: s1) {
        if (s2.contains(o1)) {
            result++;
        }
    }
    return result;
}
#+END_SRC

*** Item 23: Don't use raw types - what's the use of <?>              :drill:
SCHEDULED: <2016-03-29 Tue>
:PROPERTIES:
:ID:       8b2ad061-48ba-4383-b20d-edefaff2ebcb
:DRILL_LAST_INTERVAL: 43.666
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.75
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-14 Sun 11:09]
:END:

What's the point of unbounded wildcard types?

**** Answer

A unbounded wildcard type is useful when the method doesn't care about the
actual type.

#+BEGIN_SRC java
public void printStuff(Iterable<?> stuff) {
  for (Object item : stuff) {
    System.out.println(item);
  }
}
#+END_SRC

It's better than a raw type because it preserves the generic invariant, namely
you can't add any element to the collection because no object matches <?> except
for null.  So this would fail:

#+BEGIN_SRC java
Collection<?> c = new ArrayList<String>();
c.add("foo");
#+END_SRC

With a raw type, you could add any Object to the collection.

#+BEGIN_SRC java
Collection c = new ArrayList<String>();
c.add("foo");
c.add(new Integer(300));
c.add(new Object());
#+END_SRC

http://stackoverflow.com/questions/7671072/what-is-the-use-and-point-of-unbound-wildcards-generics-in-java

*** Item 23: Don't use raw types - instanceof                         :drill:
SCHEDULED: <2016-03-29 Tue>
:PROPERTIES:
:ID:       1694349f-062a-4bcc-a339-57647dcf180c
:DRILL_LAST_INTERVAL: 41.7082
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.75
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-02-16 Tue 10:37]
:END:

How do you do an instanceof check for a parameterized type?

**** Answer

Use an unbounded wildcard.
#+BEGIN_SRC java
value instanceof List<?>
#+END_SRC

Use a raw type - Josh Bloch says it's okay
#+BEGIN_SRC java
value instanceof List
#+END_SRC

*** Item 23: Don't use raw types - raw type use cases                 :drill:
SCHEDULED: <2016-04-01 Fri>
:PROPERTIES:
:ID:       a1a64e62-7320-4e11-823:f-37804d4ef489
:DRILL_LAST_INTERVAL: 40.1178
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 4.125
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:43]
:END:

What are the acceptable uses for raw types?

**** Answer

1. Class literals because Java spec doesn't permit the use of parameterized
   types.  But Arrays and primitive types are okay
 
   List.class - legal
   String[].class -  legal 
   int.class - legal

   List<String>.class - illegal
   List<?>.class - illegal

2. Raw types are okay for instanceof checks, though unbounded wildcards also
   work.

*** Item 24: Eliminate unchecked warnings - how to suppress           :drill:
SCHEDULED: <2016-03-17 Thu>
:PROPERTIES:
:ID:       25630e2b-115d-497c-8f60-d0a85c734651
:DRILL_LAST_INTERVAL: 31.1524
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-15 Mon 09:36]
:END:

How do you suppress an unchecked warnings?

**** Answer

~@SuppressWarnings("unchecked")~

*** Item 24: Eliminate unchecked warnings - include with suppressed   :drill:
SCHEDULED: <2016-03-24 Thu>
:PROPERTIES:
:ID:       cb25be5d-ee37-416a-be3a-457355ea2aea
:DRILL_LAST_INTERVAL: 37.8878
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-15 Mon 10:05]
:END:

What else should you do when you suppress a warning?

**** Answer

Add a comment stating why it's safe to use.

*** Item 24: Eliminate unchecked warnings - when to suppress          :drill:
SCHEDULED: <2016-03-06 Sun>
:PROPERTIES:
:ID:       976f515c-3639-4b41-8bb1-885c376fa091
:DRILL_LAST_INTERVAL: 23.8681
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.25
:DRILL_EASE: 2.56
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-11 Thu 10:37]
:END:

When should you supress unchecked warnings?

**** Answer

Only when you can prove that the code that provoked the warning is typesafe.

*** Item 25: Prefer Lists to Arrays - array and generic diffs         :drill:
SCHEDULED: <2016-04-11 Mon>
:PROPERTIES:
:ID:       2027964e-d3d8-497b-93b8-8c562b1b6550
:DRILL_LAST_INTERVAL: 50.3979
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.75
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:44]
:END:

What are the differences between arrays and generics?

**** Answer

Arrays are covariant and reified.  Generics are invariant and erased.

Arrays have run-time safety but not compile time safety.  Generics have compile
time safety but not run-time safety.

*** Item 25: Prefer Lists to Arrays - reified definition              :drill:
SCHEDULED: <2016-04-23 Sat>
:PROPERTIES:
:ID:       ba413ffd-0b03-49f9-8a3e-fecb51756108
:DRILL_LAST_INTERVAL: 56.7313
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-26 Fri 18:25]
:END:

What does reified mean in a Java context?

**** Answer

You have type information available at runtime.

*** Item 25: Prefer Lists to Arrays - reifiable types                 :drill:
    SCHEDULED: <2016-04-15 Fri>
:PROPERTIES:
:ID:       b63b890c-7dff-44e7-90a5-84297cd83f12
:DRILL_LAST_INTERVAL: 43.815
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 12
:DRILL_FAILURE_COUNT: 4
:DRILL_AVERAGE_QUALITY: 3.666
:DRILL_EASE: 2.96
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-03-02 Wed 12:55]
:END:

What are the reifiable types in Java?

**** Answer

King Tyrion - dwarfs, jump-rope string, Question marks, raining raw
hamburgers, roller-coaster

1. Primitive types, e.g. ~int~
2. Non-parameterized class or interface, e.g. ~Number~, ~String~
3. A parameterized type in which all type variables are unbounded wildcards,
   e.g. ~List<?>~, ~Map<?, ?>~
4. A raw type, e.g. ~List~, ~ArrayList~
5. An array whose component type is reifiable, e.g. ~int[]~, ~List<?>[]~,
   ~List[]~.

*** Item 25: Prefer Lists to Arrays - non-reifiable types             :drill:
SCHEDULED: <2016-03-15 Tue>
:PROPERTIES:
:ID:       e3e1158d-d2f7-4011-baf4-469eec5ee54f
:DRILL_LAST_INTERVAL: 25.8397
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 10
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.3
:DRILL_EASE: 2.28
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-02-18 Thu 12:25]
:END:

What are the non-reifiable types in Java?

**** Answer

1. A type variable, ~e.g~ T
2. A parameterized type with actual type parameters, e.g. ~List<String>~,
   ~Map<String, Integer>~
3. A parameterized type with bounds, e.g. ~List<? extends Number>~,
   ~Comparable<? super string>~

*** Item 25: Prefer Lists to Arrays - varargs                         :drill:
SCHEDULED: <2016-04-01 Fri>
:PROPERTIES:
:ID:       e69bf276-a239-4b57-8d9d-95fdb7f32340
:DRILL_LAST_INTERVAL: 43.4983
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-18 Thu 12:31]
:END:

Should you use generics with varargs?

**** Answer

No, since varargs are an array, it doesn't play nice with generics.

*** Item 25: Prefer Lists to Arrays - mixing arrays and generics      :drill:
SCHEDULED: <2016-04-19 Tue>
:PROPERTIES:
:ID:       ff3d89a2-4c25-464e-acaf-65fa4d24a868
:DRILL_LAST_INTERVAL: 56.2941
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-23 Tue 10:48]
:END:

When having trouble with arrays and generics what should you do?

**** Answer

Replace the arrays with List.

*** Item 26: Favor Generic Types - Steps to valid unchecked           :drill:
    SCHEDULED: <2016-03-05 Sat>
:PROPERTIES:
:ID:       713c26e2-a1d8-4792-af9c-aa0f939204b6
:DRILL_LAST_INTERVAL: 1.075
:DRILL_REPEATS_SINCE_FAIL: 2
:DRILL_TOTAL_REPEATS: 10
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 2.52
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:43]
:END:

What steps should you take to prove an unchecked cast is type safe?

**** Answer

1. Ensure the field is private or immutable.
2. Ensure the field doesn't escape the enclosing class by return or by parameter.
3. Ensure that all methods that modify the field are type-safe.
4. Explain in a comment why the cast is safe.

*** Item 26: Favor Generic Types - two methods for unchecked casts    :drill:
SCHEDULED: <2016-03-18 Fri>
:PROPERTIES:
:ID:       8878bbe7-300f-42df-abb9-c167bb28d5be
:DRILL_LAST_INTERVAL: 32.7348
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.2
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-14 Sun 11:03]
:END:

What are the two places you will generally see unchecked casts?

**** Answer

At the construction site or at the call site.  The construction site is more
common because it only has to happen once.

*** Item 27: Favor Generic Methods - reduce redundancy                :drill:
SCHEDULED: <2016-03-30 Wed>
:PROPERTIES:
:ID:       1acd593f-72cb-452b-a596-5928c5887c77
:DRILL_LAST_INTERVAL: 41.4143
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-18 Thu 12:32]
:END:

How can you reduce the redundancy of instantiating a generic type?

**** Answer

Use a generic static factory method or use the diamond operator which will use
type inference.

*** Item 27: Favor Generic Methods - generic singleton factory        :drill:
    SCHEDULED: <2016-03-20 Sun>
:PROPERTIES:
:ID:       43dc9b98-2b3c-47ed-b590-c5ea1dc13ab3
:DRILL_LAST_INTERVAL: 28.3585
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:39]
:END:

What is the generic singleton factory?

**** Answer

Used to create an object that is immutable but applicable to many different
types.  Because generics are implemented by erasure, you can use a single object
for all required type parameters.  This is better than using raw types because
you only have one unchecked cast.

# *** Item 27: Favor Generic Methods - impl generic singleton factory   :drill:

# How do you implement a generic singleton factory?

# **** Answer

# on hold

*** Item 27: Favor Generic Methods - mutual comparability             :drill:
SCHEDULED: <2016-04-05 Tue>
:PROPERTIES:
:ID:       ac29ca2c-1aca-4630-84a2-df67c02822c0
:DRILL_LAST_INTERVAL: 44.4309
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:45]
:END:

How do you express "for every type T that can be compared to itself"?

**** Answer

<T extends Comparable<T>>

*** Item 28: Use Bounded Wildcards - types of bounds                  :drill:
SCHEDULED: <2016-05-14 Sat>
:PROPERTIES:
:ID:       f54345c2-2ed8-46d7-a10d-07fdf9fe3839
:DRILL_LAST_INTERVAL: 71.2462
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.2
:DRILL_EASE: 2.56
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:24]
:END:

What are the kinds of bounded wildcards?

**** Answer

List<? extends Number> and List<? super Number>

*** Item 28: Use Bounded Wildcards - PECS                             :drill:
SCHEDULED: <2016-03-12 Sat>
:PROPERTIES:
:ID:       77348fda-8279-4d0a-b596-1828208e4ee6
:DRILL_LAST_INTERVAL: 25.4575
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.7
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-02-16 Tue 10:29]
:END:

What is PECS?

**** Answer

Producer extends, Consumer super

It's a mnemoic for remembering which bounds to place on method parameters for
generic arguments.

It's from the point of view of the argument.


Here, src is producing elements we're adding to our stack.
#+BEGIN_SRC java
public void pushAll(Iterable<? extends E> src) {
    for (E e : src)
        push(e); 
}
#+END_SRC


Here ~dest~ is consuming elements that we pop from our Stack
#+BEGIN_SRC java
// In class Stack
public void popAll(Collection<? super E> dest) {
    while (!isEmpty())
        dst.add(pop);
}
#+END_SRC

*** Item 28: Use Bounded Wildcards - return types                     :drill:
SCHEDULED: <2016-05-01 Sun>
:PROPERTIES:
:ID:       8f4d5f42-8be3-4a38-baa0-6fea2f8eff3a
:DRILL_LAST_INTERVAL: 61.3466
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:24]
:END:

What type should you return from generic code?

**** Answer

Not wildcard types.

*** Item 28: Use Bounded Wildcards - wildcard rule of thumb           :drill:
SCHEDULED: <2016-03-27 Sun>
:PROPERTIES:
:ID:       e3d40428-2383-40a8-8170-2b4237a995d8
:DRILL_LAST_INTERVAL: 35.2774
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.75
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:45]
:END:

What rule of thumb do you use for figuring out if your generic API is hard to
use?

**** Answer

If the user has to think about wildcard types, there's probably something wrong
with the API.

*** Item 28: Use Bounded Wildcards - explicit type parameters         :drill:
    SCHEDULED: <2016-03-31 Thu>
:PROPERTIES:
:ID:       09978df4-e085-458f-9ca4-e6c7e677489e
:DRILL_LAST_INTERVAL: 38.0807
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.167
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-22 Mon 09:23]
:END:

How do you add explicit type parameters?

**** Answer

~Set<String> set = Collections.synchronizedSet(Sets.<String>newHashSet());~

*** Item 28: Use Bounded Wildcards - comparable and comparator        :drill:
SCHEDULED: <2016-05-01 Sun>
:PROPERTIES:
:ID:       f0a94b6f-533e-4360-b0d7-5471e9d06c1c
:DRILL_LAST_INTERVAL: 64.7467
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-26 Fri 18:23]
:END:

What bounds do you use for Comparable and Comparator?

**** Answer

Comparable<? super T> and Comparator<? super T>

Both interfaces are consumers.  They consume a object and produce an ordering.

*** Item 28: Use Bounded Wildcards - type param only once             :drill:
    SCHEDULED: <2016-04-18 Mon>
:PROPERTIES:
:ID:       e220978c-d35b-495c-a74d-0d4db7d29d0f
:DRILL_LAST_INTERVAL: 51.4909
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 4.143
:DRILL_EASE: 3.0
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-27 Sat 10:24]
:END:

If a type parameter only appears once in a method declaration, what should you
do?

**** Answer

Replace it with a wild card.

You might have to use a private helper method to capture the type to do anything
useful with the item.

*** Item 29: Typesafe Heterogeneous containers - diff with container  :drill:
SCHEDULED: <2016-03-23 Wed>
:PROPERTIES:
:ID:       422876c6-b14f-4662-a571-011d25595ce0
:DRILL_LAST_INTERVAL: 31.1677
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.75
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:46]
:END:

What's the main difference between typesafe heterogeneous containers and a
collection?

**** Answer

The THC parameterizes the key instead of the container.

*** Item 29: Typesafe Heterogeneous containers - limitations          :drill:
SCHEDULED: <2016-03-13 Sun>
:PROPERTIES:
:ID:       80952072-e06c-4467-b612-9345de1b5174
:DRILL_LAST_INTERVAL: 25.4865
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.2
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-17 Wed 11:19]
:END:

What are the limitations of typesafe heterogeneous containers?
collection?

**** Answer

1. You can bypass the type-safety by using the class in its raw form, though
   this is no different than any other generic container.
2. You can't use a non-reifiable type as a key.

** Enums and Annotations
*** Item 30: Use Enum instead of ints - associate data                :drill:
SCHEDULED: <2016-03-26 Sat>
:PROPERTIES:
:ID:       710d241f-434c-417c-a8c5-ad488101af9d
:DRILL_LAST_INTERVAL: 35.8155
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-19 Fri 10:10]
:END:

How do you associate data with an enum?

**** Answer

Declare an instance field and write a constructor that takes the data and stores
it in the field.

*** Item 30: Use Enum instead of ints - top-level vs member           :drill:
SCHEDULED: <2016-04-08 Fri>
:PROPERTIES:
:ID:       fbae22a9-8b04-4416-886b-805b27f3d971
:DRILL_LAST_INTERVAL: 45.5772
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-22 Mon 09:24]
:END:

Should you declare an enum as a top-level class or a member class?

**** Answer

If the enum is generally useful, declare it as a top-level class.  If it's
specific to one class, declare it as member of the specific class.

*** Item 30: Use Enum instead of ints - switches on enums             :drill:
    SCHEDULED: <2016-04-03 Sun>
:PROPERTIES:
:ID:       e9da0beb-da67-4fed-8c42-0e83ddf8a1e3
:DRILL_LAST_INTERVAL: 40.2154
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-23 Tue 10:45]
:END:

What should you generally use instead of switches on enums?

**** Answer

Declare an abstract method in the enum and override it with a constant-specific
method implementation.

#+BEGIN_SRC java
public enum Operation {
    PLUS { double apply(double x, double y) {return x + y;} }
    [...]
    abstract double apply(double x, double y);
}
#+END_SRC

*** Item 30: Use Enum instead of ints - share code                    :drill:
SCHEDULED: <2016-03-17 Thu>
:PROPERTIES:
:ID:       136d094a-ed19-458a-83d2-fc077daed11a
:DRILL_LAST_INTERVAL: 28.0533
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.2
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-02-18 Thu 12:32]
:END:

What's the best way to share behavior specific code between enums?

**** Answer

+ Don't use a switch inside an enum.
+ Use a concrete-specific method implementation.
+ If that's too repetitive, use a member strategy enum.

The strategy enum pattern.
#+BEGIN_SRC java
public enum PayrollDay {

    SUNDAY(PayType.WEEKEND),
    MONDAY(PayType.WEEKDAY);

    private final PayType payType;

    PayrollDay(PayType payType) {
        this.payType = payType;
    }

    double pay(double hoursWorked, double payRate) {
        return payType.pay(hoursWorked, payRate);
    }

    private enum PayType {
        WEEKDAY {
            double overtimePay(double hours, double payRate) {
                return hours <= HOURS_PER_SHIFT ? 0 :
                    hours * payRate / 2;
            }
        },
        WEEKEND {
            double overtimePay(double hours, double payRate) {
                return hours * payRate / 2;
            }
        };
        private static final int HOURS_PER_SHIFT = 8;

        abstract double overtimePay(double hrs, double payRate);

        double pay(double hoursWorked, double payRate) {
            double basePay = hoursWorked + payRate;
            return basePay + overtimePay(hoursWorked, payRate);
        }
    }
}
#+END_SRC

*** Item 30: Use Enum instead of ints - when to use switch            :drill:
    SCHEDULED: <2016-03-26 Sat>
:PROPERTIES:
:ID:       059c0edd-bbd2-43a9-8e34-05d38a67c799
:DRILL_LAST_INTERVAL: 33.8482
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.167
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:42]
:END:

When is it okay to switch on an enum?

**** Answer

If you're augmenting external enum types with constant specific behavior.

*** Item 31: Use instance fields instead of ordinals - rule           :drill:
    SCHEDULED: <2016-03-12 Sat>
:PROPERTIES:
:DRILL_CARD_TYPE: hide1cloze
:ID:       64926446-cac5-4356-bff2-a764342f1727
:DRILL_LAST_INTERVAL: 15.0049
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.571
:DRILL_EASE: 3.1
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-26 Fri 18:22]
:END:

Never derive a value associated with an enum from its [ordinal]; store it in an
[instance field] instead;

*** Item 32: Use EnumSet instead of bit fields - what                 :drill:
SCHEDULED: <2016-03-27 Sun>
:PROPERTIES:
:ID:       728cac51-d43d-4ce2-be81-bc99352baf57
:DRILL_LAST_INTERVAL: 34.7364
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:42]
:END:

What should you use instead of bit fields?

**** Answer

An ~EnumSet~.  For enums with less than 64 elements, the set is represented as a
long and all operations are with bitwise operation, so it's fast.

*** Item 32: Use EnumSet instead of bit fields - immutable            :drill:
SCHEDULED: <2016-04-24 Sun>
:PROPERTIES:
:ID:       0d15569a-71aa-42a3-8a58-eb516f88f46f
:DRILL_LAST_INTERVAL: 55.6816
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-28 Sun 15:46]
:END:

How do you make an immutable enum set?

**** Answer

Guava's ~ImmutableSet~ with ~Sets.immutableEnumSet~
~Collections.unmodifiableSet()~, returns an immutable view to a mutable ~EnumSet~
*** Item 33: Use EnumMap instead of ordinal indexing                  :drill:
SCHEDULED: <2016-04-17 Sun>
:PROPERTIES:
:ID:       53cd9c72-c39d-48ad-9a91-5f2adb116524
:DRILL_LAST_INTERVAL: 50.852
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.9
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-26 Fri 18:24]
:END:

How should you map an Enum to a value?

**** Answer

An ~EnumMap~.

*** Item 34: Emulate extensible enum with interfaces - use case       :drill:
    SCHEDULED: <2016-03-29 Tue>
    :PROPERTIES:
    :ID:       1ad79362-654d-44b8-8bfe-641a9b3e444d
    :DRILL_LAST_INTERVAL: 36.4332
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-22 Mon 09:15]
    :END:

What's the compelling use-case for extensible enums?

**** Answer

opcodes

*** Item 34: Emulate extensible enum with interfaces - how to         :drill:
    SCHEDULED: <2016-03-31 Thu>
    :PROPERTIES:
    :ID:       7d8eddbb-d46c-4978-9a7e-4a4791a9fdca
    :DRILL_LAST_INTERVAL: 37.8792
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 4.75
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-22 Mon 09:23]
    :END:

How do you emulate extensible enums?

**** Answer

Implement an interface with the enum.  Then add an instance-specific method for
each instance.

#+BEGIN_SRC java
public interface Operation {
    double apply(double x, double y);
}

public enum BasicOperation implements Operation {
    PLUS("+") {
        public double apply(double x, double y) {
            return x + y;
        }
    };

    private final String symbol;

    public BasicOperation(String symbol) {
        this.symbol = symbol;
    }
}
#+END_SRC

*** Item 34: Emulate extensible enum with interfaces - type decl      :drill:
    SCHEDULED: <2016-03-28 Mon>
    :PROPERTIES:
    :ID:       bd065887-6f89-47f6-93dd-7543b2cb2b8e
    :DRILL_LAST_INTERVAL: 31.5472
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 4.5
    :DRILL_EASE: 2.7
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-25 Thu 22:29]
    :END:

What's the type declaration for using an extensible enum?

**** Answer

To get the whole enum that you can then iterate over.
~<T extends Enum<T> & Operation>~

or convert the enum to an array of values and store it in a collection. 
~Collection<? extends Operation>~ 

*** Item 35: Prefer annotations to naming patterns - disadvantages    :drill:
    SCHEDULED: <2016-03-27 Sun>
    :PROPERTIES:
    :ID:       3b8949d3-2461-4203-9628-acefc9ea7d20
    :DRILL_LAST_INTERVAL: 35.4482
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:41]
    :END:

What are the disadvantages of naming patterns?

**** Answer

1. Silent failures because of typos.
2. No way to ensure naming patterns are used on appropriate elements.
3. There's no good way to associate parameter values with program elements.

*** Item 35: Prefer annotations to naming patterns - use instead      :drill:
    SCHEDULED: <2016-04-20 Wed>
    :PROPERTIES:
    :ID:       5ecb8a3a-da8a-49d6-9c1a-c38683a66c9e
    :DRILL_LAST_INTERVAL: 53.1795
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-27 Sat 10:27]
    :END:

What should you use instead of naming patterns?

**** Answer

Annotations!!!

*** Item 36: Use Override consistently - when                         :drill:
    SCHEDULED: <2016-03-30 Wed>
    :PROPERTIES:
    :ID:       bdf68b77-3401-4bd3-bd4e-142c94506d87
    :DRILL_LAST_INTERVAL: 34.4795
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-25 Thu 22:30]
    :END:

When should you use the Override annotation?

**** Answer

Any time you believe a method is overriding a superclass declaration.

*** Item 37: Use marker interfaces to define types - what             :drill:
    SCHEDULED: <2016-04-06 Wed>
    :PROPERTIES:
    :ID:       699e86de-ede7-4181-9a70-23cbcac2d38d
    :DRILL_LAST_INTERVAL: 39.8692
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 4.75
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-26 Fri 18:23]
    :END:

What are marker interfaces?

**** Answer
     
It's an empty interface.

#+BEGIN_QUOTE
Marker interfaces define a type that is implemented by instances of the marked
class; marker annotations do not.
#+END_QUOTE

http://stackoverflow.com/questions/1995198/what-is-the-use-of-marker-interfaces-in-java    
http://stackoverflow.com/questions/26271786/marker-annotation-vs-marker-interface


*** Item 37: Use marker interfaces to define types - benefits         :drill:
    SCHEDULED: <2016-03-21 Mon>
    :PROPERTIES:
    :ID:       f3372f70-e742-4f91-abda-efe7509bf925
    :DRILL_LAST_INTERVAL: 27.5637
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 4.75
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-22 Mon 09:15]
    :END:

What are the benefits of marker types over marker annotations?

**** Answer

+ Catch errors at compile time.
+ Can be targeted more precisely, e.g. ~interface MyInterfaces extends
  BroInterface {}~
  
http://www.javacodegeeks.com/2013/02/increased-compile-time-safety-with-phantom-types.html

*** Item 37: Use marker interfaces to define types - annotations      :drill:
    SCHEDULED: <2016-05-02 Mon>
    :PROPERTIES:
    :ID:       671aec6a-0f28-4a32-a3eb-b1907f79365b
    :DRILL_LAST_INTERVAL: 58.972
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 4.75
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:25]
    :END:

What are the benefits of marker annotations over marker interfaces?

**** Answer

+ Possible to add more information to an annotation type after it is already in
  use.
+ Part of the larger annotation framework.  Allows for consistency in
  processing.

*** Item 37: Use marker interfaces to define types - which to pick    :drill:
    SCHEDULED: <2016-03-29 Tue>
    :PROPERTIES:
    :ID:       598d0f1e-a19a-4f5e-a90d-f258d7eee8e8
    :DRILL_LAST_INTERVAL: 33.4154
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 4.5
    :DRILL_EASE: 2.7
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-25 Thu 22:34]
    :END:

How do you pick marker interface over a marker annotation?

**** Answer
#+BEGIN_QUOTE
If you find yourself writing a marker annotation type whose target is
~ElementType.TYPE~, take the time to figure out whether it really should be an
annotation type, or whether a marker interface would be more appropriate.
#+END_QUOTE

** Methods
*** Item 38: Check parameters for validity - nonpublic methods        :drill:
    SCHEDULED: <2016-04-04 Mon>
    :PROPERTIES:
    :ID:       18be2409-3537-463d-a291-1429edccedee
    :DRILL_LAST_INTERVAL: 38.274
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 4.5
    :DRILL_EASE: 2.7
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-26 Fri 18:22]
    :END:

How should you check non-public methods for validity?  With assertions or exceptions?

**** Answer

Use assertions because you can and should ensure only valid parameters are ever
passed in.

*** Item 38: Check parameters for validity - stored parameters        :drill:
    SCHEDULED: <2016-04-04 Mon>
    :PROPERTIES:
    :ID:       60da9210-7254-4313-a059-2e934cc98ad8
    :DRILL_LAST_INTERVAL: 35.6346
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 4.5
    :DRILL_EASE: 2.7
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-28 Sun 15:34]
    :END:

Why is it important to check parameters that are stored for later use?

**** Answer

Because you want to fail as fast as possible.  Trying to debug problems later is
much harder than failing at construction.

*** Item 38: Check parameters for validity - exceptions               :drill:
    SCHEDULED: <2016-03-10 Thu>
    :PROPERTIES:
    :ID:       bb41556b-97c5-443e-a981-6c036d01f85e
    :DRILL_LAST_INTERVAL: 18.2412
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 7
    :DRILL_FAILURE_COUNT: 2
    :DRILL_AVERAGE_QUALITY: 4.143
    :DRILL_EASE: 3.0
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:40]
    :END:

When can you skip validation?

**** Answer

When the validity check would be expensive or impractical AND the validity check
is conducted implicitly in the process of doing the computation.

*** Item 38: Check parameters for validity - why                      :drill:
    SCHEDULED: <2016-03-31 Thu>
    :PROPERTIES:
    :ID:       8d580a9f-a3ba-42fe-b939-bdd0c39708ea
    :DRILL_LAST_INTERVAL: 34.7021
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 5
    :DRILL_FAILURE_COUNT: 1
    :DRILL_AVERAGE_QUALITY: 4.4
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-25 Thu 22:31]
    :END:

Why should you restrict and check parameters for validity?

**** Answer

The extra time spent doing the checks will be paid back with interest the first
time a validity check fails.

*** Item 39: Make defensive copies when needed - base assumption      :drill:
    SCHEDULED: <2016-04-25 Mon>
    :PROPERTIES:
    :ID:       af5067ca-7257-4424-8d2a-bc9070b1e45c
    :DRILL_LAST_INTERVAL: 52.1195
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:13]
    :END:

What assumption should you operate under when programming?

**** Answer

That the clients of your class will do their best to destroy the invariants.

*** Item 39: Make defensive copies when needed - constructors         :drill:
    SCHEDULED: <2016-04-04 Mon>
    :PROPERTIES:
    :ID:       c48a6362-4a1c-4ce3-b897-7bf551d41c13
    :DRILL_LAST_INTERVAL: 37.6551
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-26 Fri 18:23]
    :END:

Which parameters are essential to defensively copy in a constructor?

**** Answer

Each mutable parameter.

*** Item 39: Make defensive copies when needed - validity check       :drill:
    SCHEDULED: <2016-04-11 Mon>
    :PROPERTIES:
    :ID:       106c92cc-d4bd-4b8a-9bdf-cea7fc6fabf4
    :DRILL_LAST_INTERVAL: 41.3121
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 4.75
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:13]
    :END:

When do you perform the validity check on defensive copies?

**** Answer

After the defensive copies have been made and you perform the validity check on
the copies.

This protects the class against changes to the parameters from another thread
during the "window of vulnerability" between the time the parameters are checked
and the time they are copied.  This is known as a /time-of-check time-of-use/
TOCTOU attack.

*** Item 39: Make defensive copies when needed - clone                :drill:
    SCHEDULED: <2016-03-23 Wed>
    :PROPERTIES:
    :ID:       aa6b48c6-7a5d-4963-8f9d-dad7dd71e611
    :DRILL_LAST_INTERVAL: 27.4183
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 5
    :DRILL_FAILURE_COUNT: 1
    :DRILL_AVERAGE_QUALITY: 4.4
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-25 Thu 22:29]
    :END:

Should you use clone for defensive copies?

**** Answer

No, you don't use clone to make a defensive copy of a parameter whose type is
subclassable by untrusted parties.

An attacker could create a subclass for nefarious purposes, such as storing all
instances in a private static list for later use.

*** Item 39: Make defensive copies when needed - skipping             :drill:
    SCHEDULED: <2016-03-31 Thu>
    :PROPERTIES:
    :ID:       8d8568e4-fb92-4a2e-8209-7826b7dd4ed6
    :DRILL_LAST_INTERVAL: 34.7897
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-25 Thu 22:33]
    :END:

When can you skip defensive copies?

**** Answer

If the cost of the copy is prohibitive *AND* the class trusts its clients not to
modify the components inappropriately then you can replace the copy with
documentation.

*** Item 39: Make defensive copies when needed - mutable fields       :drill:
    SCHEDULED: <2016-04-03 Sun>
    :PROPERTIES:
    :ID:       4f4c1247-bf37-41fa-8105-6e886f47785e
    :DRILL_LAST_INTERVAL: 37.7039
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-25 Thu 22:34]
    :END:

What do you defensively copy in accessors?

**** Answer

Defensively copy all mutable fields when returning accessors.

*** Item 40: Design method signatures carefully - convenience         :drill:
    SCHEDULED: <2016-04-01 Fri>
    :PROPERTIES:
    :ID:       264fbdca-6af1-4a41-8e6a-2133c280d4ec
    :DRILL_LAST_INTERVAL: 34.0737
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-27 Sat 10:20]
    :END:

What's a rule of thumb for adding convenience methods?

**** Answer

Every method should pull its weight.  Too many methods make a class difficult to
learn, use, document, test and maintain.


When in doubt, leave it out.

*** Item 40: Design method signatures carefully - avoid long params   :drill:
    SCHEDULED: <2016-04-12 Tue>
    :PROPERTIES:
    :ID:       7c581b33-9e9a-47b1-84ac-7b62e192e83f
    :DRILL_LAST_INTERVAL: 41.6
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:24]
    :END:

How long is too long for parameter lists?

**** Answer

Aim for four parameters or fewer.

Long sequences of identically typed parameters are especially harmful.

*** Item 40: Design method signatures carefully - break up            :drill:
    SCHEDULED: <2016-04-10 Sun>
    :PROPERTIES:
    :ID:       d5f52a28-4851-411b-bd06-ebfd1509232f
    :DRILL_LAST_INTERVAL: 39.8975
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 5
    :DRILL_FAILURE_COUNT: 1
    :DRILL_AVERAGE_QUALITY: 4.2
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:20]
    :END:

How can you break up long parameters?

**** Answer

1. Break the method into multiple methods.  If careless, this can result in too
   many methods, but it can also reduce the number of methods by composing well.
2. Create helper classes to hold methods.
3. Adapt builder pattern to method invocation.

*** Item 40: Design method signatures carefully - prefer enums        :drill:
    SCHEDULED: <2016-04-02 Sat>
    :PROPERTIES:
    :ID:       8513fe7b-8098-4ae0-b307-44fa5ee3474b
    :DRILL_LAST_INTERVAL: 36.9085
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-25 Thu 22:31]
    :END:

What should you use instead of boolean parameters?

**** Answer

Two element enums because:

1. They have a name.
2. You can evolve them

*** Item 41: Use overloading judiciously - overloading v. overriding  :drill:
    SCHEDULED: <2016-03-27 Sun>
    :PROPERTIES:
    :ID:       7f2e0ad2-ebe2-419a-a482-cef6e225df70
    :DRILL_LAST_INTERVAL: 30.4006
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-26 Fri 18:23]
    :END:

When is an overloaded method chosen? 
When is an overriden method chosen?

**** Answer

Selection among overloaded methods is static.
Selection among overriden methods in dynamic.

*** Item 41: Use overloading judiciously - avoid confusing overloads  :drill:
    SCHEDULED: <2016-04-12 Tue>
    :PROPERTIES:
    :ID:       ad83a823-979c-49d2-b33a-215b9266c34d
    :DRILL_LAST_INTERVAL: 40.5757
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 4.75
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-02 Wed 13:00]
    :END:

What's a good policy for overloading?

**** Answer

A safe, conservative policy is never to export two overloadings with the same
number of parameters.

*** Item 41: Use overloading judiciously - example                    :drill:
    SCHEDULED: <2016-04-12 Tue>
    :PROPERTIES:
    :ID:       0786822f-742b-444b-a942-01e9a108bbfa
    :DRILL_LAST_INTERVAL: 42.2264
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:13]
    :END:

Why is List.remove a good example of overloading gone wrong?

**** Answer

If you use List<Integer> and call list.remove(3), you get the remove(int i)
which removes an item at index i, instead of removing the element.  You must
explicitly cast to Integer to get remove to actually remove an item.

*** Item 41: Use overloading judiciously - must overload              :drill:
    SCHEDULED: <2016-03-03 Thu>
    :PROPERTIES:
    :ID:       abe0af53-2168-4d82-9693-1a48afc0f110
    :DRILL_LAST_INTERVAL: 15.9144
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-16 Tue 10:34]
    :END:

If you must overload a method, what should you avoid?

**** Answer

1. At least avoid situations where the same set of parameters can be passed to
   different overloadings by the addition of casts.
2. If you can't avoid that situation, because of retrofitting, ensure that all
   overloadings behave identically when passed the same parameters.  Otherwise
   you confuse the fuck out of programmers.

*** Item 42: Use varargs judiciously - one required arg               :drill:
    SCHEDULED: <2016-04-18 Mon>
    :PROPERTIES:
    :ID:       222c514f-84df-4055-909d-fd22003eaac9
    :DRILL_LAST_INTERVAL: 44.7963
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:24]
    :END:

How do you handle a required argument followed by a variable number of
arguments?

**** Answer

One parameter followed by a varags.

#+BEGIN_SRC java
static int min(int firstArg, int... remainingArgs) {
    int min = firstArg;
    for (int n : remainingArgs) {
        if (n < min)
            min = n
    }
}
#+END_SRC

*** Item 42: Use varargs judiciously - when to use                    :drill:
    SCHEDULED: <2016-03-31 Thu>
    :PROPERTIES:
    :ID:       fd5f001f-75ac-4a40-985a-d9dce17b2cca
    :DRILL_LAST_INTERVAL: 33.4607
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-27 Sat 10:24]
    :END:

When should you use varargs?

**** Answer

When the method /only/ really operates on a variable length sequence of values.

*** Item 42: Use varargs judiciously - optimize                       :drill:
    SCHEDULED: <2016-04-23 Sat>
    :PROPERTIES:
    :ID:       17543b2a-82f3-4a2f-b98a-ccd27cb4de93
    :DRILL_LAST_INTERVAL: 50.0013
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 4.75
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:24]
    :END:

How can you optimize a varargs method?

**** Answer

If performance is critical as determined by profiling:

1. Overload the method with 0 params, 1 param, 2 params..., the  number of
   overloads should be determined empirically.
2. Have one varargs catch-all
   
#+BEGIN_SRC java
public void foo() { }
public void foo(int a1) { }
public void foo(int a1, int a2) { }
public void foo(int a1, int a2, int a3) { }
public void foo(int a1, int a2, int a3, int... rest) { }
#+END_SRC

*** Item 43: return empty arrays or collections, not nulls - why      :drill:
    SCHEDULED: <2016-03-08 Tue>
    :PROPERTIES:
    :ID:       5680d835-14fc-4ca5-8161-972476035b17
    :DRILL_LAST_INTERVAL: 18.7247
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-18 Thu 12:19]
    :END:

Why should you return empty arrays or collections instead of nulls?

**** Answer

There is no reason to return null.

+ Empty arrays and ~Collections.emptyList()~ are immutable and can be shared.
+ It's easier for the client because they don't have to handle the null case.

*** Item 44: Write doc comments - what to include                     :drill:
    SCHEDULED: <2016-03-28 Mon>
    :PROPERTIES:
    :ID:       c72f9e94-b337-47ec-b7ac-7360f0fc6360
    :DRILL_LAST_INTERVAL: 27.4542
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 7
    :DRILL_FAILURE_COUNT: 2
    :DRILL_AVERAGE_QUALITY: 3.571
    :DRILL_EASE: 2.56
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:08]
    :END:

What should you include in a doc comment?

**** Answer
     
The doc comment for a method should describe succinctly the contract between the
method and its client. 

1. What the method does - include a one sentence summary description.
2. For methods in a class designed for inheritance - document how the class is
   implemented, especially the use of overridable methods. 
3. Preconditions - typically described the ~@throws~ tag or with the relevant
   ~@param~
4. Postconditions
5. Side-effects - an observable change in the state of the system not obviously
   required to achieve the postcondition.
6. Thread-safety
7. Serialization
   
Other requirements:
+ No two members or constructors in a class or interface should have the same
  summary description.
+ There are no periods followed by spaces in the summary description.
+ For generic types - document all type parameters.
+ For enum types - document the constants.
+ For annotation types - document any members as well as the type itself.

**
** General Programming
*** Item 45: Minimize scope of local vars - most powerful             :drill:
    SCHEDULED: <2016-03-27 Sun>
    :PROPERTIES:
    :ID:       bd6a6a51-10d9-45d8-8efc-644b59aea90a
    :DRILL_LAST_INTERVAL: 30.3686
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-26 Fri 18:21]
    :END:

What is the most powerful technique for minimizing the scope of local variables?

**** Answer

Declare the local variable where it is first used.

*** Item 45: Minimize scope of local vars - initialize                :drill:
    SCHEDULED: <2016-04-18 Mon>
    :PROPERTIES:
    :ID:       ba4ac188-21ff-4292-85e4-9a83c521f894
    :DRILL_LAST_INTERVAL: 47.8424
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:21]
    :END:

Nearly every local variable should contain an _?

**** Answer

Initializer

*** Item 45: Minimize scope of local vars - skipping initialization   :drill:
    SCHEDULED: <2016-03-07 Mon>
    :PROPERTIES:
    :ID:       e05cf4e2-0798-4d5b-84fe-c751786bba03
    :DRILL_LAST_INTERVAL: 16.7512
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-19 Fri 10:02]
    :END:

When is it acceptable to postpone initialization of local variables?

**** Answer

When using a try-catch block.

*** Item 46: Prefer for-each loops - why                              :drill:
    SCHEDULED: <2016-04-18 Mon>
    :PROPERTIES:
    :ID:       d1e99a54-2063-424a-900b-0acde4fc4f69
    :DRILL_LAST_INTERVAL: 46.9617
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-02 Wed 12:54]
    :END:

Why should you prefer for-each loops?

**** Answer

Because they avoid complex bugs around iterators

*** Item 46: Prefer for-each loops - why not                          :drill:
    SCHEDULED: <2016-03-06 Sun>
    :PROPERTIES:
    :ID:       33f1d8c5-abbf-4167-9073-e0a97a524fda
    :DRILL_LAST_INTERVAL: 13.9742
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 4.667
    :DRILL_EASE: 2.7
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:37]
    :END:

What type of list operations are impossible with a for-each loops??

**** Answer

1. Filtering
2. Transforming
3. Parallel iteration

*** Item 46: Prefer for-each loops - implement iterable               :drill:
    SCHEDULED: <2016-03-08 Tue>
    :PROPERTIES:
    :ID:       d8f1f8ac-6157-4452-83f1-bfcd1c4d72f0
    :DRILL_LAST_INTERVAL: 16.2673
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:37]
    :END:

If you are writing a type that represents a group of elements, what interface
should you implement?

**** Answer

Iterable

*** Item 47: Know and use the libraries - why use stdlib              :drill:
    SCHEDULED: <2016-03-05 Sat>
    :PROPERTIES:
    :ID:       c2906d5b-2aeb-467d-a99b-4a63eaae4852
    :DRILL_LAST_INTERVAL: 13.0923
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 1
    :DRILL_AVERAGE_QUALITY: 4.0
    :DRILL_EASE: 2.7
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:37]
    :END:

Why should use the stdlib?

**** Answer

1. Take advantage of experts who wrote it and the experience of those who used
   it before you.
2. You don't have to waste time writing ad-hoc solutions.
3. Performance of the stdlib tends to improve over time.
4. Libraries tend to gain new functionality over time.

*** Item 48: Avoid float and double for exact - why                   :drill:
    SCHEDULED: <2016-03-05 Sat>
    :PROPERTIES:
    :ID:       44d5dd04-4f4c-4a78-8806-ef396cfcce4d
    :DRILL_LAST_INTERVAL: 12.6679
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:35]
    :END:

Why should you avoid float and doubles for exact calculations?

**** Answer

Because they perform binary floating-point arithmetic, which provides accurate
approximations over a broad range of results, but is not exact.

http://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency

#+BEGIN_QUOTE
Because floats and doubles cannot accurately represent the base 10 multiples
we use for money. This issue isn't just for Java, it's for any programming
language that uses native floating-point types, as it stems from how computers
handle floating-point numbers by default.
#+END_QUOTE

*** Item 48: Avoid float and double for exact nums - money            :drill:
    SCHEDULED: <2016-03-05 Sat>
    :PROPERTIES:
    :ID:       f7f34659-bda6-4672-87a0-68a2a0d190fb
    :DRILL_LAST_INTERVAL: 12.648
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:40]
    :END:

What should you use for monetary calculations in Java?

**** Answer

int, long, or BigDecimal

Java 9 will include https://github.com/JavaMoney/jsr354-api which is a Money and
Currency API.

*** Item 49: Prefer primitives to boxed primitives - differences      :drill:
    SCHEDULED: <2016-03-30 Wed>
    :PROPERTIES:
    :ID:       6f775111-a44a-46ee-a5e8-3fc5a45c0278
    :DRILL_LAST_INTERVAL: 28.5662
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 4.25
    :DRILL_EASE: 2.56
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:09]
    :END:

What are the three major differences between primitives and boxed primitives?

**** Answer

1. primitives only have values, whereas boxed primitives have identities
   distinct from their values.  In other words, two boxed primitives can have
   the same value, but different identities.
2. primitive types only have non-null values, whereas boxed primitives can be
   null or have a value.
3. primitives are more time and space efficient.

*** Item 49: Prefer primitives to boxed primitives - ==               :drill:
    SCHEDULED: <2016-03-09 Wed>
    :PROPERTIES:
    :ID:       62eaf8e0-6a84-48db-a9c6-62a2b9588744
    :DRILL_LAST_INTERVAL: 17.2408
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:40]
    :END:

What does ~==~ do for boxed primitives?

**** Answer

The same thing as a normal object, it compares object identity instead of the value.

*** Item 49: Prefer primitives to boxed primitives - mix              :drill:
    SCHEDULED: <2016-03-06 Sun>
    :PROPERTIES:
    :ID:       8d20e577-8bff-482c-84cf-9c7549445796
    :DRILL_LAST_INTERVAL: 14.1536
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:37]
    :END:

What happens if you mix primitives with boxed primitives?

**** Answer

When you mix primitives and boxed primitives in a single operation, the boxed
primitive is auto-unboxed.

*** Item 49: Prefer primitives to boxed primitives - null unboxing    :drill:
    SCHEDULED: <2016-03-07 Mon>
    :PROPERTIES:
    :ID:       78ad49ed-c190-4543-ada7-99e02dc72924
    :DRILL_LAST_INTERVAL: 15.3465
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:40]
    :END:

What happens if you unbox a null value?

**** Answer

You get a ~NullPointerException~.

*** Item 50: Avoid strings where other types are better - why         :drill:
    SCHEDULED: <2016-03-05 Sat>
    :PROPERTIES:
    :ID:       c65f5e80-9a72-45ed-a55f-0855e8337446
    :DRILL_LAST_INTERVAL: 13.1446
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 4.667
    :DRILL_EASE: 2.7
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:40]
    :END:

Why shouldn't you use strings to represent value types, enums, aggregates or
capabilities?

**** Answer

Strings are slower, more tedious and more error-prone than the other methods

*** Item 50: Avoid strings where other types are better - aggregation :drill:
    SCHEDULED: <2016-04-08 Fri>
    :PROPERTIES:
    :ID:       0f58bf04-6609-43e7-9f6a-ad417d3dbbbe
    :DRILL_LAST_INTERVAL: 37.1837
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-02 Wed 13:00]
    :END:

What should you replace String aggregation with?

For example:

#+BEGIN_SRC java
String compoundKey = className + "#" + i.next();
#+END_SRC

**** Answer

Write a private static member class to represent the aggregate.

*** Item 50: Avoid strings where other types are better - capability  :drill:
    SCHEDULED: <2016-03-09 Wed>
    :PROPERTIES:
    :ID:       acd625bc-f054-45cd-8ec5-26d577d65451
    :DRILL_LAST_INTERVAL: 15.0246
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-23 Tue 10:45]
    :END:

How can you replace a String with that represents a capability with an
unforgeable key?

**** Answer

You can use a public static member class with a no-args constructor.

#+BEGIN_SRC java
public class ThreadLocal {
    private ThreadLocal() {} // Noninstaniable

    public static class Key { // capability
        Key()
    }

    public static Key getKey() {
        return new Key();
    }

    public static void set(Key key, Object value);

    public static Object get(Key key);

}
#+END_SRC

*** Item 51: Beware the performance of string concatenation           :drill:
    SCHEDULED: <2016-03-03 Thu>
    :PROPERTIES:
    :ID:       c451d158-a687-4678-9176-0e7c97415966
    :DRILL_LAST_INTERVAL: 11.2849
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:40]
    :END:

Why should you avoid repeated string concatenation?

**** Answer

Because it's quadratic.  Use ~StringBuilder~ instead.

This advice is overly broad.  Java compilers may use StringBuilder optimization.
For static concatenation, using "+" is fine.  For dynamic concatenation, prefer
StringBuilder.

http://www.pellegrino.link/2015/08/22/string-concatenation-with-java-8.html

This blog post actually runs tests.  The results:

1. Java 8 will optimize static string concatenation.
2. Java 8 does not currently optimize dynamic string concatenation.

*** Item 52: Refer to objects by interface - what                     :drill:
    SCHEDULED: <2016-03-07 Mon>
    :PROPERTIES:
    :ID:       08e4da20-d626-4bea-a23a-3713e16872b4
    :DRILL_LAST_INTERVAL: 12.9116
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-23 Tue 10:43]
    :END:

Why should you use interfaces as types?

**** Answer

Your program will be much more flexible.  You can change the representation
without changing the code.

*** Item 52: Refer to objects by interface - Why not                  :drill:
    SCHEDULED: <2016-03-09 Wed>
    :PROPERTIES:
    :ID:       225337f9-afff-4654-b679-d5973912472d
    :DRILL_LAST_INTERVAL: 15.3183
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 4.667
    :DRILL_EASE: 2.7
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-23 Tue 10:44]
    :END:

When is it appropriate to refer to an object by it's class rather than its
interface?

**** Answer

1. When no appropriate interface exists, as is often the case for value classes.
2. Object of a framework that uses classes (typically abstract) as the
   fundamental type rather than interfaces.
3. When the class adds extra methods and you need those methods.

*** Item 53: Prefer interfaces to reflection - why                    :drill:
    SCHEDULED: <2016-03-09 Wed>
    :PROPERTIES:
    :ID:       934c577e-6cb6-476d-a1fc-8ce3e5a91639
    :DRILL_LAST_INTERVAL: 14.635
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 4.667
    :DRILL_EASE: 2.7
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-23 Tue 10:42]
    :END:

What are the disadvantages of using reflection as opposed to interfaces?

**** Answer

1. You lose all the benefits of compile-time checking.
2. The code required to perform reflective access is clumsy and verbose.
3. Performance suffers.

*** Item 53: Prefer interfaces to reflection - restricted reflection  :drill:
    SCHEDULED: <2016-03-08 Tue>
    :PROPERTIES:
    :ID:       5a94b79a-5bf7-49dd-a18c-d06d09d3fd50
    :DRILL_LAST_INTERVAL: 15.2868
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 4.667
    :DRILL_EASE: 2.7
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-22 Mon 09:15]
    :END:

What's one way to gain many benefits of reflection without the disadvantages?

**** Answer

Create instances reflectively and access them normally via their interface or
superclass.

*** Item 54: Use native methods judiciously                           :drill:
    SCHEDULED: <2016-03-14 Mon>
    :PROPERTIES:
    :ID:       1439c72b-2fbc-425e-96a7-0a57c70ec955
    :DRILL_LAST_INTERVAL: 18.3721
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 6
    :DRILL_FAILURE_COUNT: 2
    :DRILL_AVERAGE_QUALITY: 3.833
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-25 Thu 22:15]
    :END:

What are the downsides of native methods?

**** Answer

1. Rely on languages that are unsafe.
2. Platform dependent.
3. Fixed cost associated with moving data in and out of native code.
4. Tedious and error prone to write.

*** Item 55: Optimize Judiciously - principles                        :drill:
    SCHEDULED: <2016-03-06 Sun>
    :PROPERTIES:
    :ID:       40d70f6a-2f26-4848-8f89-a5ccedec209a
    :DRILL_LAST_INTERVAL: 9.668
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 6
    :DRILL_FAILURE_COUNT: 2
    :DRILL_AVERAGE_QUALITY: 3.667
    :DRILL_EASE: 2.66
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-25 Thu 22:23]
    :END:

What are Bloch's principles for writing programs with regards to optimization?

**** Answer

1. Strive to write good programs rather than fast ones.
2. Avoid design decisions that limit performance.
3. Consider the performance consequences of you API design decisions.
4. It is a very bad idea to warp an API to achieve good performance.

   
*** Item 56: Adhere to generally accepted naming conventions          :drill:
    SCHEDULED: <2016-04-03 Sun>
    :PROPERTIES:
    :ID:       4880dd30-9a68-4417-9e95-584e0e4064e9
    :DRILL_LAST_INTERVAL: 29.5149
    :DRILL_REPEATS_SINCE_FAIL: 5
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:07]
    :END:

What naming conventions should you follow for returning a view?

**** Answer

Use ~asTYPE~.

** Exceptions

*** Item 57: Use exceptions only for exceptional circumstances        :drill:
    SCHEDULED: <2016-03-11 Fri>
    :PROPERTIES:
    :ID:       888eb272-031c-4e69-afc2-468734d7792b
    :DRILL_LAST_INTERVAL: 13.6521
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-26 Fri 18:22]
    :END:

When should you prefer distinguished return values over state checking for control
flow in an API?

**** Answer

If the object is accessed concurrently without external synchronization, use
distinguished return values.  The state may be mutated between concurrent
accesses.

All other things being equal, state-testing is slightly preferable to
distinguished return value because it's easier to read and detect.

*** Item 58: Use checked exceptions for recoverable conditions        :drill:
    SCHEDULED: <2016-03-09 Wed>
    :PROPERTIES:
    :ID:       39245b2e-7243-495a-924a-b72672a27507
    :DRILL_LAST_INTERVAL: 12.4667
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-26 Fri 18:21]
    :END:

When should you use checked exceptions and when do you use runtime exceptions?

**** Answer

Use checked exceptions for conditions from which the caller can reasonably be
expected to recover.

Use runtime exceptions to indicate programming errors.

If you're unsure that recovery is possible, make it a runtime exception.

*** Item 58: Use checked exceptions for recoverable conditions - info :drill:
    SCHEDULED: <2016-03-08 Tue>
    :PROPERTIES:
    :ID:       a9b6d7d3-80a1-45b7-b4a1-36f27eb88bde
    :DRILL_LAST_INTERVAL: 12.268
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-25 Thu 22:22]
    :END:

What additional information should you include in a checked exception?

**** Answer

Since exceptions are full-fledged objects, include any information that could
help the client recover.

*** Item 59: Avoid unnecessary use of checked exceptions              :drill:
    SCHEDULED: <2016-03-06 Sun>
    :PROPERTIES:
    :ID:       abd8f525-8a37-45b3-8388-d0b5ae53bafc
    :DRILL_LAST_INTERVAL: 10.3094
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 1
    :DRILL_AVERAGE_QUALITY: 4.25
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-25 Thu 22:22]
    :END:

When is the burden of checked exceptions okay?

**** Answer

When the exceptional condition cannot be prevented by proper use of the API /and/
the programmer can take some useful action when confronted by the exception.

*** Item 59: Avoid unnecessary use of checked exceptions              :drill:
    SCHEDULED: <2016-03-20 Sun>
    :PROPERTIES:
    :ID:       0c4605b3-88d9-4b9c-9e22-744cd512bcd2
    :DRILL_LAST_INTERVAL: 21.5323
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 1
    :DRILL_AVERAGE_QUALITY: 4.25
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-27 Sat 10:14]
    :END:

How can you transform a checked exception into an unchecked exception?

**** Answer

Write a helper method that returns true if the exception would occur or false if
would not.  That approach is the same as using the state testing approach.

Guava Throwables.propagate(e)

*** Item 60: Favor the use of standard exceptions                     :drill:
    SCHEDULED: <2016-03-11 Fri>
    :PROPERTIES:
    :ID:       9cc909b1-8d6d-4791-ac90-0400f991db1f
    :DRILL_LAST_INTERVAL: 14.079
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 6
    :DRILL_FAILURE_COUNT: 2
    :DRILL_AVERAGE_QUALITY: 3.667
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-26 Fri 18:22]
    :END:

What are the most common exceptions in Java?

**** Answer

+ ~IllegalArgumentException~
+ ~IllegalStateException~
+ ~NullPointerException~
+ ~IndexOutOfBoundsException~
+ ~ConcurrentModificationException~
+ ~UnspportedOperationException~

*** Item 61: Throw exceptions appropriate to the abstraction          :drill:
    SCHEDULED: <2016-03-10 Thu>
    :PROPERTIES:
    :ID:       cc027aae-a4e6-43ab-b39b-4edd4ff0ff72
    :DRILL_LAST_INTERVAL: 11.6063
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-27 Sat 10:14]
    :END:

How should you handle exceptions in a higher layer that come from a lower layer?

**** Answer

Catch the low-level exception and throw an exception that can be explained in
the terms of the higher level abstraction.

#+BEGIN_SRC java
public E get(int index) {
    ListIterator<E> i = listIterator(index);
    try {
        return i.next();
    } catch(NoSuchElementException e) {
        throw new IndexOutOfBoundsException("Index: " + index);
    }
}
#+END_SRC

The best approach is often to use exception chaining, which preserves details
about the exception.

*** Item 62: Document all exceptions thrown by each method            :drill:
    SCHEDULED: <2016-03-12 Sat>
    :PROPERTIES:
    :ID:       36b62715-5645-4aee-acb5-dcb19a5d08e5
    :DRILL_LAST_INTERVAL: 14.1883
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 4.667
    :DRILL_EASE: 2.7
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-27 Sat 10:19]
    :END:

How should you document exceptions?

**** Answer

+ Declare checked exceptions individually.
+ Document precisely the conditions under which each exception is thrown using
  the Javadoc @throws tag.
+ If an exception is thrown by many methods, you can document it in the class.

*** Item 63: Include failure capture information - detail message     :drill:
    SCHEDULED: <2016-03-10 Thu>
    :PROPERTIES:
    :ID:       6B8BA896-B4A3-4856-B686-6E124C3E9CD2
    :DRILL_LAST_INTERVAL: 11.7436
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-27 Sat 10:13]
    :END:

What information should go into an exception detail message?

**** Answer

All values of parameters and fields that contributed to the exception.

*** Item 63: Include failure capture information - prose              :drill:
    SCHEDULED: <2016-03-14 Mon>
    :PROPERTIES:
    :ID:       C034C19C-1925-45E1-AFC5-977D24EEAF52
    :DRILL_LAST_INTERVAL: 12.6574
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:05]
    :END:

Do you include prose in an exception detail message?

**** Answer

Generally not, because exceptions will be accompanied by the source code, so
only include hard data.

*** Item 63: Include failure capture information - force detail       :drill:
    SCHEDULED: <2016-03-17 Thu>
    :PROPERTIES:
    :ID:       CA76A677-87AF-461D-84CF-EA19D6634C55
    :DRILL_LAST_INTERVAL: 15.8519
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:11]
    :END:

What's one way to force good detail messages for exceptions?

**** Answer

Provide a constructor that takes in detail message parameters, like:

#+BEGIN_SRC java
public IndexOutOfBoundsException(int lowerBound, int upperBound, int index)
#+END_SRC

*** Item 64: Strive for failure atomicity - definition                :drill:
    SCHEDULED: <2016-03-15 Tue>
    :PROPERTIES:
    :ID:       9A82D17A-4E5E-45AE-B138-22E72BB5D14B
    :DRILL_LAST_INTERVAL: 13.5708
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:08]
    :END:

What is failure atomicity?

**** Answer

When a failed method invocation leaves the object in the state prior to the invocation.

*** Item 64: Strive for failure atomicity - achieve atomicity         :drill:
    SCHEDULED: <2016-03-07 Mon>
    :PROPERTIES:
    :ID:       5BFAE971-C8AD-421A-AB2E-702097409EEA
    :DRILL_LAST_INTERVAL: 5.6849
    :DRILL_REPEATS_SINCE_FAIL: 3
    :DRILL_TOTAL_REPEATS: 7
    :DRILL_FAILURE_COUNT: 3
    :DRILL_AVERAGE_QUALITY: 3.571
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:05]
    :END:

What ways can you achieve failure atomicity?

**** Answer

1. Use immutable objects.
2. Check parameters for validity before performing the operation.
3. Order the computation so that any part that might fail occurs before any part
   that modifies the object.
4. Write recovery code to roll-back an object.
5. Perform the operation on a temporary object and replace the contents of the
   object after the operation succeeds
   
*** Item 65 - Don't ignore exceptions                                 :drill:
    SCHEDULED: <2016-03-18 Fri>
    :PROPERTIES:
    :ID:       3AD966E6-F3AD-42BA-90CB-A448ADEE1B79
    :DRILL_LAST_INTERVAL: 17.3536
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:10]
    :END:

Why shouldn't you ignore exceptions?

**** Answer

The API designer is trying to tell you something and ignoring an exception
defeats the purpose of the exception.

If you are ignoring an exception, at least explain why it is appropriate to
ignore it.

** Concurrency
*** Item 66: Synchronize access to shared mutable data - purpose      :drill:
    SCHEDULED: <2016-03-08 Tue>
    :PROPERTIES:
    :ID:       a4920cbe-f639-4912-8f47-4a0d0f7a30f2
    :DRILL_LAST_INTERVAL: 9.1094
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 1
    :DRILL_AVERAGE_QUALITY: 3.75
    :DRILL_EASE: 2.56
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-02-28 Sun 15:27]
    :END:

What two functions does synchronization perform?

**** Answer

1. *Mutual exclusion* - a thread on cause a state transition, from one
   consistent state to another.
2. *Reliable communication* - Ensures that each thread entering a synchronized block sees the effects of
   all previous modifications.

*** Item 66: Synchronize access to shared mutable data - atomic       :drill:
    SCHEDULED: <2016-03-13 Sun>
    :PROPERTIES:
    :ID:       5a879416-e070-48fb-aff6-901f8d44522f
    :DRILL_LAST_INTERVAL: 11.9027
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:07]
    :END:

Which variable reads and writes are atomic in Java?

**** Answer

All variables except long and double.

*** Item 66: Synchronize access to shared mutable data - liveness     :drill:
    SCHEDULED: <2016-03-15 Tue>
    :PROPERTIES:
    :ID:       193beafd-0f36-4408-8d09-b40501c16604
    :DRILL_LAST_INTERVAL: 12.7585
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 6
    :DRILL_FAILURE_COUNT: 2
    :DRILL_AVERAGE_QUALITY: 4.0
    :DRILL_EASE: 2.9
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-02 Wed 12:52]
    :END:

Even though reads and writes are atomic, why might you want to synchronize
access to a boolean that one thread modifies?

**** Answer

To prevent JVM optimization such as hoisting that might break concurrency.

#+BEGIN_SRC java
while (!stopRequested)
    i++;

// could be transformed into

if (!done)
    while (true)
        i++;
#+END_SRC

*** Item 66: Synchronize access to shared mutable data - effect       :drill:
    SCHEDULED: <2016-03-13 Sun>
    :PROPERTIES:
    :ID:       5a143a71-59fd-44cd-b9c3-5a54fd443aff
    :DRILL_LAST_INTERVAL: 11.5611
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:12]
    :END:

What effect does synchronization have if only write access is synchronized?

**** Answer

No effect.  Both operations must be synchronized.

*** Item 66: Synchronize access to shared mutable data - volatile     :drill:
    SCHEDULED: <2016-03-22 Tue>
    :PROPERTIES:
    :ID:       b49f9601-33df-4cfc-9e6e-a85e9345715a
    :DRILL_LAST_INTERVAL: 20.0633
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 1
    :DRILL_AVERAGE_QUALITY: 4.25
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-02 Wed 12:54]
    :END:

What does the volatile keyword do?

**** Answer

Guarantees that any thread that reads the field will see only the most recently
written value.  Does not perform mutual exclusion.  Also guarantees that
assignment is not re-ordered.

http://stackoverflow.com/questions/106591/do-you-ever-use-the-volatile-keyword-in-java

*** Item 66: Synchronize access to shared mutable data - avoidance    :drill:
    SCHEDULED: <2016-03-14 Mon>
    :PROPERTIES:
    :ID:       b628a7eb-64c5-4b00-a642-8bd107910f08
    :DRILL_LAST_INTERVAL: 13.4761
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:04]
    :END:

How can you avoid problems with shared mutable data?

**** Answer

1. Share immutable data.
2. Don't share at all.
3. Confine mutable data to a single thread.

*** Item 66: Synchronize access to shared mutable data - multiple     :drill:
    SCHEDULED: <2016-03-14 Mon>
    :PROPERTIES:
    :ID:       7b2d556c-4336-49c5-be1b-07f82c823017
    :DRILL_LAST_INTERVAL: 13.1713
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:07]
    :END:

What must you do when multiple threads share mutable data?

**** Answer

Synchronize each thread that reads or writes the data.

*** Item 67: Avoid excessive synchronization - aliens                 :drill:
    SCHEDULED: <2016-03-15 Tue>
    :PROPERTIES:
    :ID:       36393a9f-5481-4c2e-92a4-688e8503ce4f
    :DRILL_LAST_INTERVAL: 13.4623
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-02 Wed 12:52]
    :END:

Why should you avoid alien methods in synchronized blocks?

**** Answer

From the perspective of the class with the synchronized block, the methods are
alien.  The class has no knowledge of what the method does and has no control
over it.  Calling an alien method can cause exceptions, deadlocks or data
corruption, resulting in liveness and safety failures.

*** Item 67: Avoid excessive synchronization - Observers              :drill:
    SCHEDULED: <2016-03-20 Sun>
    :PROPERTIES:
    :ID:       9a0dbcbe-c1a4-4852-8c55-d494fad9ebe9
    :DRILL_LAST_INTERVAL: 15.608
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.8
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:10]
    :END:

What's a good data structure for observer lists?

**** Answer

~CopyOnWriteArrayList~ - all write operations are implemented by making a fresh
copy of the array.

http://stackoverflow.com/questions/17853112/in-what-situations-is-the-copyonwritearraylist-suitable

Good when 90% of operations are reads.  Doesn't throw
~ConcurrentModificationException~ because iteration happens on a separate array.

*** Item 67: Avoid excessive synchronization - open call              :drill:
    SCHEDULED: <2016-03-12 Sat>
    :PROPERTIES:
    :ID:       67b3ae14-6731-4e1f-aac8-6cc9569ac7a4
    :DRILL_LAST_INTERVAL: 11.0324
    :DRILL_REPEATS_SINCE_FAIL: 4
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 4.333
    :DRILL_EASE: 2.56
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:06]
    :END:

What do you call an alien method invoked outside a synchronized region?

# **** Answer

# An open call.

# *** Item 67: Avoid excessive synchronization - work in synchronized   :drill:
#     SCHEDULED: <2016-03-03 Thu>
#     :PROPERTIES:
#     :ID:       62a93860-370b-46ab-8742-0336efd3900d
#     :DRILL_LAST_INTERVAL: 4.9804
#     :DRILL_REPEATS_SINCE_FAIL: 3
#     :DRILL_TOTAL_REPEATS: 2
#     :DRILL_FAILURE_COUNT: 0
#     :DRILL_AVERAGE_QUALITY: 5.0
#     :DRILL_EASE: 2.7
#     :DRILL_LAST_QUALITY: 5
#     :DRILL_LAST_REVIEWED: [2016-02-27 Sat 10:19]
#     :END:

# How much work should you do in a synchronized region?

# **** Answer

# As a rule, you should do as little work as possible inside synchronized regions.

# *** Item 67: Avoid excessive synchronization - when to sync           :drill:
#     SCHEDULED: <2016-03-04 Fri>
#     :PROPERTIES:
#     :ID:       ccc396f3-d1e1-463c-b92d-7e341bbe4d23
#     :DRILL_LAST_INTERVAL: 5.5535
#     :DRILL_REPEATS_SINCE_FAIL: 3
#     :DRILL_TOTAL_REPEATS: 2
#     :DRILL_FAILURE_COUNT: 0
#     :DRILL_AVERAGE_QUALITY: 5.0
#     :DRILL_EASE: 2.7
#     :DRILL_LAST_QUALITY: 5
#     :DRILL_LAST_REVIEWED: [2016-02-27 Sat 10:13]
#     :END:

# When in doubt, should you synchronized your class?

# **** Answer

# No.  When in doubt, do /not/ synchronized your class, but document that it is
# not thread-safe.

# Let the client choose to synchronize when in doubt.  

# *** Item 67: Avoid excessive synchronization - static fields          :drill:
#     SCHEDULED: <2016-03-02 Wed>
#     :PROPERTIES:
#     :ID:       40701942-645c-4c52-b28a-a4ef96a97209
#     :DRILL_LAST_INTERVAL: 4.5245
#     :DRILL_REPEATS_SINCE_FAIL: 3
#     :DRILL_TOTAL_REPEATS: 3
#     :DRILL_FAILURE_COUNT: 1
#     :DRILL_AVERAGE_QUALITY: 4.0
#     :DRILL_EASE: 2.7
#     :DRILL_LAST_QUALITY: 5
#     :DRILL_LAST_REVIEWED: [2016-02-26 Fri 18:21]
#     :END:

# If a method modifies a static field, what do you have to synchronize?

# **** Answer

# You must synchronize access to the static field, even if the method is typically
# used by a single thread.  It's not possible for clients to perform external
# synchronization on such a method because there's no guarantee that unrelated
# clients will do the same.

# *** Item 68: Prefer executors and tasks to threads - work queues      :drill:
#     SCHEDULED: <2016-03-06 Sun>
#     :PROPERTIES:
#     :ID:       853d2ba5-8e9e-4d46-86a1-7caf7fbfec80
#     :DRILL_LAST_INTERVAL: 4.8593
#     :DRILL_REPEATS_SINCE_FAIL: 3
#     :DRILL_TOTAL_REPEATS: 4
#     :DRILL_FAILURE_COUNT: 1
#     :DRILL_AVERAGE_QUALITY: 3.75
#     :DRILL_EASE: 2.56
#     :DRILL_LAST_QUALITY: 5
#     :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:10]
#     :END:

# What should you use for work queues in Java?

# **** Answer

# Executors.

# *** Item 68: Prefer executors and tasks to threads - mechanism        :drill:
#     SCHEDULED: <2016-03-03 Thu>
#     :PROPERTIES:
#     :ID:       45be7710-71a1-4d2e-b43d-630251c0942e
#     :DRILL_LAST_INTERVAL: 4.9101
#     :DRILL_REPEATS_SINCE_FAIL: 3
#     :DRILL_TOTAL_REPEATS: 2
#     :DRILL_FAILURE_COUNT: 0
#     :DRILL_AVERAGE_QUALITY: 5.0
#     :DRILL_EASE: 2.7
#     :DRILL_LAST_QUALITY: 5
#     :DRILL_LAST_REVIEWED: [2016-02-27 Sat 10:20]
#     :END:

# What's the mechanism and unit of work for an Executor?

# **** Answer

# Mechanism: thread
# unit of work: Tasks - Runnable and Callable

# *** Item 68: Prefer executors and tasks to threads                    :drill:
#     :PROPERTIES:
#     :ID:       467a2fdc-fb7c-49f6-a3f9-7813841168ee
#     :END:



# **** Answer

# Answer

# *** Item 68: Prefer executors and tasks to threads                    :drill:
#     :PROPERTIES:
#     :ID:       96fe34f2-691e-431c-b2e2-a77ae02854ab
#     :END:



# **** Answer

# Answer

# *** Item 69: Prefer concurrency utils to wait and notify - exclude    :drill:
#     SCHEDULED: <2016-03-06 Sun>
#     :PROPERTIES:
#     :ID:       8fa22fb4-74d1-4db1-935f-1b252694b268
#     :DRILL_LAST_INTERVAL: 4.6614
#     :DRILL_REPEATS_SINCE_FAIL: 3
#     :DRILL_TOTAL_REPEATS: 2
#     :DRILL_FAILURE_COUNT: 0
#     :DRILL_AVERAGE_QUALITY: 5.0
#     :DRILL_EASE: 2.7
#     :DRILL_LAST_QUALITY: 5
#     :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:09]
#     :END:

# Should you use locking with Java's concurrent collections?

# **** Answer

# No, because the concurrent collections manage their own concurrency.  Because
# it's managed internally, it's impossible to exclude concurrent activity from a
# concurrent collection.  Locking will have no effect.

# *** Item 69: Prefer concurrency utils to wait and notify - concur     :drill:
#     SCHEDULED: <2016-03-03 Thu>
#     :PROPERTIES:
#     :ID:       bcfe83aa-7870-45da-80cc-28efe7ac52b2
#     :DRILL_LAST_INTERVAL: 1.6899
#     :DRILL_REPEATS_SINCE_FAIL: 2
#     :DRILL_TOTAL_REPEATS: 3
#     :DRILL_FAILURE_COUNT: 1
#     :DRILL_AVERAGE_QUALITY: 4.0
#     :DRILL_EASE: 2.7
#     :DRILL_LAST_QUALITY: 5
#     :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:14]
#     :END:

# How do you perform a sequence of operations on a concurrent collection?

# **** Answer

# Use the state-dependent modify operations.

# + ~putIfAbsent~
# + ~computeIfAbsent~

# *** Item 69: Prefer concurrency utils to wait and notify - timing     :drill:
#     SCHEDULED: <2016-03-07 Mon>
#     :PROPERTIES:
#     :ID:       37c6a15f-5598-4f4d-8d7d-526b38ceea6d
#     :DRILL_LAST_INTERVAL: 5.7863
#     :DRILL_REPEATS_SINCE_FAIL: 3
#     :DRILL_TOTAL_REPEATS: 2
#     :DRILL_FAILURE_COUNT: 0
#     :DRILL_AVERAGE_QUALITY: 4.5
#     :DRILL_EASE: 2.6
#     :DRILL_LAST_QUALITY: 4
#     :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:03]
#     :END:

# How do you record intervals of time in Java?

# **** Answer

# ~System.nanoTime()~ because it's more accurate and doesn't change if the host OS
# changes the time.

# *** Item 69: Prefer concurrency utils to wait and notify - wait       :drill:
#     SCHEDULED: <2016-03-07 Mon>
#     :PROPERTIES:
#     :ID:       7ea7652f-2585-4cd8-bcc6-3ccfa854a8dd
#     :DRILL_LAST_INTERVAL: 5.9819
#     :DRILL_REPEATS_SINCE_FAIL: 3
#     :DRILL_TOTAL_REPEATS: 2
#     :DRILL_FAILURE_COUNT: 0
#     :DRILL_AVERAGE_QUALITY: 5.0
#     :DRILL_EASE: 2.7
#     :DRILL_LAST_QUALITY: 5
#     :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:09]
#     :END:

# When should you use wait and notify in Java code?

# **** Answer

# There is seldom, if ever a reason to use wait and notify in new code.

# *** Item 70: Document thread safety - synchronized                    :drill:
#     SCHEDULED: <2016-03-03 Thu>
#     :PROPERTIES:
#     :ID:       a6096edb-44be-44be-bea0-e23bded9d4c1
#     :DRILL_LAST_INTERVAL: 4.0017
#     :DRILL_REPEATS_SINCE_FAIL: 3
#     :DRILL_TOTAL_REPEATS: 2
#     :DRILL_FAILURE_COUNT: 0
#     :DRILL_AVERAGE_QUALITY: 5.0
#     :DRILL_EASE: 2.7
#     :DRILL_LAST_QUALITY: 5
#     :DRILL_LAST_REVIEWED: [2016-02-28 Sun 15:27]
#     :END:

# Does the synchronized modifier indicate thread-safety?

# **** Answer

# No.  It is an implementation detail, not part of the exported API.  A class must
# clearly document which level of thread-safety it supports

# *** Item 70: Document thread safety - levels of thread safety         :drill:
#     SCHEDULED: <2016-03-06 Sun>
#     :PROPERTIES:
#     :ID:       5043938d-f236-4d87-ba7b-6f7b9192d561
#     :DRILL_LAST_INTERVAL: 4.5082
#     :DRILL_REPEATS_SINCE_FAIL: 3
#     :DRILL_TOTAL_REPEATS: 2
#     :DRILL_FAILURE_COUNT: 0
#     :DRILL_AVERAGE_QUALITY: 4.0
#     :DRILL_EASE: 2.46
#     :DRILL_LAST_QUALITY: 5
#     :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:05]
#     :END:

# What are Bloch's levels of thread-safety?

# **** Answer

# 1. Immutable - no external synchronization is necessary.
# 2. Unconditionally thread-safe - Instances of the class are mutable, but the
#    class is internally synchronized and can be used concurrently without
#    external synchronization, i.e. ~ConcurrentHashMap~
# 3. Conditionally thread-safe - Like unconditionally thread-safe, but some
#    methods require external synchronization, i.e. ~Collections.synchronized~
#    wrappers.
# 4. Not thread-safe - Instances of the class are mutable.  Clients must surround
#    each method invocation with external synchronization.
# 5. Thread-hostile - not safe for concurrent use.  Usually results from modifying
#    static data without synchronization.

# *** Item 70: Document thread safety - private lock idiom              :drill:
#     SCHEDULED: <2016-03-06 Sun>
#     :PROPERTIES:
#     :ID:       502cb142-23bc-4fdb-bf72-8c8c247897f4
#     :DRILL_LAST_INTERVAL: 4.5624
#     :DRILL_REPEATS_SINCE_FAIL: 3
#     :DRILL_TOTAL_REPEATS: 2
#     :DRILL_FAILURE_COUNT: 0
#     :DRILL_AVERAGE_QUALITY: 5.0
#     :DRILL_EASE: 2.7
#     :DRILL_LAST_QUALITY: 5
#     :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:03]
#     :END:

# What is the private lock idiom?

# **** Answer

# Use a private Object to lock on instead of locking on the this instance.

# #+BEGIN_SRC java
# private final Object lock = new Object();
# #+END_SRC

# *** Item 70: Document thread safety - private vs public lock          :drill:
#     SCHEDULED: <2016-03-03 Thu>
#     :PROPERTIES:
#     :ID:       217f7bd3-eab6-41ed-9b09-f1ebc224a60d
#     :DRILL_LAST_INTERVAL: 1.8552
#     :DRILL_REPEATS_SINCE_FAIL: 2
#     :DRILL_TOTAL_REPEATS: 3
#     :DRILL_FAILURE_COUNT: 1
#     :DRILL_AVERAGE_QUALITY: 4.0
#     :DRILL_EASE: 2.7
#     :DRILL_LAST_QUALITY: 5
#     :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:14]
#     :END:

# When should you use a private lock over a public lock?

# **** Answer

# Use a private lock if the class in synchronized internally, if you don't trust
# clients to perform a denial of service attack or the class is designed for
# inheritance.

# Use a public lock if you have a conditionally thread-safe class, because clients
# must be able to use their own synchronization.

# *** Item 71: Use lazy initialization judiciously - when to use        :drill:
#     SCHEDULED: <2016-03-06 Sun>
#     :PROPERTIES:
#     :ID:       e905c9fc-2a06-4eb7-9c21-39238dd03e71
#     :DRILL_LAST_INTERVAL: 4.7172
#     :DRILL_REPEATS_SINCE_FAIL: 3
#     :DRILL_TOTAL_REPEATS: 3
#     :DRILL_FAILURE_COUNT: 1
#     :DRILL_AVERAGE_QUALITY: 4.0
#     :DRILL_EASE: 2.7
#     :DRILL_LAST_QUALITY: 5
#     :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:09]
#     :END:

# When is lazy initialization justified?

# **** Answer

# 1. As an optimization, only when it's costly to initialize /and/ the field is
#    only used on a fraction of classes.
# 2. To break circular dependencies.
 
# *** Item 71: Use lazy initialization judiciously - synchronized       :drill:
#     SCHEDULED: <2016-03-05 Sat>
#     :PROPERTIES:
#     :ID:       dadc3195-421a-4c26-a042-8566722cea9d
#     :DRILL_LAST_INTERVAL: 4.0385
#     :DRILL_REPEATS_SINCE_FAIL: 3
#     :DRILL_TOTAL_REPEATS: 2
#     :DRILL_FAILURE_COUNT: 0
#     :DRILL_AVERAGE_QUALITY: 5.0
#     :DRILL_EASE: 2.7
#     :DRILL_LAST_QUALITY: 5
#     :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:07]
#     :END:

# What modifier must you have if you're using lazy initialization to break an
# initialization circularity?

# **** Answer

# synchronized

# *** Item 71: Use lazy initialization judiciously - static performance :drill:
#     SCHEDULED: <2016-03-05 Sat>
#     :PROPERTIES:
#     :ID:       182854fc-4920-4d61-90dc-1b0c1833ea92
#     :DRILL_LAST_INTERVAL: 3.6689
#     :DRILL_REPEATS_SINCE_FAIL: 3
#     :DRILL_TOTAL_REPEATS: 3
#     :DRILL_FAILURE_COUNT: 1
#     :DRILL_AVERAGE_QUALITY: 4.0
#     :DRILL_EASE: 2.7
#     :DRILL_LAST_QUALITY: 5
#     :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:08]
#     :END:

# What idiom should you use if you're using lazy initialization on a static field
# as a performance optimization?

# **** Answer

# The /lazy initialization holder class idiom/.  This idiom exploits the guarantee
# that a class will not be initialized until it is used.

# A modern JVM will synchronize field access to initialize the class and then patch
# the code so there's no testing or synchronization.

# #+BEGIN_SRC java
# private static class FieldHolder {
#     static final FieldType field = computeFieldValue();
# }

# static FieldType getField() { return FieldHolder.field; }
# #+END_SRC

# *** Item 71: Use lazy initialization judiciously - instance perf      :drill:
#     SCHEDULED: <2016-03-06 Sun>
#     :PROPERTIES:
#     :ID:       7e59794f-d211-4e7e-a57b-92664882c951
#     :DRILL_LAST_INTERVAL: 4.7506
#     :DRILL_REPEATS_SINCE_FAIL: 3
#     :DRILL_TOTAL_REPEATS: 3
#     :DRILL_FAILURE_COUNT: 1
#     :DRILL_AVERAGE_QUALITY: 4.0
#     :DRILL_EASE: 2.7
#     :DRILL_LAST_QUALITY: 5
#     :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:09]
#     :END:

# What idiom should you use to lazily initialize an instance field for
# performance?

# **** Answer

# The /double-check/ idiom, which does an optimistic check without locking and
# then synchronized initialization.

# #+BEGIN_SRC java
# private volatile FieldType field;

# FieldType getField() {
#     FieldType result = field;
#     if (result == null) {
#         synchronized(this) {
#             result = field;
#             if (result == null) {
#                 field = result = computeFieldValue();
#             }
#         }
#     }
#     return result;
# }
# #+END_SRC

# *** Item 71: Use lazy initialization judiciously - instance repeat    :drill:
#     SCHEDULED: <2016-03-06 Sun>
#     :PROPERTIES:
#     :ID:       a5130c60-a1af-41a5-80fa-724d4788996d
#     :DRILL_LAST_INTERVAL: 4.7495
#     :DRILL_REPEATS_SINCE_FAIL: 3
#     :DRILL_TOTAL_REPEATS: 4
#     :DRILL_FAILURE_COUNT: 2
#     :DRILL_AVERAGE_QUALITY: 3.5
#     :DRILL_EASE: 2.7
#     :DRILL_LAST_QUALITY: 5
#     :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:10]
#     :END:

# What idiom should you use to lazily initialize an instance field for
# performance where you can tolerate repeated initialization?

# **** Answer

# The /single-check idiom/.  Same concept as the double-check idiom without the
# synchronized block.


# #+BEGIN_SRC java
# private volatile FieldType field;

# FieldType getField() {
#     FieldType result = field;
#     if (result == null) {
#         field = result = computeFieldValue();
#     }
#     return result;
# }
# #+END_SRC

# *** Item 71: Use lazy initialization judiciously - racy               :drill:
#     SCHEDULED: <2016-03-05 Sat>
#     :PROPERTIES:
#     :ID:       f20ef9dd-a61b-4401-ba1e-e1105a3486ff
#     :DRILL_LAST_INTERVAL: 3.8673
#     :DRILL_REPEATS_SINCE_FAIL: 3
#     :DRILL_TOTAL_REPEATS: 2
#     :DRILL_FAILURE_COUNT: 0
#     :DRILL_AVERAGE_QUALITY: 5.0
#     :DRILL_EASE: 2.7
#     :DRILL_LAST_QUALITY: 5
#     :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:11]
#     :END:

# What idiom should you use to lazily initialize an instance field for
# performance where you can tolerate repeated initialization and you don't care if
# every thread initialized the value?

# **** Answer

# You can use the racy single-check idiom.  It's the single check idiom, but you
# remove the volatile modifier on the field.  This is used by String to cache hash
# codes.

# *** Item 72: Don't depend on the thread scheduler - yield             :drill:
#     SCHEDULED: <2016-03-03 Thu>
#     :PROPERTIES:
#     :ID:       a58eb218-9b82-4e66-adc7-85bab8fef66a
#     :DRILL_LAST_INTERVAL: 1.5548
#     :DRILL_REPEATS_SINCE_FAIL: 2
#     :DRILL_TOTAL_REPEATS: 4
#     :DRILL_FAILURE_COUNT: 2
#     :DRILL_AVERAGE_QUALITY: 3.5
#     :DRILL_EASE: 2.7
#     :DRILL_LAST_QUALITY: 5
#     :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:14]
#     :END:

# Why should you avoid the temptation to fix concurrency problems with
# Thread.yield?

# **** Answer

# + There are no testable semantics for Thread.yield.
# + The thread scheduler is not portable.

# *** Item 72: Don't depend on the thread scheduler - thread priorities :drill:
#     SCHEDULED: <2016-03-05 Sat>
#     :PROPERTIES:
#     :ID:       23392b52-183f-4fa8-ae4b-a162b7460978
#     :DRILL_LAST_INTERVAL: 3.8484
#     :DRILL_REPEATS_SINCE_FAIL: 3
#     :DRILL_TOTAL_REPEATS: 2
#     :DRILL_FAILURE_COUNT: 0
#     :DRILL_AVERAGE_QUALITY: 5.0
#     :DRILL_EASE: 2.7
#     :DRILL_LAST_QUALITY: 5
#     :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:11]
#     :END:

# Are thread priorities portable?

# **** Answer

# Thread priorities are among the least portable features of the Java platform.

# *** Item 72: Don't depend on the thread scheduler - test concurrency  :drill:
#     SCHEDULED: <2016-03-06 Sun>
#     :PROPERTIES:
#     :ID:       fdb7a9f7-2af9-4a6d-8d3c-d063ed6e8553
#     :DRILL_LAST_INTERVAL: 5.3082
#     :DRILL_REPEATS_SINCE_FAIL: 3
#     :DRILL_TOTAL_REPEATS: 2
#     :DRILL_FAILURE_COUNT: 0
#     :DRILL_AVERAGE_QUALITY: 5.0
#     :DRILL_EASE: 2.7
#     :DRILL_LAST_QUALITY: 5
#     :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:10]
#     :END:

# How can you increase concurrency for testing purposes?

# **** Answer

# Thread.sleep(1);

# Don't use Thread.yield, as it may not do anything.  Thread.sleep(0) may also
# return immediately.

# *** Item 73: Avoid thread groups                                      :drill:
#     SCHEDULED: <2016-03-03 Thu>
#     :PROPERTIES:
#     :ID:       016ff915-e90d-442e-af5c-0b58ccec6ef4
#     :DRILL_LAST_INTERVAL: 1.719
#     :DRILL_REPEATS_SINCE_FAIL: 2
#     :DRILL_TOTAL_REPEATS: 4
#     :DRILL_FAILURE_COUNT: 2
#     :DRILL_AVERAGE_QUALITY: 3.5
#     :DRILL_EASE: 2.7
#     :DRILL_LAST_QUALITY: 5
#     :DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:13]
#     :END:

# Why should you avoid thread groups?

# **** Answer

# + Weak thread safety guarantees.
# + Obsolete

# Use thread pool executors instead.

# ** Serialization
*** Item 74: Implement Serializable judiciously                       :drill:
    SCHEDULED: <2016-03-10 Thu>
    :PROPERTIES:
    :ID:       82dfe2f0-2878-44cb-bd98-6bcf90130842
    :DRILL_LAST_INTERVAL: 5.6487
    :DRILL_REPEATS_SINCE_FAIL: 3
    :DRILL_TOTAL_REPEATS: 2
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.7
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:10]
    :END:

What are the major costs of implementing Serializable?

**** Answer

1. Decreases the flexibility to change a class's implementation once it has been
   released.
2. Increases the likelihood of bugs and security holes.
3. Increases testing burden because you have to test that old releases are
   serializable into new releases.

*** Item 74: Implement Serializable judiciously - inheritance         :drill:
    SCHEDULED: <2016-03-08 Tue>
    :PROPERTIES:
    :ID:       3b45b060-6ec4-44a9-9e18-3e275aed71a8
    :DRILL_LAST_INTERVAL: 4.4729
    :DRILL_REPEATS_SINCE_FAIL: 3
    :DRILL_TOTAL_REPEATS: 2
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.7
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:11]
    :END:

Should classes designed for inheritance implement Serializable?

**** Answer

No, because it places a significant burden an anyone that extend the class?
 
*** Item 74: Implement Serializable judiciously - inheritance excep   :drill:
    SCHEDULED: <2016-03-09 Wed>
    :PROPERTIES:
    :ID:       5008dc2d-f4fd-4c19-a7b9-a287cdfbb3d0
    :DRILL_LAST_INTERVAL: 4.5063
    :DRILL_REPEATS_SINCE_FAIL: 3
    :DRILL_TOTAL_REPEATS: 2
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.7
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:10]
    :END:

Which classes designed for inheritance in Java do implement Serializable?

**** Answer

~Throwable~, ~Component~ and ~HttpServlet~
 
*** Item 74: Implement Serializable judiciously - inheritance         :drill:
    SCHEDULED: <2016-03-06 Sun>
    :PROPERTIES:
    :ID:       909e64d3-08a8-45c3-8c7e-6dc0c4a5ed5f
    :DRILL_LAST_INTERVAL: 3.6051
    :DRILL_REPEATS_SINCE_FAIL: 3
    :DRILL_TOTAL_REPEATS: 2
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.7
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-02 Wed 12:54]
    :END:

If you have a class designed for inheritance that is not Serializable, how can
you allow child classes to implement Serializable?

**** Answer

Provide a protected no-args constructor and a ~checkInit()~ function using an
~AtomicReference~ to an enum on the classes initialized State.
 
*** Item 74: Implement Serializable judiciously - inner classes       :drill:
    SCHEDULED: <2016-03-06 Sun>
    :PROPERTIES:
    :ID:       0f5f37b6-680f-4b0f-81b0-3fefa9f09130
    :DRILL_LAST_INTERVAL: 1.8919
    :DRILL_REPEATS_SINCE_FAIL: 2
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 1
    :DRILL_AVERAGE_QUALITY: 4.0
    :DRILL_EASE: 2.7
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:43]
    :END:

Should inner classes implement Serializable?

**** Answer

No because they use compiler-generated synthetic fields to store references to
enclosing instances and to store values of local variables from the enclosing
scope.  The names of the variables are unspecified, so the default Serialized
form of an inner class is ill-defined.

*** Item 75: Consider using a custom serialized form - default        :drill:
    SCHEDULED: <2016-03-11 Fri>
    :PROPERTIES:
    :ID:       51d8bb9b-8ca6-4cd2-bdc4-7201103d4e2a
    :DRILL_LAST_INTERVAL: 6.5442
    :DRILL_REPEATS_SINCE_FAIL: 3
    :DRILL_TOTAL_REPEATS: 2
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.7
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:08]
    :END:

When is the default serialized form likely to be appropriate?

**** Answer

When the object's physical representation is identical to it's content,
e.g. value classes.

*** Item 75: Consider using a custom serialized form - default 2      :drill:
    SCHEDULED: <2016-03-11 Fri>
    :PROPERTIES:
    :ID:       f05cb32b-e179-4a8e-a2e9-929c02031d67
    :DRILL_LAST_INTERVAL: 6.5466
    :DRILL_REPEATS_SINCE_FAIL: 3
    :DRILL_TOTAL_REPEATS: 2
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.7
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:11]
    :END:

If you use the default serialized form, what method must you provide?

**** Answer

The ~readObject~ method to ensure invariants and security.

*** Item 75: Consider using a custom serialized form - default bad    :drill:
    SCHEDULED: <2016-03-09 Wed>
    :PROPERTIES:
    :ID:       fb687a6c-f5b4-4bf9-878a-29c03e1efc60
    :DRILL_LAST_INTERVAL: 5.1913
    :DRILL_REPEATS_SINCE_FAIL: 3
    :DRILL_TOTAL_REPEATS: 3
    :DRILL_FAILURE_COUNT: 1
    :DRILL_AVERAGE_QUALITY: 4.0
    :DRILL_EASE: 2.7
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:08]
    :END:

What are the disadvantages of using the default serialized form when an object's
physical representation differs substantially from it's logical data content?

**** Answer

1. It permanently ties the exported API to the current internal representation.
2. It can consume excessive space.
3. It can consume excessive time.
4. It can cause stack overflows.

*** Item 75: Consider using a custom serialized form - default read   :drill:
    SCHEDULED: <2016-03-09 Wed>
    :PROPERTIES:
    :ID:       54797064-a10b-42d3-962e-6639f4386553
    :DRILL_LAST_INTERVAL: 4.9131
    :DRILL_REPEATS_SINCE_FAIL: 3
    :DRILL_TOTAL_REPEATS: 2
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.7
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:11]
    :END:

What methods must you call first in ~writeObject~ and ~readObject~?

**** Answer

~defaultWriteObject~ and ~defaultReadObject~.  These methods handle transient
fields make the class more flexible to change

*** Item 75: Consider using a custom serialized form - transient      :drill:
    SCHEDULED: <2016-03-10 Thu>
    :PROPERTIES:
    :ID:       3597e0b8-28b4-4af0-ae98-5cc094a90691
    :DRILL_LAST_INTERVAL: 5.794
    :DRILL_REPEATS_SINCE_FAIL: 3
    :DRILL_TOTAL_REPEATS: 2
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.7
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:11]
    :END:

Which fields should you mark as transient?

**** Answer

As many as possible.  Before deciding to make a field nontransient, convince
yourself that its value is part of the logical state of the object.

If you use a custom serialized form, most or all of the instance fields should
be labeled transient.

*** Item 75: Consider using a custom serialized form - synch          :drill:
    SCHEDULED: <2016-03-09 Wed>
    :PROPERTIES:
    :ID:       c64bddc1-a9ac-483c-85cc-a629716578d6
    :DRILL_LAST_INTERVAL: 4.8338
    :DRILL_REPEATS_SINCE_FAIL: 3
    :DRILL_TOTAL_REPEATS: 2
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.7
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:11]
    :END:

What has to be synchronized for serialization?

**** Answer

The same synchronization on any other method that reads the entire state of the
object.

*** Item 75: Consider using a custom serialized form - UID            :drill:
    SCHEDULED: <2016-03-09 Wed>
    :PROPERTIES:
    :ID:       c439c369-3480-4e73-bbaa-a80fa6af6ec7
    :DRILL_LAST_INTERVAL: 4.7375
    :DRILL_REPEATS_SINCE_FAIL: 3
    :DRILL_TOTAL_REPEATS: 2
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.7
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:09]
    :END:

Why should you declare an explicit serial version UID in every serializable class?

**** Answer

Because otherwise the JVM will perform an expensive computation looking at all
fields and methods to generate a UID.

*** Item 75: Consider using a custom serialized form - How UID        :drill:
    SCHEDULED: <2016-03-09 Wed>
    :PROPERTIES:
    :ID:       b9b7da5b-39fb-41e2-b3cb-5dd31d8b4e5d
    :DRILL_LAST_INTERVAL: 4.6167
    :DRILL_REPEATS_SINCE_FAIL: 3
    :DRILL_TOTAL_REPEATS: 2
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.7
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:11]
    :END:

How do you declare a serial version UID on your class?

**** Answer

#+BEGIN_SRC java
private static final long serialVersionUID = randomLongValue;
#+END_SRC
 

*** Item 76: Write ~readObject~ methods defensively - what            :drill:
    :PROPERTIES:
    :ID:       6DC8557E-E233-4F06-8ADC-C28E1E170895
    :END:

What is readObject?

**** Answer

Loosely speaking, ~readObject~ is a constructor that takes a byte stream as its
sole parameter.

*** Item 76: Write ~readObject~ methods defensively - copies          :drill:
    SCHEDULED: <2016-03-06 Sun>
    :PROPERTIES:
    :ID:       2270A45D-957A-46AB-A8F8-BF92940391C5
    :DRILL_LAST_INTERVAL: 1.8767
    :DRILL_REPEATS_SINCE_FAIL: 2
    :DRILL_TOTAL_REPEATS: 1
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.6
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:13]
    :END:

What fields must you defensively copy when using readObject?

**** Answer

Any field, including final fields, that is an object reference that a client
must not possess.

*** Item 76: Write ~readObject~ methods defensively - litmus test     :drill:
    SCHEDULED: <2016-03-06 Sun>
    :PROPERTIES:
    :ID:       2F14FFFE-986B-4540-91CE-C46B53314339
    :DRILL_LAST_INTERVAL: 1.6632
    :DRILL_REPEATS_SINCE_FAIL: 2
    :DRILL_TOTAL_REPEATS: 2
    :DRILL_FAILURE_COUNT: 1
    :DRILL_AVERAGE_QUALITY: 3.5
    :DRILL_EASE: 2.6
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:44]
    :END:

What litmus test can you use when deciding whether you need to manually
implement ~readObject~?

**** Answer

Would you be comfortable adding a public constructor that took all non-transient
parameters and stored the values with no validation whatsoever.  If so, the
default ~readObject~ is for you.

*** Item 76: Write ~readObject~ methods defensively - steps           :drill:
    SCHEDULED: <2016-03-06 Sun>
    :PROPERTIES:
    :ID:       50644C0C-33E5-49BF-A4F0-3EF0D67D75D2
    :DRILL_LAST_INTERVAL: 1.6901
    :DRILL_REPEATS_SINCE_FAIL: 2
    :DRILL_TOTAL_REPEATS: 4
    :DRILL_FAILURE_COUNT: 3
    :DRILL_AVERAGE_QUALITY: 2.25
    :DRILL_EASE: 2.36
    :DRILL_LAST_QUALITY: 3
    :DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:46]
    :END:

What are the steps for a bulletproof ~readObject~ method?

**** Answer

1. Defensively copy each object that must remain private, including mutable
   components of immutable classes.
2. Check any invariants and throw an ~InvalidObjectException~ if a check fails.
3. If an entire object graph must be validated after it is deserialized, use the
   ~ObjectInputValidation~ interface.
4. Do not invoke overridable methods in the class.

*** Item 77: For instance control, prefer enums to ~readResolve~ - 1  :drill:
    :PROPERTIES:
    :ID:       3E42BE01-DDC6-4179-B1D7-9A35D52453F6
    :END:

If you use ~readResolve~ for instance control, what modifier must you use on all
all object reference types?

**** Answer

The transient modifier, because otherwise the class is vulnerable to a
class-stealer type attack


*** Item 77: For instance control, prefer enums to ~readResolve~ - 2  :drill:
    :PROPERTIES:
    :ID:       D52D8DFC-5D0C-4B18-B271-7EF171029909
    :END:

How can you modify an non-transient object reference in an instance-controlled
class?

**** Answer

Use a class-stealer:

If the singleton contains a non-transient object reference field, the contents
of the field will be deserialized before the singleton's ~readResolve~ method is
run.  This allows a carefully crafted stream to steal a reference to the
originally deserialized singleton at the time the contents of the object
reference field are deserialized.

For the Elvis singleton example, you create a bytestream that has a replaces the
String[] favorites with a reference to an Elvis stealer class.  The Elvis
stealer class stores the Elvis singleton in a static field.  To prevent a
~ClassCastException~, the Elvis stealer returns a new ~String[]~ of favorites.

Now, you have defeated the singleton guarantee.

*** Item 77: For instance control, prefer enums to ~readResolve~ - 3  :drill:
    SCHEDULED: <2016-03-06 Sun>
    :PROPERTIES:
    :ID:       8E60EF9F-4B1F-4FCB-9ECF-4C105F546424
    :DRILL_LAST_INTERVAL: 1.544
    :DRILL_REPEATS_SINCE_FAIL: 2
    :DRILL_TOTAL_REPEATS: 1
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.6
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:24]
    :END:

For instance-controlled class, what should you use instead of relying on
~readResolve~ for serialization?

**** Answer

A single-element enum.


*** Item 77: For instance control, prefer enums to ~readResolve~ - 4  :drill:
    SCHEDULED: <2016-03-05 Sat>
    :PROPERTIES:
    :ID:       1B7B50FE-6485-42DE-BC3F-CD2D4D80D49E
    :DRILL_LAST_INTERVAL: 1.4676
    :DRILL_REPEATS_SINCE_FAIL: 2
    :DRILL_TOTAL_REPEATS: 1
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.6
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:26]
    :END:

When is it appropriate to use ~readResolve~ for serialization of an
instance-controlled class?

**** Answer

When the instances are not known at compile-time.


*** Item 77: For instance control, prefer enums to ~readResolve~ - 5  :drill:
    SCHEDULED: <2016-03-06 Sun>
    :PROPERTIES:
    :ID:       B7CD2ED7-556A-416F-8605-0B92AF7547AF
    :DRILL_LAST_INTERVAL: 2.0189
    :DRILL_REPEATS_SINCE_FAIL: 2
    :DRILL_TOTAL_REPEATS: 1
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 5.0
    :DRILL_EASE: 2.6
    :DRILL_LAST_QUALITY: 5
    :DRILL_LAST_REVIEWED: [2016-03-04 Fri 00:25]
    :END:

How does the accessibility of ~readResolve~ affect serialization?

**** Answer

On a final class, it should be private.

On a non-final class:

package-private: probably okay.

protected or public: will cause a ~ClassCastException~ if the subclass doesn't
override it.


* Consulting
** Breaking the Time Barrier

*** Seven Mutual Benefits                                           :drill:
SCHEDULED: <2016-04-06 Wed>
:PROPERTIES:
:ID:       8EA0BF20-DE9A-418A-B275-3D0A6BC3CDC6
:DRILL_LAST_INTERVAL: 43.9621
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 9
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 2.667
:DRILL_EASE: 1.8
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-02-22 Mon 09:22]
:END:

What are the seven mutual benefits of exploring value with clients?

**** Answer

1. Creates Trust - asking probing questions shows you're interested in
   understanding their unique problem.
2. Fosters Alignment - It's very helpful to agree on two points, Point A and
   Point B.  Point A is pain points. Point B is questions about goals.  A & B
   give immense clarity.
3. Helps your client better evaluate vendors - the deciding factor becomes who
   can deliver value versus what the price is.
4. Frames the Solution as an investment, not an expense - no one likes expenses
   and the exploration process makes the price an investment for an ROI
5. Inspires action - By helping a client to picture point B, they become
   emotionally involved and inspired to act.
6. Lets your client make an informed business decision - Offer options,
   i.e. price discrimination
7. Establishes a trusted partnership - After the first six benefits, clients see
   the impact of your work and champion for you.
* Psychology
** New Year's Resolutions Don't Work

URL: http://www.samuelthomasdavies.com/goals-systems/

Davies describes about how goal oriented people focus on the goal and then lose
motivation.  There's no driving factor after the goal is achieved.  Buzz Aldrin
turned to drinking and fell into depression after landing on the moon.  What you
should do instead is build systems.

System Overview

Identify a keystone habit

Use a feedback loop.

*** Goals are bad                                                     :drill:
SCHEDULED: <2016-03-26 Sat>
:PROPERTIES:
:ID:       10f40af7-186f-448e-a1fe-35e8c881ad84
:DRILL_LAST_INTERVAL: 48.501
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.286
:DRILL_EASE: 2.32
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-06 Sat 14:38]
:END:

Why are goals bad?

**** Answer

1. Goals delay happiness.  Goal oriented exist in state of pre-success failure
   at best, or permanent failure.  Teach yourself to always put happiness off
   until the next milestone.  Hedonic adaptation.
2. Goals derail long-term progress.  Goals redirect focus from processes to
   outcomes.  After achieving goal, people fall back into old habits,
   e.g. cyclical weight loss.
3. Goals lure us into belieiving we can control the future.  Everest climbers
   made goal a part of their identity and jeopordized themselves to get the goal.

*** Hedonic Adaptation                                                :drill:
SCHEDULED: <2016-03-19 Sat>
:PROPERTIES:
:ID:       0048cd41-4170-47a4-aa65-23a9bc9c7817
:DRILL_LAST_INTERVAL: 41.7948
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.571
:DRILL_EASE: 2.32
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-06 Sat 00:47]
:END:

What is hedonic adaptation (hedonic treadmill)?

**** Answer

Tendency of humans to quickly return to a relatively stable level of happiness
despite major positive or negative events or life changes.

As we lose more weight, make more moeny, win more competition our expections
rise in tandem, which results in no permanent gain in happiness.


*** Build a system                                                    :drill:
SCHEDULED: <2016-05-15 Sun>
:PROPERTIES:
:ID:       5657a814-6be2-479d-9ba5-bc806e578282
:DRILL_LAST_INTERVAL: 77.52
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 12
:DRILL_FAILURE_COUNT: 4
:DRILL_AVERAGE_QUALITY: 3.334
:DRILL_EASE: 2.58
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-27 Sat 10:24]
:END:

What are the steps to build a system instead of a goal?

**** Answer

moon rocket habit

1. Decide what you want to achieve.
2. Choose ONE habit that will nudge you toward the desired outcome.
3. Revise your system on a regular basis.

*** What to Achieve                                                   :drill:
SCHEDULED: <2016-04-21 Thu>
:PROPERTIES:
:ID:       9de25430-f028-4591-a97d-1e74bc205238
:DRILL_LAST_INTERVAL: 70.9767
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.6
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-10 Wed 10:48]
:END:

How do you decide what you want to achieve?

**** Answer

Use the why drill.  Ask yourself why, five times in a row.  For example:

I want to lose 14 pounds.
Why?
Because I want to look good naked.
Why?
Because I want to feel good about my body.
Why?
Because I want to find my soul mate.
Why?
Because I want to settle down and start a family.

*** Keystone Habit                                                    :drill:
SCHEDULED: <2016-05-03 Tue>
:PROPERTIES:
:ID:       935adb91-8ffe-42dc-9ba9-d59003dd78d9
:DRILL_LAST_INTERVAL: 65.9311
:DRILL_REPEATS_SINCE_FAIL: 7
:DRILL_TOTAL_REPEATS: 9
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.444
:DRILL_EASE: 2.28
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-27 Sat 10:28]
:END:

What is a keystone habit and how do identify it?

**** Answer

What's the ONE thing, such that, by doing it, your goal (or what you want)
becomes a by product?

Write down as many habits as you can think off.  Identify ONE habit and
systemise it.

/The ONE Thing/ by Keller

*** Habitualise ONE Thing                                             :drill:
SCHEDULED: <2016-05-25 Wed>
:PROPERTIES:
:ID:       d51ec8b8-65ef-4264-a249-1a308dbd746a
:DRILL_LAST_INTERVAL: 84.7134
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.125
:DRILL_EASE: 2.76
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:21]
:END:

How do you systemize your ONE thing with cue-habit-reward and implementation
intention?

**** Answer

System one down: Cue, Habit, Reward, Contingencies

Use implementation intention.

Identify a trigger.  The best triggers are immediately preceeding actions - like
an existing habit, e.g. eating, showering, waking up.

Identify ONE thing to do immediately after your cue.  For example, "After I
return home from work on Mondays, Tuesdays and Wednesdays, I will go for a run
for five miles."

Use a stupid simple behavior that's really easy to do.

Account for contingencies:

If I return home and the weather does not permit, I will go running in the
morning instead.

*** Gall's Law                                                        :drill:
SCHEDULED: <2016-03-27 Sun>
:PROPERTIES:
:ID:       29f0eb88-d255-49f5-8b75-9fc8c6bae6ae
:DRILL_LAST_INTERVAL: 47.3199
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 2.42
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-02-09 Tue 10:00]
:END:

What is Gall's Law

**** Answer

A complex system that works is invariably found to have evolved from a simple
system that worked. A complex system designed from scratch never works and
cannot be patched up to make it work. You have to start over with a working
simple system. – John Gall (1975, p.71)

*** Revise System                                                     :drill:
SCHEDULED: <2016-04-23 Sat>
:PROPERTIES:
:ID:       5e20c306-4d50-4d12-b458-ef270f9c1242
:DRILL_LAST_INTERVAL: 61.3467
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 10
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.4
:DRILL_EASE: 2.38
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-22 Mon 09:24]
:END:

How do you revise your system of accomplishment on a really, regular basis with
trebuchets?

**** Answer

Gall trebuchet model orca

+ Gall's law.  Evolve a complex system from a working simple system.
+ Use modeling.
+ Do more of what already works.
+ Use a feedback loop to identify what works and what doesn't.

*** Feedback Loop                                                     :drill:
    SCHEDULED: <2016-03-08 Tue>
:PROPERTIES:
:ID:       8c6a1d60-c410-48b7-b6a9-a875255b85c4
:DRILL_LAST_INTERVAL: 14.3968
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 12
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 2.38
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-23 Tue 10:43]
:END:

What are the stages of a feedback loop?

**** Answer

1. Evidence
2. Relevance
3. Consequence
4. Action

Goal - lose 10,000 lbs

+ Evidence - track calories, app notifes that bucket of lard put you over the limit
+ Relevance - information gets your attention because it shows if you're on
  target or not.
+ Consequence - you realise repeating this behavior could jeopardise your diet
  in the the long term.
+ Action - You learn from your mistake and replace snack with carrots.

*** Impact Bias                                                       :drill:
SCHEDULED: <2016-05-31 Tue>
:PROPERTIES:
:ID:       a3e8eb48-624b-4738-87da-082295451369
:DRILL_LAST_INTERVAL: 92.959
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.4
:DRILL_EASE: 2.66
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-28 Sun 15:29]
:END:

What is impact bias?

**** Answer

The tendency to overestimate the length and intensity of our future emotions.
* Philosophy
** Ideas
*** Hanlon's Razor                                                    :drill:
SCHEDULED: <2016-03-27 Sun>
:PROPERTIES:
:ID:       3617fbd1-6b96-442f-8b82-dcf9d3c0ce6f
:DRILL_LAST_INTERVAL: 35.3735
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.7
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-21 Sun 14:43]
:END:

What is Hanlon's razor?

**** Answer

"Never assume malice when stupidity will suffice."

A philosophical razor, that is, a way of eliminating unlikely explanations.

* Maven
** Udacity

*** Standard Maven Layout                                 :drill:
SCHEDULED: <2016-04-11 Mon>
:PROPERTIES:
:ID:       3f3d6cb8-fe88-4dc8-aaba-ea786e50e6ea
:DRILL_LAST_INTERVAL: 56.8004
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.857
:DRILL_EASE: 2.52
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-02-14 Sun 11:06]
:END:

What is the standard maven layout?

**** Answer

- src
  - main
    - java
    - resources
    - webapp
    - filters
  - test
    - java
    - resources
    - filters
  - it
  - site
- target
LICENSE.txt
NOTICE.txt
README.txt

https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html
* Excel
** Formulas
*** Index and Match                                                   :drill:
SCHEDULED: <2016-04-23 Sat>
:PROPERTIES:
:ID:       09e90c89-c6a4-4599-9bde-1768676aa2da
:DRILL_LAST_INTERVAL: 53.3689
:DRILL_REPEATS_SINCE_FAIL: 6
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.4
:DRILL_EASE: 2.08
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-03-01 Tue 21:23]
:END:

Given the a data table and a summary table below, how do you get the missing
column to populate with index and match?

*Table 1*

| Last Name  | First Name | Rank |
|------------+------------+------|
| Patton     | George     | 2LT  |
| Washington | George     | CPT  |

*Table 2*

| Last Name  | Rank           |
|------------+----------------|
| Patton     | <FORMULA HERE> |
| Washington |                |

**** Answer

#+BEGIN_SRC 

INDEX(Table1,                                     // The table to search
      MATCH([@[Last Name]], Table1[Last Name]),   // Get the row of the last name in a specific column.
      3)                                          // Column number to pull from, starts from 1
#+END_SRC


