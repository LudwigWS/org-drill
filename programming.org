
* Emacs Questions

** Elisp

*** Dired files                                                       :drill:
SCHEDULED: <2016-01-08 Fri>
:PROPERTIES:
:ID:       34d8abed-eba4-4ad0-814c-14bc929fa90a
:DRILL_LAST_INTERVAL: 7.798
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.5
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2015-12-31 Thu 15:45]
:END:

How do you run an Emacs command on marked files in dired?

**** Answer
dired-get-marked-files

#+BEGIN_SRC emacs-lisp

(with-current-buffer "org-ref"
  (loop for path in (dired-get-marked-files)
        do (with-current-buffer (find-file-noselect path)
             (indent-region (point-min) (point-max)))))
#+END_SRC

* Programming Questions

** Math

*** Median 1                                                        :drill: SCHEDULED: <2015-12-28 Mon> :PROPERTIES: :ID:       6be85ae3-7fbb-42d7-9f95-3c57fba17c95 :DRILL_LAST_INTERVAL: 1.0061 :DRILL_REPEATS_SINCE_FAIL: 2 :DRILL_TOTAL_REPEATS: 1 :DRILL_FAILURE_COUNT: 0 :DRILL_AVERAGE_QUALITY: 4.0 :DRILL_EASE: 2.5 :DRILL_LAST_QUALITY: 4 :DRILL_LAST_REVIEWED: [2015-12-27 Sun 20:36] :END: What is the median?  How is defined for an odd set of number and an even set of numbers? **** Answer It's the middle number.  If the number of elements is even, the median is the mean of the middle two numbers.

** Design Patterns

http://gameprogrammingpatterns.com/singleton.html

*** Singleton 1                                                       :drill:
SCHEDULED: <2016-01-05 Tue>
:PROPERTIES:
:ID:       92910693-0727-4cb6-8180-b879843f0a75
:DRILL_LAST_INTERVAL: 5.6189
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.667
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2015-12-30 Wed 09:30]
:END:

What is the Singleton pattern?

**** Answer

Singleton is a class which only has one instance in a whole application. The
class provides a getInstance() method to access the singleton instances.

*** Singleton 2                                                       :drill:
SCHEDULED: <2016-01-06 Wed>
:PROPERTIES:
:ID:       5e4c1b0b-ede4-43cf-943d-d83c847691ac
:DRILL_LAST_INTERVAL: 5.8242
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 2.75
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2015-12-31 Thu 15:49]
:END:

What are the advantages of a Singleton pattern?

**** Answer

+ Singletons can implement interfaces and inherit from other classes.
+ Singletons can be lazy loaded.  Handy for expensive resources or DB connections.
+ Singletons can be extended into a factory.


*** Singleton 3                                                       :drill:
SCHEDULED: <2016-01-03 Sun>
:PROPERTIES:
:ID:       7b32a2a7-f9c6-464d-a387-53a852634a45
:DRILL_LAST_INTERVAL: 2.9332
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 4
:DRILL_AVERAGE_QUALITY: 2.167
:DRILL_EASE: 2.5
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2015-12-31 Thu 15:47]
:END:

What are the disadvantages of a Singleton pattern?

**** Answer

+ May introduce global state which makes it harder to reason about code.
+ Encourages tight coupling.
+ Makes unit-testing in isolation difficult.
+ Hides dependencies within the Singleton that can attach to everything.
+ Difficult to parallelize because of mutable state.
+ Inability to subclass because of private constructor.

*** Singleton 4                                                       :drill:
SCHEDULED: <2016-01-01 Fri>
:PROPERTIES:
:ID:       f6b95c46-c338-4c84-bcb6-8773f38d6282
:DRILL_LAST_INTERVAL: 1.5816
:DRILL_REPEATS_SINCE_FAIL: 2
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2015-12-30 Wed 09:39]
:END:

What are the alternatives to a Singleton pattern?

**** Answer

+ Dependency Injection by creating an interface and default implementation,
  construct a single instance at the top of your application and passing it to
  components.


*** List design patterns

What are the most common design patterns?

**** Answer

+ Singleton
+ Iterator
+ Factory
+ MVC
+ Decorator
+ Facade
+ Strategy
+ Builder
+ Adapter
+ Command
+ Observer

** Arrays
*** Array 1 :drill:
SCHEDULED: <2016-01-09 Sat>
:PROPERTIES:
:ID:       15ac94ff-d684-4ff4-9660-88f3b64c5cfa
:DRILL_LAST_INTERVAL: 8.9649
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.5
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2015-12-31 Thu 15:48]
:END:

How would you keep track of a median while getting a stream of numbers?

**** Answer

Use a balanced binary tree where instead of keeping track of the height of the
left and right nodes, we keep track of the number of elements.

A better solution, that doesn't involve new data structures is to use a min heap
and a max heap.  Python only provides a min-heap, so you can fake a max-heap by
multiplying by each number by -1 before inserting and then reversing it on a
pop or get-min.

http://www.ardendertat.com/2011/11/03/programming-interview-questions-13-median-of-integer-stream/


** Sorting

*** Bubble sort                                                     :drill:
SCHEDULED: <2016-01-03 Sun>
:PROPERTIES:
:ID:       45FF61B9-A095-4F7A-B7E2-2ED612001C56
:DRILL_LAST_INTERVAL: 3.3775
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 2
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.6
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2015-12-31 Thu 15:46]
:END:

How is bubble sort implemented?

**** Answer

Adjacent items are repeatedly compared.

https://en.wikipedia.org/wiki/Bubble_sort

*** Quick Sort                                                      :drill:
SCHEDULED: <2016-01-04 Mon>
:PROPERTIES:
:ID:       A9B6BC51-C1E8-46DC-9288-9EFF8126261A
:DRILL_LAST_INTERVAL: 3.748
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 2
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.5
:DRILL_EASE: 2.6
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2015-12-31 Thu 15:51]
:END:

What is quicksort's running time and space complexity?

**** Answer

Average Time: O(n log n)
Worst case Time: O(n^2)

Space: O(1)

** Hash Tables

*** Implement Hash Table                                            :drill:
SCHEDULED: <2016-01-01 Fri>
:PROPERTIES:
:ID:       12E1B6CF-EE70-42DA-8CB7-495435FEFD7D
:DRILL_LAST_INTERVAL: 0.8776
:DRILL_REPEATS_SINCE_FAIL: 2
:DRILL_TOTAL_REPEATS: 2
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 2.5
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2015-12-31 Thu 15:55]
:END:

How would you implement a hash table?

**** Answer

Use an array of lists, normally referred to as buckets.  This method is
chaining.

Start with some default capacity.  Java HashMap is 16

insert(key, value)
call hashCode to get an int and take it mod length of the array.

Once you get past some threshold, Java's is 75% load factor, you resize the
array.

get(key)

Use hashcode to find the bucket and search the list to find the item.


*** Hash Table Collision Resolution                                   :drill:
SCHEDULED: <2016-01-02 Sat>
:PROPERTIES:
:ID:       F426A0A8-72BE-4F74-8F0E-32381A0D7C99
:DRILL_LAST_INTERVAL: 3.1261
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 2
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2015-12-30 Wed 09:31]
:END:

What are the two common hash table implementations techniques?

**** Answer

Chaining and Open addressing


*** Hash Table Open Addressing                                      :drill:
SCHEDULED: <2016-01-01 Fri>
:PROPERTIES:
:ID:       1940C116-6088-47FD-A81B-9B3E190113D7
:DRILL_LAST_INTERVAL: 1.0923
:DRILL_REPEATS_SINCE_FAIL: 2
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 2.25
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2015-12-31 Thu 15:54]
:END:

What are the common techniques for implementing open addressing?

**** Answer

Hopscotch raptors.

+ Hopscotch hashing
+ Linear Probing
+ Quadratic Probing
+ Double Hashing
+ Coalesced hashing
+ Cuckoo Hashing
+ Robin Hood Hashing
+ 2-choice Hashing

*** Hopscotch hashing                                               :drill:

What is Hopscotch hashing?

**** Answer

Scheme for resolving hash collisions in a table using open addressing.

Each item is guaranteed to be in the neighborhood of the hashed bucket.  In
other words, the item will always be in the original array entry, or in the next
H-1 neighboring entries.


Each bucket contains a hop-information word, an H-bit bitmap, indicating which
of the next H buckets belong to the neighborhood.

To insert an item, use a linear probe to find some spot in the neighborhood of
entry i.

If there is no such spot, find some entry between i and j that could go to j and
still be in the neighborhood.

If you can't fit the new entry or if bucket i contains H items, resize the
table.

Well suited for concurrent hash table and provides good performance at load
factors exceeding 0.9.


https://en.wikipedia.org/wiki/Hopscotch_hashing



*** Linear Probing                                                  :drill:

What is linear probing?

**** Answer

Scheme for resolving hash collisions in a table using open addressing.

Looks in some stepsize from bucket i.

A small step size provides better locality of reference, but results in
clustering.  Linear probing is sensitive to input distribution.


*** Quadratic Probing                                               :drill:

What is Quadratic Probing?

**** Answer

Scheme for resolving hash collisions in a table using open addressing.

Sample sequence for some bucket i:

$i + 1^2, i + 2^2, i + 3^2, i + k^2$

Provides some locality of reference but not as good as linear probing.


*** Double Hashing                                                  :drill:

What is Double Hashing?

**** Answer

Scheme for resolving hash collisions in a table using open addressing.

*** Coalesced hashing                                               :drill:

What is Coalesced hashing?

**** Answer

Scheme for resolving hash collisions in a table using open addressing.

*** Cuckoo Hashing                                                  :drill:

What is Cuckoo Hashing?

**** Answer

Scheme for resolving hash collisions in a table using open addressing.


*** Robin Hood Hashing                                              :drill:

What is Robin Hood Hashing?

**** Answer

Scheme for resolving hash collisions in a table using open addressing.


*** 2-choice Hashing                                                :drill:

What is 2-choice Hashing?

**** Answer

Scheme for resolving hash collisions in a table using open addressing.


** System Design

*** IPC - Interprocess communication                                :drill:
SCHEDULED: <2016-01-01 Fri>
:PROPERTIES:
:ID:       8C596422-5A0D-4635-A98A-C103638C5760
:DRILL_LAST_INTERVAL: 1.1856
:DRILL_REPEATS_SINCE_FAIL: 2
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 2.25
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2015-12-31 Thu 15:53]
:END:

What are the different methods of IPC?

**** Answer

Zoolander.

+ Files
+ Sockets
+ Pipe, e.g. STDIN and STDOUT
+ Named Pipe
+ Semaphore
+ Message Passing
+ Message Queue
+ Signal
+ Shared Memory
+ Memory mapped file

https://en.wikipedia.org/wiki/Inter-process_communication


*** Latency                                                         :drill:
SCHEDULED: <2016-01-02 Sat>
:PROPERTIES:
:ID:       C3100282-E69F-4FE6-BCA1-2350961AC0C7
:DRILL_LAST_INTERVAL: 2.4679
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 2
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.7
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2015-12-31 Thu 15:52]
:END:

What is latency?

**** Answer

Latency is the time required to perform some action or produce a result.  It is
measured in units of time.



*** Throughput                                                        :drill:
SCHEDULED: <2016-01-02 Sat>
:PROPERTIES:
:ID:       5FB041A6-CAFF-4317-A86B-39E6AF117500
:DRILL_LAST_INTERVAL: 3.2235
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 2
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.5
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2015-12-30 Wed 09:29]
:END:

What is throughput?

**** Answer

Throughput is the number of actions executed or results produced per unit of
time.  It is measured in units per unit of time.


* Java Concurrency

** Java Concurrency In Practice

*** Motivating Factors                                              :drill:
SCHEDULED: <2016-01-02 Sat>
:PROPERTIES:
:ID:       e084f79e-8e7c-4677-bbf8-415022b927cd
:DRILL_LAST_INTERVAL: 2.7111
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 2.46
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2015-12-30 Wed 09:31]
:END:

What are the motivating factors for concurrency?

**** Answer

+ Resource Utilization - waiting for external operations
+ Fairness - share resources with time slicing
+ Convenience - often easier to write programs perform a single task and
  coordinate them

*** Thread Benefits                                                 :drill:
SCHEDULED: <2016-01-04 Mon>
:PROPERTIES:
:ID:       3acd0416-3113-4401-a5f4-58af124d3050
:DRILL_LAST_INTERVAL: 4.3158
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 2.75
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2015-12-31 Thu 15:51]
:END:

What are the benefits of threads?

**** Answer

+ Exploit multiple processors.
+ Simplicity of modeling, break complicated async workflow into simpler
  synchronous workflows and interact at specific sync points.
+ More responsive user interface.

*** Thread vs Process                                               :drill:
SCHEDULED: <2016-01-04 Mon>
:PROPERTIES:
:ID:       2505D78D-4817-463B-B40A-CCD23232BD24
:DRILL_LAST_INTERVAL: 5.4247
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.333
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2015-12-30 Wed 09:29]
:END:

Whats the difference between threads and processes?

**** Answer

A process is an executing instance of a program.  Process provides resources
necessary to execute a program.  A process has:

+ Virtual address space
+ executable code
+ Open handles to system objects
+ a security context
+ A unique PID (process identifier)
+ At least one thread of execution

A thread is the entity within the process that can be scheduled for execution.
Threads share virtual address space of a process.  Each thread maintains:

+ Shared virtual address space from the process
+ Exception handlers
+ scheduling priority
+ thread local storage
+ a unique thread identifier
+ a set of structures to save the thread context until it is scheduled

http://stackoverflow.com/questions/200469/what-is-the-difference-between-a-process-and-a-thread

* Effective Java

** Creating and Destroying Objects

*** Item 01: Static Factories vs Constructors                         :drill:
SCHEDULED: <2016-01-08 Fri>
:PROPERTIES:
:ID:       6fe16328-2578-41cd-94cf-6eaa8bccaecc
:DRILL_LAST_INTERVAL: 7.8216
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.5
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2015-12-31 Thu 15:48]
:END:

What are the advantages of a static factory over a constructor?

**** Answer

1. Unlike constructors, static factories have names.
2. Unlike constructors, static factories don't have to create a new object every
   time.
3. Unlike constructors, static factories Can return an object of any subtype of
   their return type.
4. They reduce the verbosity of creating parameterized type instances, negated by
   Java diamond operator.

*** Item 01: Disadvantages of Static Factories                        :drill:
SCHEDULED: <2016-01-02 Sat>
:PROPERTIES:
:ID:       2e32ef7c-aad4-492c-a143-0e805019a2db
:DRILL_LAST_INTERVAL: 2.5071
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2015-12-30 Wed 09:29]
:END:

What are the disadvantages of static factories?

**** Answer

1. A class without a public or protected constructor cannot be subclassed.
   Blessing in disguise as it forces composition over inheritance.
2. Static factories are not readily distinguishable from other static methods in
   the API docs.

*** Item 01:Static Factory naming conventions                         :drill:
SCHEDULED: <2016-01-08 Fri>
:PROPERTIES:
:ID:       42469e44-0a29-4251-9905-e683d6273ccc
:DRILL_LAST_INTERVAL: 7.9599
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.667
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2015-12-31 Thu 15:48]
:END:

What are common names of a static factory?

**** Answer

+ valueOf - return instance that has the "same" value as parameters.
  Essentially a type conversion.
+ of - concise alternative to valueOf
+ getInstance - returns instance that is described by parameters but doesn't
  have same value.  Singleton is the degenerate case.
+ newInstance - like getInstance, but guarantees that each instance is distinct
  from all others
+ getType - like getInstance but used when the factory method is in a different
  class.  Type indicates the return type.
+ new/Type/ - like new instance, but with a new /Type/

*** Item 02: Disadvantages of telescoping constructors              :drill:
SCHEDULED: <2016-01-04 Mon>
:PROPERTIES:
:ID:       5d0e59cb-1bd6-4b82-899d-40eff3015e27
:DRILL_LAST_INTERVAL: 5.1266
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.667
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2015-12-30 Wed 09:30]
:END:

What are the disadvantages of telescoping constructors?

**** Answer

+ They are harder to read in client code with many parameters.
+ The allow inconsistency and mandate mutability.
+ A java bean may be in an inconsistent state partway through construction.
+ JavaBeans patterns precludes the possibility of using an immutable class.

*** Item 02: Replacing Telescoping Constructors                     :drill:
SCHEDULED: <2016-01-06 Wed>
:PROPERTIES:
:ID:       5fcef5a1-814a-406c-a435-ee66fa073923
:DRILL_LAST_INTERVAL: 6.3619
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.46
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2015-12-31 Thu 15:47]
:END:

What pattern can you use to replace telescoping constructors?

**** Answer

The builder pattern.

*** Item 02: Builder Pattern 1                                        :drill:
SCHEDULED: <2016-01-04 Mon>
:PROPERTIES:
:ID:       78c527a6-6450-41df-aa53-de80b6d16a74
:DRILL_LAST_INTERVAL: 5.0869
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.333
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2015-12-30 Wed 09:27]
:END:

What are the advantages to the builder pattern?

**** Answer

+ The builder pattern simulates named parameters.
+ Good choice with classes or static factories that have more than a handful of
  parameters, "say 4 or more"

*** Item 02: Builder Pattern 2                                        :drill:
SCHEDULED: <2016-01-04 Mon>
:PROPERTIES:
:ID:       6a76637e-5331-48fa-8e54-91ddebe1d184
:DRILL_LAST_INTERVAL: 4.4693
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2015-12-31 Thu 15:46]
:END:

How do you make an abstract factory from a builder pattern?

**** Answer

1. Make a builder interface.
2. Use a function like ~Tree buildTree(Builder<? extends Node> nodeBuilder>
   {...}~

* Consulting

** Breaking the Time Barrier

*** Seven Mutual Benefits                                           :drill:
SCHEDULED: <2016-01-02 Sat>
:PROPERTIES:
:ID:       8EA0BF20-DE9A-418A-B275-3D0A6BC3CDC6
:DRILL_LAST_INTERVAL: 2.3353
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 2.2
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2015-12-31 Thu 15:52]
:END:

What are the seven mutual benefits of exploring value with clients?

**** Answer

1. Creates Trust - asking probing questions shows you're interested in
   understanding their unique problem.
2. Fosters Alignment - It's very helpful to agree on two points, Point A and
   Point B.  Point A is pain points. Point B is questions about goals.  A & B
   give immense clarity.
3. Helps your client better evaluate vendors - the deciding factor becomes who
   can deliver value versus what the price is.
4. Frames the Solution as an investment, not an expense - no one likes expenses
   and the exploration process makes the price an investment for an ROI
5. Inspires action - By helping a client to picture point B, they become
   emotionally involved and inspired to act.
6. Lets your client make an informed business decision - Offer options,
   i.e. price discrimination
7. Establishes a trusted partnership - After the first six benefits, clients see
   the impact of your work and champion for you.
