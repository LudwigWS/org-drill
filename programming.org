
* Emacs Questions

** Elisp

*** Dired files                                                       :drill:
SCHEDULED: <2016-02-02 Tue>
:PROPERTIES:
:ID:       34d8abed-eba4-4ad0-814c-14bc929fa90a
:DRILL_LAST_INTERVAL: 24.3939
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.25
:DRILL_EASE: 2.6
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-09 Sat 23:08]
:END:

How do you run an Emacs command on marked files in dired?

**** Answer
dired-get-marked-files

#+BEGIN_SRC emacs-lisp

(with-current-buffer "org-ref"
  (loop for path in (dired-get-marked-files)
        do (with-current-buffer (find-file-noselect path)
             (indent-region (point-min) (point-max)))))
#+END_SRC

* Programming Questions
** Math

*** Median 1                                                        :drill: SCHEDULED: <2015-12-28 Mon> :PROPERTIES: :ID:       6be85ae3-7fbb-42d7-9f95-3c57fba17c95 :DRILL_LAST_INTERVAL: 1.0061 :DRILL_REPEATS_SINCE_FAIL: 2 :DRILL_TOTAL_REPEATS: 1 :DRILL_FAILURE_COUNT: 0 :DRILL_AVERAGE_QUALITY: 4.0 :DRILL_EASE: 2.5 :DRILL_LAST_QUALITY: 4 :DRILL_LAST_REVIEWED: [2015-12-27 Sun 20:36] :END: What is the median?  How is defined for an odd set of number and an even set of numbers? **** Answer It's the middle number.  If the number of elements is even, the median is the mean of the middle two numbers.

** Object Oriented Programming

*** Benefits of OOP                                                 :drill:
SCHEDULED: <2016-01-17 Sun>
:PROPERTIES:
:ID:       4941e3e8-f13e-4876-ad11-2879598630c6
:DRILL_LAST_INTERVAL: 9.0276
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.333
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-08 Fri 17:04]
:END:

What are the benefits of OO Programing?

**** Answer

+ Code reuse
+ Modularity
+ Encapsulation - hide implmentation details
+ Pluggability

** Java Language

*** Variable Basics                                                 :drill:
SCHEDULED: <2016-01-11 Mon>
:PROPERTIES:
:ID:       dfe6c5a9-33b5-4933-a2c1-9f57ab726506
:DRILL_LAST_INTERVAL: 1.5512
:DRILL_REPEATS_SINCE_FAIL: 2
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.2
:DRILL_EASE: 2.6
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-09 Sat 23:02]
:END:

What are the 4 types of variables in Java?

**** Answer

1. Instance variables - non-static fields
2. Class variables - static fields
3. Local variables
4. Parameters

*** Primitive Types                                                 :drill:
SCHEDULED: <2016-01-17 Sun>
:PROPERTIES:
:ID:       938d3b90-09e3-45fa-92a4-1cbdc02d4e0e
:DRILL_LAST_INTERVAL: 9.8781
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 2
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.5
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-07 Thu 17:42]
:END:

What are Java's primitive types?

**** Answer

+ byte - 8-bit signed two's complement integer
+ short - 16-bit signed two's complement integer
+ int - 32-bit signed two's complement integer
+ long - 64-bit signed two's complement integer
+ float - single-precision 32-bit IEEE 745 floating point
+ long - double-precision 64-bit IEEE 745 floating point
+ char - 16-bit Unicode char
+ boolean - true and false

*** Primitive Types 2                                               :drill:
SCHEDULED: <2016-01-21 Thu>
:PROPERTIES:
:ID:       d2b0df5b-4bea-4a10-9de1-dfdab03d4796
:DRILL_LAST_INTERVAL: 12.5853
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.333
:DRILL_EASE: 2.6
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-08 Fri 17:04]
:END:

What are the default values for all primitive types?

**** Answer

Default values are only given to fields, not to local variables or parameters.

byte: 0
short: 0
int: 0
long: 0L
float: 0.0f
double: 0.0d
char: '\u0000'
Sting or any object: null
boolean: false

*** Integer Literals                                                :drill:
SCHEDULED: <2016-01-11 Mon>
:PROPERTIES:
:ID:       c966a52c-6989-4f50-891a-dbbb88ae72a9
:DRILL_LAST_INTERVAL: 6.3151
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.667
:DRILL_EASE: 2.6
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-05 Tue 22:04]
:END:

What integer literals does Java support?

**** Answer

integer - no suffix
long - l or L suffix, L is preferred
base 2 - 0b11
base 16 - 0xcafebabe
underscores, anywhere but the beginning and the end

*** Floating point literals                                         :drill:
SCHEDULED: <2016-01-18 Mon>
:PROPERTIES:
:ID:       c417f903-19a7-4d7f-9d30-9a2730839ee8
:DRILL_LAST_INTERVAL: 10.7294
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 2
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.46
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-01-07 Thu 17:42]
:END:

What floating point literals does Java support?

**** Answer

+ float - f or F suffix
+ double - d or D suffix
+ scientific notation - e or e, 1.234e2
+ underscores, anywhere but the beginning and the end or next to a decimal

*** Char literals                                                   :drill:
SCHEDULED: <2016-01-12 Tue>
:PROPERTIES:
:ID:       6ace1daf-5b6a-469b-b110-39ed0119e184
:DRILL_LAST_INTERVAL: 4.3203
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.167
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-08 Fri 17:07]
:END:

What char and string literals does Java support?

**** Answer

any UTF-16 values
unicode escapes - '\u0108', "S\u00ED"
escape sequences - \b backspace, \t tab, \n, \f, \r, \", \', \\

*** Class Literal                                                   :drill:
SCHEDULED: <2016-01-24 Sun>
:PROPERTIES:
:ID:       4d3cb5a7-cefd-49e1-8eef-5ffc815b67cd
:DRILL_LAST_INTERVAL: 13.5913
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.25
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-10 Sun 14:16]
:END:

What is a class literal in Java?

**** Answer

Appending ".class" to a type name, e.g. String.class.  Refers to the object that
represents the type itself.

*** Arrays 1                                                        :drill:
SCHEDULED: <2016-01-21 Thu>
:PROPERTIES:
:ID:       a19ccb8f-c14f-40c0-879b-1ed771349a05
:DRILL_LAST_INTERVAL: 13.5317
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 2
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-01-07 Thu 17:44]
:END:

How do you declare an array type in Java?

**** Answer

MyType[] anArray;
MyType anArray[]; - WORKS, but BAD

*** Arrays Copying                                                  :drill:
SCHEDULED: <2016-01-11 Mon>
:PROPERTIES:
:ID:       9d2af5e1-b9c1-4715-b227-0eb84708747e
:DRILL_LAST_INTERVAL: 5.1935
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 2.5
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-01-06 Wed 12:51]
:END:

How do you copy an array in Java?

**** Answer

System.arraycopy(Object src, int srcPos, Object dest, int destPos, int length)

Copy into initialized array, returns void.

Arrays.copyOf(T[] original, int newLength)
Copy into new array, truncates or pads with nulls to get newLength

Arrays.copyOfRange(T[] original, int from, int to)
Copies specified range into a new array

*** Reference Types                                                   :drill:
SCHEDULED: <2016-01-12 Tue>
:PROPERTIES:
:ID:       37cb8ba4-f7e8-4420-aa99-623b76180cfb
:DRILL_LAST_INTERVAL: 1.5517
:DRILL_REPEATS_SINCE_FAIL: 2
:DRILL_TOTAL_REPEATS: 1
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 5.0
:DRILL_EASE: 2.6
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-10 Sun 19:49]
:END:

SCHEDULED: <2016-01-11 Mon>
:PROPERTIES:
:ID:       7ce72681-d605-475d-9934-493eb5ccdefb
:DRILL_LAST_INTERVAL: 4.5731
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 2
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-01-06 Wed 12:58]
:END:

What are Java's reference types and when do they get garbage collected?

**** Answer

+ Direct reference - when no references exist
+ SoftReference - eligible for collection with low memory warning
+ WeakReference - when no direct references exist
+ PhantomReference - relate to cleanup and offer notification before finalization

*** Formatting String                                                 :drill:
SCHEDULED: <2016-01-13 Wed>
:PROPERTIES:
:ID:       fc8e3d5f-db93-4482-a0b9-5b55cec511c8
:DRILL_LAST_INTERVAL: 4.156
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 2
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-09 Sat 23:06]
:END:

How do you format a string in Java?

**** Answer

Creating a string
String.format(Locale l, String format, Object... args)
String.format(String format, Object... args)

Printing
System.out.printf(String formatString, Object... args)
System.out.format(String formatString, Object... args)

*** Format Specifier Syntax                                          :drill:
SCHEDULED: <2016-01-12 Tue>
:PROPERTIES:
:ID:       c531d30c-d996-4c67-a870-f5cc6faef83e
:DRILL_LAST_INTERVAL: 3.2564
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 2.8
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-09 Sat 23:08]
:END:

What is the syntax for a format specifier?

**** Answer

~%[argument_index$][flags][width][.precision]conversion~

https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html

*** Formatter - General Conversions                                   :drill:
SCHEDULED: <2016-01-11 Mon>
:PROPERTIES:
:ID:       1186f080-5d43-40a7-8045-7aae066f84b1
:DRILL_LAST_INTERVAL: 1.3603
:DRILL_REPEATS_SINCE_FAIL: 2
:DRILL_TOTAL_REPEATS: 2
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 2.5
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-01-10 Sun 20:08]
:END:

What general conversions are supported in a format specifier?

**** Answer

*General*

+ b, B - "false" if null, String.valueOf(arg) if boolean, otherwise "true"
+ h, H - "null" if null, otherwise Integer.toHexString(arg.hashCode())
+ s, S - "null" if null, if arg is Formattable then arg.FormatTo, otherwise
  arg.toString.

https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html

*** Formatter - Character Conversions                                 :drill:
SCHEDULED: <2016-01-11 Mon>
:PROPERTIES:
:ID:       25a7e8cc-dd99-40cf-9642-8e46cfb690ed
:DRILL_LAST_INTERVAL: 1.2707
:DRILL_REPEATS_SINCE_FAIL: 2
:DRILL_TOTAL_REPEATS: 1
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-01-10 Sun 19:56]
:END:

What character conversions are supported in a format specifier?

**** Answer
*Character*
+ c, C - Unicode character

https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html

*** Formatter - Integral Conversions                                  :drill:
SCHEDULED: <2016-01-12 Tue>
:PROPERTIES:
:ID:       30a7dece-1423-44b7-9460-3cbd24bbf374
:DRILL_LAST_INTERVAL: 1.5556
:DRILL_REPEATS_SINCE_FAIL: 2
:DRILL_TOTAL_REPEATS: 2
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 2.5
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-01-10 Sun 20:08]
:END:

What Integral conversions are supported in a format specifier?

**** Answer
*Integral*
+ d    - decimal integer
+ o    - octal integer
+ x, X - hexadecimal integer

*** Formatter - Floating Point Conversions                           :drill:
SCHEDULED: <2016-01-11 Mon>
:PROPERTIES:
:ID:       3fcd21ba-88ce-4022-bede-a4643cd26345
:DRILL_LAST_INTERVAL: 1.4346
:DRILL_REPEATS_SINCE_FAIL: 2
:DRILL_TOTAL_REPEATS: 1
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-01-10 Sun 20:01]
:END:

What floating point conversions are supported in a format specifier?

**** Answer
*Floating Point*
+ e, E - decimal number in computerized scientific notation
+ f    - decimal number
+ g, G - smart decimal number with maybe scientific notation, uses the shorter
  of e and f
+ a, A - hexadecimal floating-point number with significant and exponent

https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html

*** Formatter - Date time Conversions                                 :drill:
SCHEDULED: <2016-01-11 Mon>
:PROPERTIES:
:ID:       50ed3929-de34-4b06-9cb6-ee7cbcdc3fc8
:DRILL_LAST_INTERVAL: 1.4775
:DRILL_REPEATS_SINCE_FAIL: 2
:DRILL_TOTAL_REPEATS: 1
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-01-10 Sun 19:57]
:END:

What is the Date time prefix in a format specifier?

**** Answer

*Date Time*
+ t, T - prefix for date/time conversions

https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html

*** Formatter - Other Conversions                                     :drill:
SCHEDULED: <2016-01-11 Mon>
:PROPERTIES:
:ID:       3a979001-89ca-449c-beca-727caaaa4dd6
:DRILL_LAST_INTERVAL: 1.4797
:DRILL_REPEATS_SINCE_FAIL: 2
:DRILL_TOTAL_REPEATS: 1
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.5
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-10 Sun 20:02]
:END:

What other conversions are supported in a format specifier?

**** Answer

*Other*
+ %    - literal %
+ n    - platform line separator

https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html

*** Formatter - Flags                                                 :drill:
SCHEDULED: <2016-01-11 Mon>
:PROPERTIES:
:ID:       28483543-3abc-46e8-9d14-dbaa606e6ca8
:DRILL_LAST_INTERVAL: 1.4683
:DRILL_REPEATS_SINCE_FAIL: 2
:DRILL_TOTAL_REPEATS: 1
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-01-10 Sun 20:07]
:END:

What flags does java.util.Formatter support?

**** Answer

7 promoted to 007, HIV positive, negative, europe

+ '-'     left-justified
+ '#'     conversion-dependent alternate form
+ '+'     always include a sign
+ ' '     pad with leading spaces for positive values
+ '0'     zero-padded
+ ','     locale specific grouping separators
+ '('     enclose negative numbers in parenthesis

*** Integral different base                                         :drill:
SCHEDULED: <2016-01-11 Mon>
:PROPERTIES:
:ID:       9e2f790c-c1e8-4897-bfc5-cd766456d76e
:DRILL_LAST_INTERVAL: 1.2757
:DRILL_REPEATS_SINCE_FAIL: 2
:DRILL_TOTAL_REPEATS: 2
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 2.5
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-01-10 Sun 19:55]
:END:

How do you get an integral representation in different bases?

**** Answer

Returns the two's complement version:

Integer.toBinaryString(100);
Integer.toHexString(100);
Integer.toOctalString(100);
Long.*

Return the literal version

BigInteger.toString(radix) // The number is part of bigInteger
Integer.toString(100, 8); // prints 144 - octal
Integer.toString(100, 2); // prints 1100100 - binary
Integer.toString(100,16); // prints 64 - hex

*** Math Min and Max values                                           :drill:

How to do you get the min and max value of a number?

**** Answer

Integer.MIN_VALUE
Integer.MAX_VALUE

Long.MIN_VALUE
Long.MAX_VALUE

For floating point, the min value is actually the smallest magnitude or smallest
/absolute/ number.  If you want the most negative number, you do
-Float.MAX_VALUE.  That works since IEEE754 is symmetric around 0, unlike ints

Float.MIN_VALUE
Float.MAX_VALUE

Double.MIN_VALUE
Double.MAX_VALUE

Really you should use:

Float.NEGATIVE_INFINITY
Float.POSITIVE_INFINITY

Double.NEGATIVE_INFINITY
Double.POSITIVE_INFINITY

http://stackoverflow.com/questions/3884793/minimum-values-and-double-min-value-in-java



** Design Patterns

http://gameprogrammingpatterns.com/singleton.html

*** Singleton 1                                                       :drill:
SCHEDULED: <2016-01-20 Wed>
:PROPERTIES:
:ID:       92910693-0727-4cb6-8180-b879843f0a75
:DRILL_LAST_INTERVAL: 14.645
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.46
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-05 Tue 22:03]
:END:

What is the Singleton pattern?

**** Answer

Singleton is a class which only has one instance in a whole application. The
class provides a getInstance() method to access the singleton instances.

*** Singleton 2                                                       :drill:
SCHEDULED: <2016-01-13 Wed>
:PROPERTIES:
:ID:       5e4c1b0b-ede4-43cf-943d-d83c847691ac
:DRILL_LAST_INTERVAL: 3.6183
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 2.857
:DRILL_EASE: 2.08
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-09 Sat 23:11]
:END:

What are the advantages of a Singleton pattern?

**** Answer

+ Singletons can implement interfaces and inherit from other classes.
+ Singletons can be lazy loaded.  Handy for expensive resources or DB connections.
+ Singletons can be extended into a factory.

*** Singleton 3                                                       :drill:
SCHEDULED: <2016-01-30 Sat>
:PROPERTIES:
:ID:       7b32a2a7-f9c6-464d-a387-53a852634a45
:DRILL_LAST_INTERVAL: 19.5328
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 4
:DRILL_AVERAGE_QUALITY: 2.75
:DRILL_EASE: 2.6
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-10 Sun 14:23]
:END:

What are the disadvantages of a Singleton pattern?

**** Answer

+ May introduce global state which makes it harder to reason about code.
+ Encourages tight coupling.
+ Makes unit-testing in isolation difficult.
+ Hides dependencies within the Singleton that can attach to everything.
+ Difficult to parallelize because of mutable state.
+ Inability to subclass because of private constructor.

*** Singleton 4                                                       :drill:
SCHEDULED: <2016-01-14 Thu>
:PROPERTIES:
:ID:       f6b95c46-c338-4c84-bcb6-8773f38d6282
:DRILL_LAST_INTERVAL: 9.3512
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 2.32
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-05 Tue 22:04]
:END:

What are the alternatives to a Singleton pattern?

**** Answer

+ Dependency Injection by creating an interface and default implementation,
  construct a single instance at the top of your application and passing it to
  components.

*** List design patterns                                            :drill:
SCHEDULED: <2016-01-19 Tue>
:PROPERTIES:
:ID:       14175568-52ec-4096-b33d-129f38a1de3e
:DRILL_LAST_INTERVAL: 10.9226
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 2.75
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-08 Fri 17:09]
:END:

What are the most common design patterns?

**** Answer

Hitler singleton

+ Singleton
+ Iterator
+ Factory
+ Builder
+ Adapter
+ MVC
+ Decorator
+ Facade
+ Observer
+ Strategy
+ Command

** Arrays
*** Array 1 :drill:
SCHEDULED: <2016-02-03 Wed>
:PROPERTIES:
:ID:       15ac94ff-d684-4ff4-9660-88f3b64c5cfa
:DRILL_LAST_INTERVAL: 25.4648
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.25
:DRILL_EASE: 2.6
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-09 Sat 23:11]
:END:

How would you keep track of a median while getting a stream of numbers?

**** Answer

Use a balanced binary tree where instead of keeping track of the height of the
left and right nodes, we keep track of the number of elements.

A better solution, that doesn't involve new data structures is to use a min heap
and a max heap.  Python only provides a min-heap, so you can fake a max-heap by
multiplying by each number by -1 before inserting and then reversing it on a
pop or get-min.

http://www.ardendertat.com/2011/11/03/programming-interview-questions-13-median-of-integer-stream/

** Sorting

*** Bubble sort                                                     :drill:
SCHEDULED: <2016-01-12 Tue>
:PROPERTIES:
:ID:       45FF61B9-A095-4F7A-B7E2-2ED612001C56
:DRILL_LAST_INTERVAL: 9.0889
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.667
:DRILL_EASE: 2.7
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-03 Sun 03:00]
:END:

How is bubble sort implemented?

**** Answer

Adjacent items are repeatedly compared.

https://en.wikipedia.org/wiki/Bubble_sort

*** Quick Sort                                                      :drill:
SCHEDULED: <2016-01-13 Wed>
:PROPERTIES:
:ID:       A9B6BC51-C1E8-46DC-9288-9EFF8126261A
:DRILL_LAST_INTERVAL: 9.3439
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.333
:DRILL_EASE: 2.6
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-04 Mon 01:22]
:END:

What is quicksort's running time and space complexity?

**** Answer

Average Time: O(n log n)
Worst case Time: O(n^2)

Space: O(1)

** Hash Tables

*** Implement Hash Table                                            :drill:
SCHEDULED: <2016-01-23 Sat>
:PROPERTIES:
:ID:       12E1B6CF-EE70-42DA-8CB7-495435FEFD7D
:DRILL_LAST_INTERVAL: 14.021
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.4
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-01-09 Sat 23:05]
:END:

How would you implement a hash table?

**** Answer

Use an array of lists, normally referred to as buckets.  This method is
chaining.

Start with some default capacity.  Java HashMap is 16

insert(key, value)
call hashCode to get an int and take it mod length of the array.

Once you get past some threshold, Java's is 75% load factor, you resize the
array.

get(key)

Use hashcode to find the bucket and search the list to find the item.


*** Hash Table Collision Resolution                                   :drill:
SCHEDULED: <2016-01-11 Mon>
:PROPERTIES:
:ID:       F426A0A8-72BE-4F74-8F0E-32381A0D7C99
:DRILL_LAST_INTERVAL: 8.6992
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.667
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-02 Sat 08:32]
:END:

What are the two common hash table implementations techniques?

**** Answer

Chaining and Open addressing


*** Hash Table Open Addressing                                      :drill:
SCHEDULED: <2016-01-13 Wed>
:PROPERTIES:
:ID:       1940C116-6088-47FD-A81B-9B3E190113D7
:DRILL_LAST_INTERVAL: 7.856
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 2.75
:DRILL_EASE: 2.08
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-05 Tue 22:04]
:END:

What are the common techniques for implementing open addressing?

**** Answer

Hopscotch raptors.

+ Hopscotch hashing
+ Linear Probing
+ Quadratic Probing
+ Double Hashing
+ Coalesced hashing
+ Cuckoo Hashing
+ Robin Hood Hashing
+ 2-choice Hashing

*** Hopscotch hashing                                               :drill:
SCHEDULED: <2016-01-11 Mon>
:PROPERTIES:
:ID:       C53D4220-3C93-478B-BEBC-BA862E35D2D8
:DRILL_LAST_INTERVAL: 5.7707
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 2.667
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-05 Tue 22:08]
:END:

What is Hopscotch hashing?

**** Answer

Scheme for resolving hash collisions in a table using open addressing.

Each item is guaranteed to be in the neighborhood of the hashed bucket.  In
other words, the item will always be in the original array entry, or in the next
H-1 neighboring entries.

Each bucket contains a hop-information word, an H-bit bitmap, indicating which
of the next H buckets belong to the neighborhood.

To insert an item, use a linear probe to find some spot in the neighborhood of
entry i.

If there is no such spot, find some entry between i and j that could go to j and
still be in the neighborhood.

If you can't fit the new entry or if bucket i contains H items, resize the
table.

Well suited for concurrent hash table and provides good performance at load
factors exceeding 0.9.

https://en.wikipedia.org/wiki/Hopscotch_hashing

http://www.cs.tau.ac.il/~liortzaf/papers/disc2008_submission_98.pdf

http://codecapsule.com/2013/08/11/hopscotch-hashing/


*** Linear Probing                                                  :drill:
SCHEDULED: <2016-01-11 Mon>
:PROPERTIES:
:ID:       619671F6-3126-41E1-99C2-FB06CB4EC830
:DRILL_LAST_INTERVAL: 5.9521
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.333
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-01-05 Tue 22:05]
:END:

What is linear probing?

**** Answer

Scheme for resolving hash collisions in a table using open addressing.

Looks in some step size from bucket i.

A small step size provides better locality of reference, but results in
clustering.  Linear probing is sensitive to input distribution.


*** Quadratic Probing                                               :drill:
SCHEDULED: <2016-01-12 Tue>
:PROPERTIES:
:ID:       22C26F8D-EB15-497A-A2C5-E02227A246D8
:DRILL_LAST_INTERVAL: 7.2557
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.667
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-05 Tue 22:07]
:END:

What is Quadratic Probing?

**** Answer

Scheme for resolving hash collisions in a table using open addressing.

Sample sequence for some bucket i:

$i + 1^2, i + 2^2, i + 3^2, i + k^2$

Provides some locality of reference but not as good as linear probing.


*** Double Hashing                                                  :drill:
SCHEDULED: <2016-01-12 Tue>
:PROPERTIES:
:ID:       EE521875-0E0D-4784-9DF8-10076572D119
:DRILL_LAST_INTERVAL: 6.766
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.667
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-05 Tue 22:05]
:END:

What is Double Hashing?

**** Answer

Scheme for resolving hash collisions in a table using open addressing.

Uses a second hash function h2 to compute the step size for some value k.  The
ith location for k is represented by:

$h(i, k) = h1(k) + i * h2(k) mod (length array)$

https://en.wikipedia.org/wiki/Double_hashing

*** Coalesced hashing                                               :drill:
SCHEDULED: <2016-01-11 Mon>
:PROPERTIES:
:ID:       1DDEFC35-28AF-45D7-9911-FA560687150A
:DRILL_LAST_INTERVAL: 3.9864
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-01-07 Thu 17:40]
:END:

What is Coalesced hashing?

**** Answer

Scheme for resolving hash collisions in a table a hybrid of chaining and open
addressing.

Like chaining, except instead of a list, you reuse buckets of the backing
array.

+ Compute h(k)
+ If there's an item there, find the first open spot and link from the collision
+ If a different key get inserted into another chain, the values are said to
  coalesce.
+ Follow the links until you find an empty spot.

An important optimization is to only hash values to a subset of the table and
leave room for a "cellar" of values instead of coalescing.

Empirical analysis shows that you should use 86% of the size for hashing and
reserve 14% for the cellar.

*** Cuckoo Hashing

What is Cuckoo Hashing?

**** Answer

Scheme for resolving hash collisions in a table using open addressing.


*** Robin Hood Hashing

What is Robin Hood Hashing?

**** Answer

Scheme for resolving hash collisions in a table using open addressing.


*** 2-choice Hashing

What is 2-choice Hashing?

**** Answer

Scheme for resolving hash collisions in a table using open addressing.

** System Design

*** IPC - Interprocess communication                                :drill:
SCHEDULED: <2016-01-11 Mon>
:PROPERTIES:
:ID:       8C596422-5A0D-4635-A98A-C103638C5760
:DRILL_LAST_INTERVAL: 6.5848
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 2.833
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-04 Mon 01:20]
:END:

What are the different methods of IPC?

**** Answer

Zoolander.

+ Files
+ Sockets
+ Pipe, e.g. STDIN and STDOUT
+ Named Pipe
+ Semaphore
+ Message Passing
+ Message Queue
+ Signal
+ Shared Memory
+ Memory mapped file

https://en.wikipedia.org/wiki/Inter-process_communication


*** Latency                                                         :drill:
SCHEDULED: <2016-02-02 Tue>
:PROPERTIES:
:ID:       C3100282-E69F-4FE6-BCA1-2350961AC0C7
:DRILL_LAST_INTERVAL: 22.7114
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.75
:DRILL_EASE: 2.8
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-10 Sun 14:19]
:END:

What is latency?

**** Answer

Latency is the time required to perform some action or produce a result.  It is
measured in units of time.



*** Throughput                                                        :drill:
SCHEDULED: <2016-01-11 Mon>
:PROPERTIES:
:ID:       5FB041A6-CAFF-4317-A86B-39E6AF117500
:DRILL_LAST_INTERVAL: 8.6585
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.333
:DRILL_EASE: 2.6
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-02 Sat 08:35]
:END:

What is throughput?

**** Answer

Throughput is the number of actions executed or results produced per unit of
time.  It is measured in units per unit of time.

** Maven
https://www.udemy.com/apachemaven

* Java Concurrency

** Java Concurrency In Practice

*** Motivating Factors                                              :drill:
SCHEDULED: <2016-01-26 Tue>
:PROPERTIES:
:ID:       e084f79e-8e7c-4677-bbf8-415022b927cd
:DRILL_LAST_INTERVAL: 17.9188
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.833
:DRILL_EASE: 2.56
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-08 Fri 17:07]
:END:

What are the motivating factors for concurrency?

**** Answer

+ Resource Utilization - waiting for external operations
+ Fairness - share resources with time slicing
+ Convenience - often easier to write programs perform a single task and
  coordinate them

*** Thread Benefits                                                 :drill:
SCHEDULED: <2016-01-14 Thu>
:PROPERTIES:
:ID:       3acd0416-3113-4401-a5f4-58af124d3050
:DRILL_LAST_INTERVAL: 9.6704
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-04 Mon 01:21]
:END:

What are the benefits of threads?

**** Answer

+ Exploit multiple processors.
+ Simplicity of modeling, break complicated async workflow into simpler
  synchronous workflows and interact at specific sync points.
+ More responsive user interface.

*** Thread vs Process                                               :drill:
SCHEDULED: <2016-01-15 Fri>
:PROPERTIES:
:ID:       2505D78D-4817-463B-B40A-CCD23232BD24
:DRILL_LAST_INTERVAL: 11.4773
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.25
:DRILL_EASE: 2.08
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-01-04 Mon 01:19]
:END:

Whats the difference between threads and processes?

**** Answer

A process is an executing instance of a program.  Process provides resources
necessary to execute a program.  A process has:

+ Virtual address space
+ executable code
+ Open handles to system objects
+ a security context
+ A unique PID (process identifier)
+ At least one thread of execution

A thread is the entity within the process that can be scheduled for execution.
Threads share virtual address space of a process.  Each thread maintains:

+ Shared virtual address space from the process
+ Exception handlers
+ scheduling priority
+ thread local storage
+ a unique thread identifier
+ a set of structures to save the thread context until it is scheduled

http://stackoverflow.com/questions/200469/what-is-the-difference-between-a-process-and-a-thread

* Effective Java
** Creating and Destroying Objects
*** Item 01: Static Factories vs Constructors                         :drill:
SCHEDULED: <2016-01-30 Sat>
:PROPERTIES:
:ID:       6fe16328-2578-41cd-94cf-6eaa8bccaecc
:DRILL_LAST_INTERVAL: 20.8619
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.5
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-09 Sat 23:10]
:END:

What are the advantages of a static factory over a constructor?

**** Answer

1. Unlike constructors, static factories have names.
2. Unlike constructors, static factories don't have to create a new object every
   time.
3. Unlike constructors, static factories Can return an object of any subtype of
   their return type.
4. They reduce the verbosity of creating parameterized type instances, negated by
   Java diamond operator.

*** Item 01: Disadvantages of Static Factories                        :drill:
SCHEDULED: <2016-01-23 Sat>
:PROPERTIES:
:ID:       2e32ef7c-aad4-492c-a143-0e805019a2db
:DRILL_LAST_INTERVAL: 15.0829
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.667
:DRILL_EASE: 2.56
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-08 Fri 17:08]
:END:

What are the disadvantages of static factories?

**** Answer

1. A class without a public or protected constructor cannot be subclassed.
   Blessing in disguise as it forces composition over inheritance.
2. Static factories are not readily distinguishable from other static methods in
   the API docs.

*** Item 01:Static Factory naming conventions                         :drill:
SCHEDULED: <2016-01-28 Thu>
:PROPERTIES:
:ID:       42469e44-0a29-4251-9905-e683d6273ccc
:DRILL_LAST_INTERVAL: 19.882
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.75
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-08 Fri 17:09]
:END:

What are common names of a static factory?

**** Answer

+ valueOf - return instance that has the "same" value as parameters.
  Essentially a type conversion.
+ of - concise alternative to valueOf
+ getInstance - returns instance that is described by parameters but doesn't
  have same value.  Singleton is the degenerate case.
+ newInstance - like getInstance, but guarantees that each instance is distinct
  from all others
+ getType - like getInstance but used when the factory method is in a different
  class.  Type indicates the return type.
+ new/Type/ - like new instance, but with a new /Type/

*** Item 02: Disadvantages of telescoping constructors              :drill:
SCHEDULED: <2016-01-16 Sat>
:PROPERTIES:
:ID:       5d0e59cb-1bd6-4b82-899d-40eff3015e27
:DRILL_LAST_INTERVAL: 11.9503
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.75
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-04 Mon 01:18]
:END:

What are the disadvantages of telescoping constructors?

**** Answer

+ They are harder to read in client code with many parameters.
+ The allow inconsistency and mandate mutability.
+ A java bean may be in an inconsistent state partway through construction.
+ JavaBeans patterns precludes the possibility of using an immutable class.

*** Item 02: Replacing Telescoping Constructors                     :drill:
SCHEDULED: <2016-01-23 Sat>
:PROPERTIES:
:ID:       5fcef5a1-814a-406c-a435-ee66fa073923
:DRILL_LAST_INTERVAL: 16.6932
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.46
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-06 Wed 12:51]
:END:

What pattern can you use to replace telescoping constructors?

**** Answer

The builder pattern.

*** Item 02: Builder Pattern 1                                        :drill:
SCHEDULED: <2016-01-15 Fri>
:PROPERTIES:
:ID:       78c527a6-6450-41df-aa53-de80b6d16a74
:DRILL_LAST_INTERVAL: 11.2754
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-04 Mon 01:17]
:END:

What are the advantages to the builder pattern?

**** Answer

+ The builder pattern simulates named parameters.
+ Good choice with classes or static factories that have more than a handful of
  parameters, "say 4 or more"

*** Item 02: Builder Pattern 2                                        :drill:
SCHEDULED: <2016-01-15 Fri>
:PROPERTIES:
:ID:       6a76637e-5331-48fa-8e54-91ddebe1d184
:DRILL_LAST_INTERVAL: 10.9006
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.2
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-04 Mon 01:21]
:END:

How do you make an abstract factory from a builder pattern?

**** Answer

1. Make a builder interface.
2. Use a function like ~Tree buildTree(Builder<? extends Node> nodeBuilder>
   {...}~

*** Item 03: Singleton Impl                                           :drill:
SCHEDULED: <2016-01-18 Mon>
:PROPERTIES:
:ID:       aa694923-3d0b-4674-a339-df7d29f8065c
:DRILL_LAST_INTERVAL: 10.7113
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 2
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.5
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-07 Thu 17:43]
:END:

What are the three common methods for implementing a Singleton in Java?

**** Answer

1. public static final field
2. private constructor to initialize a private static final field and static factory getInstance
3. Enum with a single field

*** Item 03: Singleton Enum                                           :drill:
SCHEDULED: <2016-01-18 Mon>
:PROPERTIES:
:ID:       794a10aa-35b6-46af-8845-ca9baa214da5
:DRILL_LAST_INTERVAL: 8.5198
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.25
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-09 Sat 23:07]
:END:

Why is a single-element enum the best way to implement a singleton?

**** Answer

1. It's equivalent to a public field approach
2. More concise
3. Provides serialization machinery for free.
4. Ironclad guarantee against multiple instantiation, even against reflection or serialization attacks.

Effective Java 3

*** Item 04: Noninstantiability                                       :drill:
SCHEDULED: <2016-01-19 Tue>
:PROPERTIES:
:ID:       6559ea73-dbfa-4d3f-90be-178ffa4c4927
:DRILL_LAST_INTERVAL: 10.5062
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 2.46
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-08 Fri 17:05]
:END:

How do you enforce noninstantiability and when might you do so?

**** Answer

You might have a grouping of static methods like ~java.util.Arrays~ or utility functions.

Make a class noninstaniable by including a private constructor and throw an AssertationError.

This will also prevent the class from being subclassed.

Effective Java 4

*** Item 04: Noninstantiability Abstract                              :drill:
SCHEDULED: <2016-01-17 Sun>
:PROPERTIES:
:ID:       25f88f5c-f8d8-4d8d-8a9c-d3fb11936443
:DRILL_LAST_INTERVAL: 10.233
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 2
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-01-07 Thu 17:44]
:END:

How could you instantiate an abstract class?

**** Answer

Subclass the abstract class and instantiate the subclass.

Effective Java 4

*** Item 05: Unnecessary Objects                                      :drill:
SCHEDULED: <2016-01-11 Mon>
:PROPERTIES:
:ID:       5522d806-b622-4968-a64b-73c656113047
:DRILL_LAST_INTERVAL: 3.2482
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 2.667
:DRILL_EASE: 1.94
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-01-08 Fri 17:10]
:END:

How can you avoid unnecessary objects?

**** Answer

Standing around 7-11

+ Use string literals
+ Prefer primitives and watch out for autoboxing
+ Use a static initializer for objects only set once.

Effective Java 5

*** Item 06: Obsolete Object References                               :drill:
SCHEDULED: <2016-01-19 Tue>
:PROPERTIES:
:ID:       32570943-f46d-4edb-90ee-15b4ea21945d
:DRILL_LAST_INTERVAL: 9.213
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 4
:DRILL_AVERAGE_QUALITY: 2.75
:DRILL_EASE: 2.32
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-10 Sun 14:21]
:END:

What is the proper name for a memory leak in a garbage-collected language?

**** Answer

unintentional object retention

*** Item 06: Obsolete Object References Fixes                         :drill:
SCHEDULED: <2016-01-20 Wed>
:PROPERTIES:
:ID:       f933a03d-e252-4082-bba9-f90014e1ac13
:DRILL_LAST_INTERVAL: 9.5882
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-10 Sun 14:22]
:END:

How do you fix obsolete references?

**** Answer

Null out the object, but this should be the exception, not the rule.

The best way to handle it is to let the object fall out of scope.

*** Item 06: Obsolete Object Reference Alert                          :drill:
SCHEDULED: <2016-01-19 Tue>
:PROPERTIES:
:ID:       502824c2-771b-48ca-b809-02020dd22aa4
:DRILL_LAST_INTERVAL: 8.9407
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.4
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-10 Sun 14:22]
:END:

When will you typically see obsolete references (memory leaks)?

**** Answer

+ Whenever a class manages it's own memory - a stack
+ Caches - weak references
+ Listeners and callbacks

*** Item 06: Obsolete Objects Callbacks                               :drill:
SCHEDULED: <2016-01-18 Mon>
:PROPERTIES:
:ID:       39949c56-c779-4ab1-9947-a8ee04195bf7
:DRILL_LAST_INTERVAL: 9.2453
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.46
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-09 Sat 23:08]
:END:

How do you ensure callbacks are garbage collected?

**** Answer

Store only weak references to them, e.g. storing as keys in a WeakHashMap.

http://www.java-tips.org/java-se-tips-100019/88888889-java-util/1475-using-weakhashmap-for-listener-lists.html

*** Item 07: Avoid Finalizers                                         :drill:
SCHEDULED: <2016-01-11 Mon>
:PROPERTIES:
:ID:       bdd9bdf4-1a9d-4976-a137-25dbdafdd20d
:DRILL_LAST_INTERVAL: 4.8645
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.333
:DRILL_EASE: 2.46
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-01-06 Wed 12:58]
:END:

What are the issues with finalizers?

**** Answer

They are unpredictable, often dangerous and generally unnecessary.

+ Unpredictable - no guarantee on execution, never do anything time critical in a finalizer
+ Severe performance penalty for using finalizers versus regular garbage collection.
+ Concurrent execution of finalizers can leave graph-like data structures in a
  corrupt state.
+ Uncaught exceptions in finalizers are ignored and not reported.
+ Finalizers can resurrect objects in corrupt states


*** Item 07: Avoid Finalizers - Alternative                           :drill:
SCHEDULED: <2016-01-17 Sun>
:PROPERTIES:
:ID:       686ef890-f052-4df8-86ce-8a7ed58fa8f7
:DRILL_LAST_INTERVAL: 8.3965
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.667
:DRILL_EASE: 2.32
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-09 Sat 23:07]
:END:

What should you use instead of a finalizers?

**** Answer

An explicit termination method. close, dispose, cancel.

Typically called with a try-finally.

*** Item 07: Avoid Finalizers - Use Cases                             :drill:
SCHEDULED: <2016-01-17 Sun>
:PROPERTIES:
:ID:       9b440ee4-ec6a-4881-abbe-720f15064554
:DRILL_LAST_INTERVAL: 8.0673
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 2.6
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-09 Sat 23:12]
:END:

What are valid use cases for finalizers?

**** Answer

+ Safety net if owner forgets to call explicit termination method, but should
  log a warning indicating a bug in the client code.
+ Native peers, assuming the native peer holds no critical resources.

*** Item 07: Avoid Finalizers - Safe Impl                             :drill:
SCHEDULED: <2016-01-11 Mon>
:PROPERTIES:
:ID:       6262a0ed-cd87-446f-b258-f05c1037d8c9
:DRILL_LAST_INTERVAL: 1.6967
:DRILL_REPEATS_SINCE_FAIL: 2
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.25
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-09 Sat 23:14]
:END:

How should you implement finalizers if you must?

**** Answer

+ Chain with super.finalize(), since it's not done automatically.
+ Use a finalizer guardian in a public, non-final class to ensure the finalizer
  isn't overridden.

** Methods Common to All Objects
*** Item 08: Don't Override Equals                                    :drill:
SCHEDULED: <2016-01-11 Mon>
:PROPERTIES:
:ID:       3e2e805b-2665-456a-b24e-331c47727060
:DRILL_LAST_INTERVAL: 1.3724
:DRILL_REPEATS_SINCE_FAIL: 2
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-10 Sun 14:24]
:END:

What conditions should you not override equals?

**** Answer

fork, change random colors, parent, privacy drapes.

1. Each instance of the class is inherently unique, e.g a Thread.
2. You don't care if the class provides a logical equality test.
   java.util.Random probably doesn't need a logical equals.
3. A superclass override equals and the behavior is appropriate for this
   subclass.
4. The class is private or package private and you know equals is never called.
   In which case, you should override it and throw an assertion error.

*** Item  08: Equals method general contracts                         :drill:
SCHEDULED: <2016-01-14 Thu>
:PROPERTIES:
:ID:       7e040020-d7c2-4719-a33c-f410238fb22d
:DRILL_LAST_INTERVAL: 5.1279
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.667
:DRILL_EASE: 2.6
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-09 Sat 23:08]
:END:

What are the general contracts for the equals method?

**** Answer

+ Reflexive, a == a is true.
+ Symmetric, a == b, b == a
+ Transitive, if a == b and b == c, then a == c.
+ Consistent, returns the same value for multiple invocations.
+ Non-Nullity, x.equals(null) must be false.

*** Item 08: High Quality Equals                                      :drill:
SCHEDULED: <2016-01-13 Wed>
:PROPERTIES:
:ID:       fed0c121-7d93-476c-b640-1e849ec31f5a
:DRILL_LAST_INTERVAL: 4.4534
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-09 Sat 23:08]
:END:

What are the steps to a high quality equals method?

**** Answer

1. Use the == operator to see if the argument is a reference to this object.  A
   performance optimization.
2. Use the instanceof operator to check if the argument has the right type.  You
   don't need to check for null with instanceof.
3. Cast the argument to the correct type.  The preceeding instanceof guarantees
   that it will succeed.
4. Check equality in all the significant fields of the class.
5. Check to see if it obeys the general contract, reflexive, symmetric,
   transitive, consistent and non-nullity.

*** Item 08: Equals overloading                                       :drill:
SCHEDULED: <2016-01-13 Wed>
:PROPERTIES:
:ID:       ed57b79c-3dcb-45ce-ae9f-7e1b1fd018e9
:DRILL_LAST_INTERVAL: 4.9026
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 2
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.46
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-08 Fri 17:04]
:END:

What does the argument type have to be when overriding equals?

**** Answer

Object o, otherwise you're overloading equals instead of overriding it.

*** Item 08: High Quality Equals Impl                                 :drill:
SCHEDULED: <2016-01-14 Thu>
:PROPERTIES:
:ID:       fe0f1e4b-4282-478e-8dbf-295384c0a8d4
:DRILL_LAST_INTERVAL: 4.5354
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-09 Sat 23:07]
:END:

What does a correct equals method look like?

**** Answer

#+BEGIN_SRC java
public boolean equals(Object o) {
    if (o == this) {
        return true;
    }
    if (!(o instanceOf MyClass)) {
        return false;
    }
    MyClass myClass = (MyClass) o;
    return myClass.field1 == this.field1
        && myClass.field2 == this.field2;

}
#+END_SRC

*** Item 09: Override hashCode                                        :drill:
SCHEDULED: <2016-01-12 Tue>
:PROPERTIES:
:ID:       382fa3e9-6ee7-4823-b6ff-e2e77901cafe
:DRILL_LAST_INTERVAL: 4.3208
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 2
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.46
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-08 Fri 17:08]
:END:

When should you override hashCode?

**** Answer

Whenever you override equals.  If you don't, you'll violate the general contract
for Object.hashCode.

*** Item 09: hashCode general contract                                :drill:
SCHEDULED: <2016-01-13 Wed>
:PROPERTIES:
:ID:       1aa1df92-7da1-4f7d-b75e-145bbd22fadb
:DRILL_LAST_INTERVAL: 3.8953
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 2
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-09 Sat 23:10]
:END:

What is the general contract for Object.hashCode?

**** Answer

1. Consistency - hashCode must return the same number when called on the same object.
2. Equality - if two objects are equal, hashCode must return the same integer.
3. Inequality - not required that hashCode produce a different integer for
   different objects.

*** Item 09: hashCode impl                                            :drill:
SCHEDULED: <2016-01-14 Thu>
:PROPERTIES:
:ID:       d55ad317-672d-4bee-ab65-d11c8941a4d8
:DRILL_LAST_INTERVAL: 4.1136
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 4
:DRILL_AVERAGE_QUALITY: 2.571
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-10 Sun 14:19]
:END:

How do you implement hashCode for an object?

**** Answer

1. Start with a prime number, e.g. 37 and set result to it.
2. Compute an int hashCode c for each field in the Object.
   + boolean: f ? 1 : 0;
   + char, byte, short, int: (int) f
   + long: (int) (f ^ (f >>> 32))
   + float: Float.floatToIntBits(f);
   + double: Double.doubletoLongBits(f);
   + object: call hashCode.  If null, return 0 (customary).
   + array: compute significant values with these rules.  If everything is
     significant, call Arrays.hashCode.
3. Combine the hashCode c from step 2 into result with:

   result = 31 * result + c;

*** Item 09: hashCode optimizations                                  :drill:
SCHEDULED: <2016-01-13 Wed>
:PROPERTIES:
:ID:       078c43bc-8da6-4529-9389-a9d7b8f9b156
:DRILL_LAST_INTERVAL: 3.5847
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.333
:DRILL_EASE: 2.46
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-09 Sat 23:07]
:END:

How to you speed up hashCode?

**** Answer

Cache the value in a private field.  Don't skip fields because the has will be unbalanced.

*** Item 10: Why override toString                                    :drill:

Why should you override toString?

**** Answer

It makes a class much more pleasant to use.  Compare:

{Jenny=PhoneNumber@163b91}
{Jenny=(707) 867-5390}


*** Item 10: override toString format                                 :drill:

What info should be in toString?

**** Answer

All of the interesting information. For a PhoneBook class:

"Manhattan white pages (184752 listings)"

The string should be self explanatory.

*** Item 10: override toString format specification                   :drill:

When should you specify the value of toString?

**** Answer

For value classes, since it will serve as a standard, unambiguous, human
readable representation.

You should provide a static factory to convert between the string and Object.

Either way, clearly document your intentions.

*** Item 10: override toString: programmatic access                   :drill:

Should you provide programmatic asses to all info in toString?

**** Answer

Yes.



* Consulting

** Breaking the Time Barrier

*** Seven Mutual Benefits                                           :drill:
SCHEDULED: <2016-01-20 Wed>
:PROPERTIES:
:ID:       8EA0BF20-DE9A-418A-B275-3D0A6BC3CDC6
:DRILL_LAST_INTERVAL: 12.6695
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 2.571
:DRILL_EASE: 2.08
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-01-07 Thu 17:44]
:END:

What are the seven mutual benefits of exploring value with clients?

**** Answer

1. Creates Trust - asking probing questions shows you're interested in
   understanding their unique problem.
2. Fosters Alignment - It's very helpful to agree on two points, Point A and
   Point B.  Point A is pain points. Point B is questions about goals.  A & B
   give immense clarity.
3. Helps your client better evaluate vendors - the deciding factor becomes who
   can deliver value versus what the price is.
4. Frames the Solution as an investment, not an expense - no one likes expenses
   and the exploration process makes the price an investment for an ROI
5. Inspires action - By helping a client to picture point B, they become
   emotionally involved and inspired to act.
6. Lets your client make an informed business decision - Offer options,
   i.e. price discrimination
7. Establishes a trusted partnership - After the first six benefits, clients see
   the impact of your work and champion for you.
* Psychology

** New Year's Resolutions Don't Work

URL: http://www.samuelthomasdavies.com/goals-systems/

Davies describes about how goal oriented people focus on the goal and then lose
motivation.  There's no driving factor after the goal is achieved.  Buzz Aldrin
turned to drinking and fell into depression after landing on the moon.  What you
should do instead is build systems.

System Overview

Identify a keystone habit

Use a feedback loop.

*** Goals are bad                                                     :drill:
SCHEDULED: <2016-01-17 Sun>
:PROPERTIES:
:ID:       10f40af7-186f-448e-a1fe-35e8c881ad84
:DRILL_LAST_INTERVAL: 7.5769
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-09 Sat 23:09]
:END:

Why are goals bad?

**** Answer

1. Goals delay happiness.  Goal oriented exist in state of pre-success failure
   at best, or permanent failure.  Teach yourself to always put happiness off
   until the next milestone.  Hedonic adaptation.
2. Goals derail long-term progress.  Goals redirect focus from processes to
   outcomes.  After achieving goal, people fall back into old habits,
   e.g. cyclical weight loss.
3. Goals lure us into belieiving we can control the future.  Everest climbers
   made goal a part of their identity and jeopordized themselves to get the goal.

*** Hedonic Adaptation                                                :drill:
SCHEDULED: <2016-01-16 Sat>
:PROPERTIES:
:ID:       0048cd41-4170-47a4-aa65-23a9bc9c7817
:DRILL_LAST_INTERVAL: 7.2815
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.2
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-09 Sat 23:11]
:END:

What is hedonic adaptation (hedonic treadmill)?

**** Answer

Tendency of humans to quickly return to a relatively stable level of happiness
despite major positive or negative events or life changes.

As we lose more weight, make more moeny, win more competition our expections
rise in tandem, which results in no permanent gain in happiness.


*** Build a system                                                    :drill:
SCHEDULED: <2016-01-11 Mon>
:PROPERTIES:
:ID:       5657a814-6be2-479d-9ba5-bc806e578282
:DRILL_LAST_INTERVAL: 4.975
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 2.25
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-01-06 Wed 00:21]
:END:

What are the steps to build a system instead of a goal?

**** Answer

moon rocket habit

1. Decide what you want to achieve.
2. Choose ONE habit that will nudge you toward the desired outcome.
3. Revise your system on a regular basis.

*** What to Achieve                                                   :drill:
SCHEDULED: <2016-01-17 Sun>
:PROPERTIES:
:ID:       9de25430-f028-4591-a97d-1e74bc205238
:DRILL_LAST_INTERVAL: 8.37
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.333
:DRILL_EASE: 2.56
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-09 Sat 23:10]
:END:

How do you decide what you want to achieve?

**** Answer

Use the why drill.  Ask yourself why, five times in a row.  For example:

I want to lose 14 pounds.
Why?
Because I want to look good naked.
Why?
Because I want to feel good about my body.
Why?
Because I want to find my soul mate.
Why?
Because I want to settle down and start a family.

*** Keystone Habit                                                    :drill:
SCHEDULED: <2016-01-15 Fri>
:PROPERTIES:
:ID:       935adb91-8ffe-42dc-9ba9-d59003dd78d9
:DRILL_LAST_INTERVAL: 6.2522
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 2.833
:DRILL_EASE: 2.08
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-09 Sat 23:10]
:END:

What is a keystone habit and how do identify it?

**** Answer

What's the ONE thing, such that, by doing it, your goal (or what you want)
becomes a by product?

Write down as many habits as you can think off.  Identify ONE habit and
systemise it.

/The ONE Thing/ by Keller

*** Habitualise ONE Thing                                             :drill:
SCHEDULED: <2016-01-12 Tue>
:PROPERTIES:
:ID:       d51ec8b8-65ef-4264-a249-1a308dbd746a
:DRILL_LAST_INTERVAL: 1.5159
:DRILL_REPEATS_SINCE_FAIL: 2
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.25
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-01-10 Sun 14:23]
:END:

How do you systemize your ONE thing with cue-habit-reward and implementation
intention?

**** Answer

System one down: Cue, Habit, Reward, Contingencies

Use implementation intention.

Identify a trigger.  The best triggers are immediately preceeding actions - like
an existing habit, e.g. eating, showering, waking up.

Identify ONE thing to do immediately after your cue.  For example, "After I
return home from work on Mondays, Tuesdays and Wednesdays, I will go for a run
for five miles."

Use a stupid simple behavior that's really easy to do.

Account for contingencies:

If I return home and the weather does not permit, I will go running in the
morning instead.

*** Gall's Law                                                        :drill:
SCHEDULED: <2016-01-11 Mon>
:PROPERTIES:
:ID:       29f0eb88-d255-49f5-8b75-9fc8c6bae6ae
:DRILL_LAST_INTERVAL: 3.9365
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 2.8
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-01-07 Thu 17:41]
:END:

What is Gall's Law

**** Answer

A complex system that works is invariably found to have evolved from a simple
system that worked. A complex system designed from scratch never works and
cannot be patched up to make it work. You have to start over with a working
simple system. – John Gall (1975, p.71)

*** Revise System                                                     :drill:
SCHEDULED: <2016-01-11 Mon>
:PROPERTIES:
:ID:       5e20c306-4d50-4d12-b458-ef270f9c1242
:DRILL_LAST_INTERVAL: 1.733
:DRILL_REPEATS_SINCE_FAIL: 2
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 3
:DRILL_AVERAGE_QUALITY: 2.5
:DRILL_EASE: 2.08
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-01-09 Sat 23:03]
:END:

How do you revise your system of accomplishment on a really, regular basis?

**** Answer

Gall trebuchet model orca

+ Gall's law.  Evolve a complex system from a working simple system.
+ Use modeling.
+ Do more of what already works.
+ Use a feedback loop to identify what works and what doesn't.

*** Feedback Loop                                                     :drill:
SCHEDULED: <2016-01-11 Mon>
:PROPERTIES:
:ID:       8c6a1d60-c410-48b7-b6a9-a875255b85c4
:DRILL_LAST_INTERVAL: 4.4846
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 2.8
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-01-07 Thu 17:43]
:END:

What are the stages of a feedback loop?

**** Answer

1. Evidence
2. Relevance
3. Consequence
4. Action

Goal - lose 10,000 lbs

+ Evidence - track calories, app notifes that bucket of lard put you over the limit
+ Relevance - information gets your attention because it shows if you're on
  target or not.
+ Consequence - you realise repeating this behavior could jeopardise your diet
  in the the long term.
+ Action - You learn from your mistake and replace snack with carrots.


*** Impact Bias                                                       :drill:
SCHEDULED: <2016-01-23 Sat>
:PROPERTIES:
:ID:       a3e8eb48-624b-4738-87da-082295451369
:DRILL_LAST_INTERVAL: 12.8474
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.46
:DRILL_LAST_QUALITY: 5
:DRILL_LAST_REVIEWED: [2016-01-10 Sun 14:19]
:END:

What is impact bias?

**** Answer

The tendency to overestimate the length and intensity of our future emotions.
* Maven
** Udacity

*** Standard Maven Layout                                 :drill:
SCHEDULED: <2016-01-12 Tue>
:PROPERTIES:
:ID:       3f3d6cb8-fe88-4dc8-aaba-ea786e50e6ea
:DRILL_LAST_INTERVAL: 1.6379
:DRILL_REPEATS_SINCE_FAIL: 2
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 2.667
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2016-01-10 Sun 14:25]
:END:

What is the standard maven layout?

**** Answer

- src
  - main
    - java
    - resources
    - webapp
    - filters
  - test
    - java
    - resources
    - filters
  - it
  - site
- target
LICENSE.txt
NOTICE.txt
README.txt

https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html
